<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XuSir&#39;Blog</title>
  <icon>https://www.gravatar.com/avatar/a11471fd7d9034bf0e8495f9d22c1ab7</icon>
  <subtitle>生活如剧—xuxu而升</subtitle>
  <link href="https://xusir.fun/atom.xml" rel="self"/>
  
  <link href="https://xusir.fun/"/>
  <updated>2025-03-18T08:04:27.586Z</updated>
  <id>https://xusir.fun/</id>
  
  <author>
    <name>xuSir</name>
    <email>2019448927@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java进度条</title>
    <link href="https://xusir.fun/posts/2503181448.html"/>
    <id>https://xusir.fun/posts/2503181448.html</id>
    <published>2025-03-18T14:48:21.000Z</published>
    <updated>2025-03-18T08:04:27.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>素材参考：<a href="https://gitee.com/1570411381/codecafe/blob/master/src/main/java/com/cafe/case6/LoopDemo.java">程序员Cafe</a></p></blockquote><p>今天刷到一个视频看到了一个有趣的效果，定义一个for循环遍历，在控制台输出一个进度条显示遍历的进度。<br>代码很简单就是下面几行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProgressBarDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始运行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= size; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;进度：&quot;</span>+ i + <span class="string">&quot;/&quot;</span> + size + <span class="string">&quot;\r&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://picbed.xusir.fun/post_img/java进度条/demo01.gif" alt="demo01"></p><h1 id="r-n"><a href="#r-n" class="headerlink" title="\r\n"></a>\r\n</h1><p>\r\n起源于老式打印机，\r表示当打印机打字时,每打一个字，中间的字车就会像左移动一位,当按下回车键时字车就会回到行首；\n表示按下换行键时，纸张滚筒就会向下滚动一行。所以<code>\r\n</code>的作用就是将光标移动至下一行的行首</p><ul><li><code>\r</code>：作用是将光标回到行首。</li><li><code>\n</code>：作用是将光标往下移动一行。</li></ul><p>所以前面的演示代码就可以这样解释：<strong>输出进度条的时候，每次输出完进度条，都会将光标移动到行首输出，这样，就会覆盖掉之前的进度条，从而实现进度条的动态更新。</strong></p><h1 id="更多进度条样式"><a href="#更多进度条样式" class="headerlink" title="更多进度条样式"></a>更多进度条样式</h1><ol><li><p>进度条工具类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xnj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进度条演示类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProgressBar</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> total;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> width;<span class="comment">//宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> current;<span class="comment">//当前</span></span><br><span class="line">    <span class="keyword">private</span> Style style;<span class="comment">//样式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Style</span> <span class="variable">STYLE_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Style</span>(<span class="string">&quot;#&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Style</span> <span class="variable">STYLE_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Style</span>(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Style</span> <span class="variable">STYLE_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Style</span>(<span class="string">&quot;=&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressBar</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span> width, <span class="type">int</span> style)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.current = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (style == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.style = STYLE_1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (style == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.style = STYLE_2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.style = STYLE_3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n开始执行任务...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n任务执行结束...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> progress)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.current = progress;</span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印当前进度的函数</span></span><br><span class="line"><span class="comment">     * 该函数通过计算当前进度与总进度的比例来确定进度条的显示状态</span></span><br><span class="line"><span class="comment">     * 使用字符串构建进度条，并在控制台中动态显示</span></span><br><span class="line"><span class="comment">     * 当进度达到100%时，调用finish函数表示结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//计算进度百分比</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">percentage</span> <span class="operator">=</span> (<span class="type">double</span>) current / total;</span><br><span class="line">        <span class="comment">//根据进度百分比和进度条宽度计算进度标记数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">progressMarks</span> <span class="operator">=</span> (<span class="type">int</span>) (percentage * width);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符串构建器来构建进度条字符串</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//添加进度百分比和进度条起始部分</span></span><br><span class="line">        bar.append(String.format(<span class="string">&quot;当前进度: %3d%% [&quot;</span>, (<span class="type">int</span>) (percentage * <span class="number">100</span>)));</span><br><span class="line">        <span class="comment">//标记是否是右侧进度条的开始</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">firstRight</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//遍历进度条宽度，根据进度标记数添加相应的进度条字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; width; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; progressMarks) &#123;</span><br><span class="line">                <span class="comment">//进度未完成部分</span></span><br><span class="line">                bar.append(style.leftStr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//进度完成部分</span></span><br><span class="line">                <span class="keyword">if</span> (firstRight) &#123;</span><br><span class="line">                    <span class="comment">//右侧进度条开始字符</span></span><br><span class="line">                    bar.append(style.leftEndStr);</span><br><span class="line">                    firstRight = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//右侧进度条字符</span></span><br><span class="line">                bar.append(style.rightStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加进度条结束部分</span></span><br><span class="line">        bar.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态更新控制台输出</span></span><br><span class="line">        System.out.print(<span class="string">&quot;\r&quot;</span> + bar);</span><br><span class="line">        <span class="comment">//进度完成时，调用finish函数</span></span><br><span class="line">        <span class="keyword">if</span> (percentage &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Style</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String leftStr; <span class="comment">//进度条的左部字符</span></span><br><span class="line">        <span class="keyword">private</span> String rightStr; <span class="comment">//进度条的右部字符</span></span><br><span class="line">        <span class="keyword">private</span> String leftEndStr; <span class="comment">//进度条的左部结束字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Style</span><span class="params">(String leftStr, String rightStr, String leftEndStr)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.leftStr = leftStr;</span><br><span class="line">            <span class="built_in">this</span>.rightStr = rightStr;</span><br><span class="line">            <span class="built_in">this</span>.leftEndStr = leftEndStr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoopProgressDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">        <span class="comment">// 创建进度条对象，（进度，宽度，样式）</span></span><br><span class="line">        <span class="type">ProgressBar</span> <span class="variable">progressBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProgressBar</span>(size, <span class="number">60</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;开始运行&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            doSth();</span><br><span class="line">            progressBar.update(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟耗时操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果<br>样式1：<br><img src="https://picbed.xusir.fun/post_img/java进度条/loopdemo01.gif" alt="loopdemo01"><br>样式2：<br><img src="https://picbed.xusir.fun/post_img/java进度条/loopdemo02.gif" alt="loopdemo02"><br>样式3：<br><img src="https://picbed.xusir.fun/post_img/java进度条/loopdemo03.gif" alt="loopdemo03"></p></li></ol>]]></content>
    
    
    <summary type="html">基于Java实现进度条效果。</summary>
    
    
    
    
    <category term="note" scheme="https://xusir.fun/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>ApachePOI</title>
    <link href="https://xusir.fun/posts/2503081530.html"/>
    <id>https://xusir.fun/posts/2503081530.html</id>
    <published>2025-03-08T15:30:31.000Z</published>
    <updated>2025-03-18T08:04:27.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ApachePOI 是一个开源的 Java 库，用于创建和操作 Microsoft Office 文件，如 Excel、Word 等。它提供了一组 API，允许开发人员创建、读取和修改 Office 文件，而无需依赖 Microsoft Office 应用程序。<br>一般情况下，POI都是用于操作Excel文件。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Apache POI--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="测试API举例"><a href="#测试API举例" class="headerlink" title="测试API举例"></a>测试API举例</h1><p><strong>关键类和方法：</strong></p><ul><li><code>XSSFWorkbook excel = new XSSFWorkbook();</code>: Excel文件</li><li><code>XSSFSheet sheet1 = excel.createSheet(&quot;Sheet1&quot;);</code>: Excel工作表</li><li><code>XSSFRow row = sheet1.createRow(行);</code>: Excel行</li><li><code>XSSFCell cell = row.createCell(列).setCellValue(&quot;值&quot;);</code>: Excel单元格</li></ul><h2 id="通过POI创建Excel文件并且写入文件内容"><a href="#通过POI创建Excel文件并且写入文件内容" class="headerlink" title="通过POI创建Excel文件并且写入文件内容"></a>通过POI创建Excel文件并且写入文件内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过POI创建Excel文件并且写入文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write_test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 在内存中创建一个Excel文件</span></span><br><span class="line">    <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">    <span class="comment">// 创建一个工作簿(Sheet页)</span></span><br><span class="line">    <span class="type">XSSFSheet</span> <span class="variable">sheet1</span> <span class="operator">=</span> excel.createSheet(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">    <span class="comment">// 在sheet页中创建行对象，rownum 编号从0开始,写入的位置是i+1行的位置</span></span><br><span class="line">    <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet1.createRow(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建单元格并且写入文件内容</span></span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新行,并写入内容</span></span><br><span class="line">    row = sheet1.createRow(<span class="number">2</span>);</span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;23&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建一个新行,并写入内容</span></span><br><span class="line">    row = sheet1.createRow(<span class="number">3</span>);</span><br><span class="line">    row.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    row.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;22&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入文件</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\test.xlsx&quot;</span>);</span><br><span class="line">    excel.write(outputStream);</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    outputStream.close();</span><br><span class="line">    excel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果表格如下<br>[<img src="https://picbed.xusir.fun/post_img/POI/创建Excel.png" alt="image.png">]</p><h2 id="通过POI读取Excel文件"><a href="#通过POI读取Excel文件" class="headerlink" title="通过POI读取Excel文件"></a>通过POI读取Excel文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过POI读取Excel文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read_test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test.xlsx&quot;</span>));</span><br><span class="line">    <span class="comment">// 读取磁盘上已经存在的Excel文件</span></span><br><span class="line">    <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br><span class="line">    <span class="comment">// 读取文件中第一个Sheet页</span></span><br><span class="line">    <span class="type">XSSFSheet</span> <span class="variable">sheet1</span> <span class="operator">=</span> excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 获取该页最后一行的行号(从0开始)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet1.getLastRowNum();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取并打印每一行的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取该页的第i行对象</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet1.getRow(i);</span><br><span class="line">        <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取该行的最后一个单元格编号(从0开始)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">lastCellNum</span> <span class="operator">=</span> row.getLastCellNum();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; lastCellNum; j++) &#123;</span><br><span class="line">                System.out.print(row.getCell(j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    in.close();</span><br><span class="line">    excel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">null姓名年龄</span><br><span class="line">null张三23</span><br><span class="line">null李四22</span><br></pre></td></tr></table></figure></p><h1 id="业务中的使用场景"><a href="#业务中的使用场景" class="headerlink" title="业务中的使用场景"></a>业务中的使用场景</h1><ol><li>业务场景<br>在实际开发中，POI可以用于各种场景，如预先准备好的Excel文件模板。<br>将我们业务中的数据按导出需求根据模板生成新的Excel文件<br>用户访问接口即可下载导出Excel文件。</li></ol><ol><li>预先准备好的Excel文件模板<ul><li>一般是存放在项目的资源目录下，如：resources/templates/模板文件.xlsx<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取模板文件：一般是放在项目下的：resources/templates/模板文件.xlsx</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/测试模板文件.xlsx&quot;</span>);</span><br></pre></td></tr></table></figure>文件模板内容如图<br>[<img src="https://picbed.xusir.fun/post_img/POI/测试模板文件.png" alt="image.png">]</li></ul></li></ol><ol><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getExcel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getExcel</span><span class="params">(HttpServletResponse response)</span>  &#123;</span><br><span class="line">        <span class="comment">//模拟从数据库获取的数据</span></span><br><span class="line">        List&lt;User&gt; list = List.of(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;1班&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="number">99.0</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;1班&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="number">99.0</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;1班&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="number">99.0</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;1班&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="number">99.0</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;孙七&quot;</span>,<span class="string">&quot;1班&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="number">99.0</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;周八&quot;</span>,<span class="string">&quot;1班&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="number">99.0</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取模板文件路径：一般是放在项目下的：resources/templates/模板文件.xlsx</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;template/测试模板文件.xlsx&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取模板文件,创建一个新的Excel文件</span></span><br><span class="line">            <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br><span class="line">            <span class="comment">// 获取第一个sheet页</span></span><br><span class="line">            <span class="type">XSSFSheet</span> <span class="variable">sheet1</span> <span class="operator">=</span> excel.getSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 填充数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//(第4行开始是填充的位置)</span></span><br><span class="line">                <span class="comment">// 获取第i+3+1行，并设置值</span></span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet1.getRow(i + <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span>(row == <span class="literal">null</span>) &#123;</span><br><span class="line">                    row = sheet1.createRow(i + <span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取第0列，并设置值</span></span><br><span class="line">                <span class="comment">// 获取或创建单元格并设置值</span></span><br><span class="line">                <span class="comment">// 设置单元格的值</span></span><br><span class="line">                setCellValue(row, <span class="number">0</span>, list.get(i).getName());</span><br><span class="line">                setCellValue(row, <span class="number">1</span>, list.get(i).getClassName());</span><br><span class="line">                setCellValue(row, <span class="number">2</span>, String.valueOf(list.get(i).getAge()));</span><br><span class="line">                setCellValue(row, <span class="number">3</span>, list.get(i).getSex());</span><br><span class="line">                setCellValue(row, <span class="number">4</span>, String.valueOf(list.get(i).getScore()));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过输出流将Excel文件下载到客户端浏览器</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            excel.write(out);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            out.close();</span><br><span class="line">            excel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装获取或创建单元格并设置值的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setCellValue</span><span class="params">(XSSFRow row, <span class="type">int</span> columnIndex, String value)</span> &#123;</span><br><span class="line">        <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (cell == <span class="literal">null</span>) &#123;</span><br><span class="line">            cell = row.createCell(columnIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        cell.setCellValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br> 访问接口：<a href="http://localhost:8080/getExcel">http://localhost:8080/getExcel</a><br> 测试结果如下：<br> [<img src="https://picbed.xusir.fun/post_img/POI/测试接口结果.png" alt="image.png">]</p></li></ol>]]></content>
    
    
    <summary type="html">ApachePOI 是一个开源的 Java 库，用于创建和操作 Microsoft Office 文件，如 Excel、Word 等。它提供了一组 API，允许开发人员创建、读取和修改 Office 文件，而无需依赖 Microsoft Office 应用程序。</summary>
    
    
    
    
    <category term="note" scheme="https://xusir.fun/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程</title>
    <link href="https://xusir.fun/posts/2502071603.html"/>
    <id>https://xusir.fun/posts/2502071603.html</id>
    <published>2025-02-07T16:03:22.000Z</published>
    <updated>2025-03-18T08:04:27.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Java网络编程实现用户上传文件"><a href="#使用Java网络编程实现用户上传文件" class="headerlink" title="使用Java网络编程实现用户上传文件"></a>使用Java网络编程实现用户上传文件</h1><ol><li><p>客户端Client:<br>用户上传本地文件到服务器端，服务器返回文件上传成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xnj.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端;上传文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建socket对象连接服务器,服务器ip地址和端口</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取本地文件并写入服务器</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\xnj\\Pictures\\保存的图片\\1594086267611.jpg&quot;</span>);</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>( ( len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往服务器发送结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收服务器的响应信息</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务端Server:<br>服务器端接收客户端上传的文件，并保存到服务器本地。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xnj.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端，保存客户端上传的文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 下面频繁创建线程会消耗服务器的性能，所以这里使用线程池</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">3</span>,<span class="comment">// 核心线程数</span></span><br><span class="line">                <span class="number">16</span>,<span class="comment">// 最大线程数</span></span><br><span class="line">                <span class="number">60</span>,<span class="comment">// 线程空闲时间</span></span><br><span class="line">                TimeUnit.SECONDS,<span class="comment">// 线程空闲时间单位</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">2</span>),<span class="comment">// 阻塞队列</span></span><br><span class="line">                Executors.defaultThreadFactory(),<span class="comment">// 线程工厂,让工厂如何创建线程对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="comment">// 拒绝策略</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象,监听10000端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环监听，即可多次上传</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待客户端连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span>  <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启一条线程</span></span><br><span class="line">            <span class="comment">// 一个用户对应一条线程</span></span><br><span class="line">            <span class="comment">// new MyRunnable(socket).start();</span></span><br><span class="line">            <span class="comment">// 使用线程池</span></span><br><span class="line">            pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>(socket));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程类MyRunnable:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xnj.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket socket ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyRunnable</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取数据并保存到本地文件中</span></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fileimage\\&quot;</span>+name+<span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>( ( len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送反馈信息</span></span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">            bw.write(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">Java网络编程复习，网络编程，多线程，线程池，IO流</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="Java" scheme="https://xusir.fun/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel</title>
    <link href="https://xusir.fun/posts/241124153134.html"/>
    <id>https://xusir.fun/posts/241124153134.html</id>
    <published>2024-11-24T15:31:34.000Z</published>
    <updated>2025-03-18T08:04:27.586Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://easyexcel.opensource.alibaba.com/">https://easyexcel.opensource.alibaba.com/</a></p>]]></content>
    
    
    <summary type="html">EasyExcel是一个基于Java的、快速、简洁、解决大文件内存溢出的Excel处理工具。</summary>
    
    
    
    
    <category term="java" scheme="https://xusir.fun/tags/java/"/>
    
    <category term="EasyExcel" scheme="https://xusir.fun/tags/EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>响应状态码</title>
    <link href="https://xusir.fun/posts/241111104921.html"/>
    <id>https://xusir.fun/posts/241111104921.html</id>
    <published>2024-11-11T10:49:21.000Z</published>
    <updated>2025-03-18T08:04:27.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、状态码大类"><a href="#一、状态码大类" class="headerlink" title="一、状态码大类"></a>一、状态码大类</h2><div class="table-container"><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table></div><h2 id="二、常见的响应状态码"><a href="#二、常见的响应状态码" class="headerlink" title="二、常见的响应状态码"></a>二、常见的响应状态码</h2><div class="table-container"><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>==200==</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>==404==</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td>指示用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code>Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>==500==</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr></tbody></table></div><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p>]]></content>
    
    
    <summary type="html">常见的状态码</summary>
    
    
    
    
    <category term="java" scheme="https://xusir.fun/tags/java/"/>
    
    <category term="EasyCaptcha" scheme="https://xusir.fun/tags/EasyCaptcha/"/>
    
  </entry>
  
  <entry>
    <title>登录实现</title>
    <link href="https://xusir.fun/posts/241108162733.html"/>
    <id>https://xusir.fun/posts/241108162733.html</id>
    <published>2024-11-08T16:27:33.000Z</published>
    <updated>2025-03-18T08:04:27.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在自学java的过程中，每次做项目都绕不开登录这个茬，虽然不难，且没啥技术含量，但登录的实现综合了许多知识，我认为实现一个完整可用的登录逻辑对于复习和巩固java基础基础十分合适，所以写下这篇笔记。</p><p>下面是文章使用的一些依赖以及版本信息</p><ul><li>数据库： mysql,mybatis</li><li>框架： springboot 3.0.5</li><li>数据库相关： mybatis,druid 1.2.22,mysql 8.0.33，redis </li><li>工具：lombok</li><li>验证码工具：EasyCaptcha</li></ul><h1 id="思路梳理"><a href="#思路梳理" class="headerlink" title="思路梳理"></a>思路梳理</h1><ol><li><strong>在注册接口中：</strong><ul><li>对前端传过来的<code>密码需要进行加密存储</code>,要验证<code>用户名的唯一性</code></li></ul></li><li><strong>验证码接口中：</strong><ul><li>指定一个验证码Vo类，包含字段<code>image</code>和<code>key</code>。</li><li>生成的图形<code>验证码的文本为code</code>，<code>生成一个唯一key(如UUID)</code>，然后以键值对形式存入<code>redis</code>中，并设置<code>过期时间</code>。</li><li>将<code>验证码toBase64()的值为image</code>,以及key封装对象传回前端。这样前端根据image显示的每个验证码图片都有唯一的key</li></ul></li><li><strong>登录接口中：</strong><ul><li>指定一个登录Vo类，字段包含用户的<code>username,password</code>,以及用户输入的验证码<code>code</code>,以验证码图片对应的<code>key</code></li><li>根据key从redis中查询并验证码文本，情况有：<code>用户未输入验证码</code>,<code>验证码已过期</code>,<code>验证码错误</code></li><li>验证账号，情况有：<code>用户未输入username</code>,<code>无该账号</code>,<code>密码错误</code></li><li>登录成功，生成<code>token</code>并返回</li></ul></li><li><strong>关于token:</strong><ul><li>创建一个工具类，用于<code>生成token</code>和<code>解析token</code></li><li>token中设置密钥,密钥不能过简单<code>SecretKey secretKey = Keys.hmacShaKeyFor(&quot;密钥&quot;.getBytes());</code></li><li>在token中<code>claim()</code>自定义字段中存入能标识当前登录用户的信息字段</li><li>解析token中,从返回结果中获取我们在body部分自定义的用户信息即可</li></ul></li><li><strong>异常处理:</strong><ul><li>可设置全局异常处理器<code>@RestControllerAdvice</code></li><li>可自定义异常来返回预期消息<code>public class MyAdviceException extends RuntimeException</code></li></ul></li><li><strong>拦截器</strong><ul><li>指定一个拦截器类实现<code>HandlerInterceptor</code>接口中的<code>preHandle</code>方法</li><li>在拦截器中获取token,解析token，执行拦截或放行</li><li>在MvcConfig类中注册自定义的拦截器</li></ul></li><li><strong>ThreadLocal</strong><ul><li>指定一个工具类，用于在Threadlocal中<code>存入</code>和<code>移除</code>在<code>token</code>中解析的自定义当前登录用户信息</li><li>在拦截器中成功解析token时存入</li><li>在执行完所有方法回到拦截器中执行<code>afterCompletion</code>时移除</li></ul></li></ol><h1 id="演示项目"><a href="#演示项目" class="headerlink" title="演示项目"></a>演示项目</h1><ol><li><p><strong>数据库创建</strong><br>这里只创建一个用于演示的用户表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> loginImplementation;</span><br><span class="line"></span><br><span class="line">use loginImplementation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">    id <span class="type">bigint</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键id&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">unique</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    phone <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">null</span> comment <span class="string">&#x27;电话号码&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>创建一个简单的maven项目，并继承<code>spring-boot-starter-parent</code>依赖，引入如下依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xnj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>AboutLoginImplementation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--EasyCaptcha依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.whvcse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--用于加密密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JWT登录认证相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>com.xnj</code>下创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置信息</strong><br>配置端口号，mysql数据库连接以及redis连接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.40.101:3306/loginImplementation?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;</span>   <span class="string">allowPublicKeyRetrieval=true&amp;serverTimezone=GMT%2b8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Xnj.123456</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建实体类</strong></p><ul><li>包名：<code>com.xnj.pojo</code></li><li><code>User</code>: 代表用户，包括id,username,password,name,phone。</li><li><code>CaptchaVo</code>:代表图形验证码，包括验证码的图片信息image和key。</li><li><code>LoginVo</code>:用于接收登录信息，包括username和password,以及验证码的key和用户填的值code。</li><li><code>LoginUser</code>:用于在ThreadLocal中存入的当前登录用户基础信息。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;图像验证码&quot;</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证码图片信息，这里并不指图片的url，而是图片本身</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证码key</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收登录信息</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginVo</span> &#123;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//验证码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">//验证码的key</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ThreadLocal中存入的当前登录用户信息</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Mapper接口</strong><br>演示项目中用于获取用户信息的相关接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有用户信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id查询用户信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名查找用户数</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(*) from tb_user where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">countByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存用户信息</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_user(username,password) values(#&#123;username&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名获取用户信息</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">selectByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>统一结果相应result</strong></p><ul><li>包路径：<code>com.xnj.result</code></li><li><code>Result</code>: 用于统一返回结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局统一返回结果类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">null</span>)</span><br><span class="line">            result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T body, ResultCodeEnum resultCodeEnum)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = build(body);</span><br><span class="line">        result.setCode(resultCodeEnum.getCode());</span><br><span class="line">        result.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(data, ResultCodeEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(<span class="literal">null</span>, ResultCodeEnum.FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = build(<span class="literal">null</span>);</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>ResultCodeEnum</code>:用于统一返回结果状态信息枚举类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回结果状态信息类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line">    USER_IS_EXIST_ERROR(<span class="number">301</span>,<span class="string">&quot;用户已存在&quot;</span>),</span><br><span class="line">    USER_NOT_EXIST_ERROR(<span class="number">301</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_LOGIN_CODE_EMPTY(<span class="number">503</span>,<span class="string">&quot;验证码为空&quot;</span>),</span><br><span class="line">    USER_CAPTCHA_CODE_EXPIRED(<span class="number">303</span>, <span class="string">&quot;验证码已过期&quot;</span>),</span><br><span class="line">    USER_LOGIN_CODE_ERROR(<span class="number">302</span>,<span class="string">&quot;验证码错误&quot;</span>),</span><br><span class="line">    USER_LOGIN_PASSWORD_ERROR(<span class="number">307</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_LOGIN_AUTH(<span class="number">600</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    TOKEN_EXPIRED(<span class="number">601</span>, <span class="string">&quot;token过期&quot;</span>),</span><br><span class="line">    TOKEN_INVALID(<span class="number">602</span>, <span class="string">&quot;token非法&quot;</span>),</span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    FAIL(<span class="number">500</span>,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    ResultCodeEnum(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>全局异常以及自定义异常</strong></p><ul><li>包路径：<code>com.xnj.exception</code></li><li><code>MyAdviceException</code>: 继承RuntimeException，自定义异常返回信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdviceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAdviceException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAdviceException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = resultCodeEnum.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>GlobalExceptionHandler</code>: 定义全局异常@RestControllerAdvice，在里面使用我们自定义的异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局异常处理类</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MyAdviceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerException</span><span class="params">(MyAdviceException e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>工具类</strong></p><ul><li>包路径：<code>com.xnj.utils</code></li><li><code>JWTUtil</code>:用于提供创建token，解析token的工具类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtil</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> Keys.hmacShaKeyFor(<span class="string">&quot;UG8A6u22CD0MivcGUvtl1IFkMDV2xJae&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long userId, String username)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+<span class="number">3600000</span>)) <span class="comment">//过期时间1小时</span></span><br><span class="line">                .setSubject(<span class="string">&quot;LOGIN_USER&quot;</span>)   <span class="comment">//主题</span></span><br><span class="line">                .claim(<span class="string">&quot;userId&quot;</span>,userId) <span class="comment">//用户id</span></span><br><span class="line">                .claim(<span class="string">&quot;userName&quot;</span>,username) <span class="comment">//用户名</span></span><br><span class="line">                .signWith(secretKey, SignatureAlgorithm.HS256)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(token==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 抛出异常，未登录</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_LOGIN_AUTH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析token</span></span><br><span class="line">            <span class="type">JwtParser</span> <span class="variable">jwtParser</span> <span class="operator">=</span> Jwts.parserBuilder()</span><br><span class="line">                    .setSigningKey(secretKey)</span><br><span class="line">                    .build();</span><br><span class="line">            Jws&lt;Claims&gt; claimsJws = jwtParser.parseClaimsJws(token);</span><br><span class="line">            <span class="keyword">return</span> claimsJws.getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.TOKEN_EXPIRED);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.TOKEN_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(createToken(<span class="number">1l</span>, <span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>LoginUserThreadLocal</code>:创建ThreadLocal对象，存储当前登录用户信息的工具类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUserThreadLocal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;LoginUser&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setLoginUser</span><span class="params">(LoginUser loginUser)</span> &#123;</span><br><span class="line">        threadLocal.set(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoginUser <span class="title function_">getLoginUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>拦截器</strong></p><ul><li>包路径：<code>com.xnj.interceptor</code><ul><li><code>LoginInterceptor</code>: 实现<code>HandlerInterceptor</code>来实现拦截功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 解析token</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JWTUtil.parseToken(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.没有抛异常说明解析成功</span></span><br><span class="line">        <span class="comment">//3.1将token中解析的用户信息存入LocalThread中</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> claims.get(<span class="string">&quot;userId&quot;</span>, Long.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> claims.get(<span class="string">&quot;userName&quot;</span>, String.class);</span><br><span class="line">        LoginUserThreadLocal.setLoginUser(<span class="keyword">new</span> <span class="title class_">LoginUser</span>(userId,userName));</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//4. 移除LocalThread中的用户信息</span></span><br><span class="line">        LoginUserThreadLocal.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>包路径：<code>com.xnj.config</code><ul><li><code>MvcConfig</code>: 实现<code>WebMvcConfigurer</code>注册拦截器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="built_in">this</span>.loginInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/service/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>controller接口</strong></p><ul><li>包路径：<code>com.xnj.controller</code></li><li><code>ServiceController</code>: 代表一般项目中除登录逻辑以外的功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* user/service/**用于代表user的各种服务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user/service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;User&gt;&gt; <span class="title function_">findAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; all = userMapper.getAll();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(all);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过id获取用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;id/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前登录用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;User&gt; <span class="title function_">findInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(LoginUserThreadLocal.getLoginUser().getUserId());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>LoginController</code>:代表登录相关逻辑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图形验证码</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;captcha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;CaptchaVo&gt; <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//设置图形验证码的参数：长，宽，验证码位数</span></span><br><span class="line">        <span class="type">SpecCaptcha</span> <span class="variable">specCaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpecCaptcha</span>(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成二进制验证码图片，并将其代表的验证码设置为小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> specCaptcha.text().toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置验证码在redis中的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;user:login:&quot;</span>+ UUID.randomUUID();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存入redis,并设置过期时间,3分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,code,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="type">CaptchaVo</span> <span class="variable">captchaVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CaptchaVo</span>(specCaptcha.toBase64(),key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(captchaVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="comment">//1.判断用户名是否已经存在</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span>userMapper.countByUsername(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_IS_EXIST_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.将密码加密</span></span><br><span class="line">        user.setPassword(md5Hex(user.getPassword()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.添加用户</span></span><br><span class="line">        userMapper.insert(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="meta">@PostMapping()</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginVo loginVo)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 判断前端传的验证码是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(loginVo.getCode()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//抛出异常，验证码为空</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_LOGIN_CODE_EMPTY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 从redis中获取验证码，并判断验证码是否过期</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(loginVo.getKey());</span><br><span class="line">        <span class="keyword">if</span>(code==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//抛出异常，验证码国企</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_CAPTCHA_CODE_EXPIRED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 验证验证码,判断验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span>(!loginVo.getCode().equals(code))&#123;</span><br><span class="line">            <span class="comment">//抛出异常，验证码错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_LOGIN_CODE_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断用户是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectByUsername(loginVo.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//抛出异常，用户不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_NOT_EXIST_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 判断密码是否正确</span></span><br><span class="line">        <span class="keyword">if</span>(!user.getPassword().equals(DigestUtils.md5Hex(loginVo.getPassword())))&#123;</span><br><span class="line">            <span class="comment">//抛出异常，密码错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_LOGIN_PASSWORD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 登陆成功生成token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtil.createToken(user.getId(), user.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="密码处理"><a href="#密码处理" class="headerlink" title="密码处理"></a>密码处理</h1><ol><li><p>形式：<br>用户的密码不会以<code>明文</code>的形式保存到数据库中,而是先经过处理，然后将处理之后的<code>密文</code>保存到数据库,这样能降低数据泄露导致的用户安全问题</p></li><li><p>处理：<br>密码通常会使用<code>单向函数</code>进行处理:</p><ul><li><font color=red>【前端】->【明文:123456】->【单向函数】->【密文:e10adc3949ba59abbe56e057f20f883e】->【数据库】</font></li></ul></li><li><p>依赖：<br>常用的处理密码的单向函数(算法)有<code>MD5</code>、<code>SHA-256</code>等，<strong>Apache Commons</strong>提供了一个工具类<code>DigestUtils</code>，其中就包含上述算法的实现。<br>引入maven依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基本用法</p><ul><li><strong>Base64编码和解码：</strong><ul><li>用途：将二进制数据编码为可打印的ASCII字符串，或将Base64编码的字符串解码回原始二进制数据。</li><li>适用场景：常用于在网络传输中传递二进制数据，或将二进制数据存储在文本文件中。</li></ul></li><li><strong>URL编码和解码：</strong><ul><li>用途：将字符串进行URL编码，以便在URL中传递参数或数据。URL编码将特殊字符转换为%xx格式，其中xx是字符的十六进制ASCII码。</li><li>适用场景：常用于构建URL参数、解析URL参数，以及在网络中传递URL编码的数据。</li></ul></li><li><strong>MD5哈希生成：</strong><ul><li>用途：通过对任意长度的数据进行哈希计算，生成固定长度（通常是128位）的哈希值。MD5哈希算法不可逆，相同的输入将始终生成相同的哈希值。</li><li>适用场景：常用于验证数据的完整性、存储密码的摘要，或用于简单的数据唯一性标识。</li></ul></li><li><strong>SHA哈希生成：</strong><ul><li>用途：通过对任意长度的数据进行哈希计算，生成固定长度（通常是160位或256位）的哈希值。SHA哈希算法是安全的，用于验证数据的完整性和加密。</li><li>适用场景：常用于数据完整性验证、数字签名、密码存储和加密等安全领域的应用。</li></ul></li></ul></li><li><p>使用实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCodecTest</span> &#123;</span><br><span class="line">    <span class="comment">//1. md哈希生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 原始文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalText</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 计算MD5哈希值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5Hash</span> <span class="operator">=</span> DigestUtils.md5Hex(originalText);</span><br><span class="line">        System.out.println(<span class="string">&quot;MD5 Hash: &quot;</span> + md5Hash);<span class="comment">//MD5 Hash: 65a8e27d8879283831b664bd8b7f0ad4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. SHA哈希生成</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 原始文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalText</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 计算sha哈希值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sha1Hash</span> <span class="operator">=</span> DigestUtils.sha1Hex(originalText);</span><br><span class="line">        System.out.println(<span class="string">&quot;SHA-1 Hash: &quot;</span> + sha1Hash);<span class="comment">//SHA-1 Hash: 0a0a9f2a6772942557ab5355d76af442f8f65e01</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. Base64编码和解码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 原始文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalText</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 计算SHA-256哈希值</span></span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = Base64.encodeBase64(originalText.getBytes());</span><br><span class="line">        <span class="comment">// 编码为字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encodedBytes);</span><br><span class="line">        System.out.println(<span class="string">&quot;Encoded Text: &quot;</span> + encodedText);<span class="comment">//Encoded Text: SGVsbG8sIFdvcmxkIQ==</span></span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        <span class="type">byte</span>[] decodedBytes = Base64.decodeBase64(encodedText.getBytes());</span><br><span class="line">        <span class="comment">// 解码为字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decodedText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(decodedBytes);</span><br><span class="line">        System.out.println(<span class="string">&quot;Decoded Text: &quot;</span> + decodedText);<span class="comment">//Decoded Text: Hello, World!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. URL编码和解码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> EncoderException, DecoderException &#123;</span><br><span class="line">        <span class="comment">// 原始文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalText</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 编码和解码</span></span><br><span class="line">        <span class="type">URLCodec</span> <span class="variable">urlCodec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLCodec</span>();</span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedText</span> <span class="operator">=</span> urlCodec.encode(originalText);</span><br><span class="line">        System.out.println(<span class="string">&quot;Encoded Text: &quot;</span> + encodedText);<span class="comment">//Encoded Text: Hello%2C+World%21</span></span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">decodedText</span> <span class="operator">=</span> urlCodec.decode(encodedText);</span><br><span class="line">        System.out.println(<span class="string">&quot;Decoded Text: &quot;</span> + decodedText);<span class="comment">//Decoded Text: Hello, World!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结：<br>这些方法在实际应用中经常被使用,根据具体的需求选择合适的方法进行编码和解码操作。请注意,MD5和SHA哈希算法虽然常用,但并不适合用于密码存储,因为它们容易受到暴力破解和碰撞攻击。对于密码存储,请使用专门设计的密码哈希函数（如bcrypt、scrypt或PBKDF2）。<br>上面的演示项目使用的MD5加密:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setPassword(DigestUtils.md5Hex(user.getPassword()));</span><br></pre></td></tr></table></figure></li></ol><h1 id="图形验证码处理"><a href="#图形验证码处理" class="headerlink" title="图形验证码处理"></a>图形验证码处理</h1><ol><li><p>说明<br>这里使用开源的验证码生成工具<strong>EasyCaptcha</strong>，其支持多种类型的验证码，例如gif、中文、算术等，并且简单易用，具体内容可参考其<a href="https://gitee.com/ele-admin/EasyCaptcha">官方文档</a>。<br>为了方便发送和验证图形验证码，以及完成验证码失效机制，往往利用redis的键值对的存储形式，创建一个类，包含<code>key</code>和<code>code</code>，并在存入redis中时设置<code>有效时间</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&quot;图像验证码&quot;</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证码图片信息，这里并不指图片的url，而是图片本身</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证码key</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--EasyCaptcha依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.whvcse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li>在创建<code>SpecCaptcha</code>对象时指定验证码图片的<code>长宽</code>和<code>验证码的位数</code></li><li><code>specCaptcha.setCharType();</code>来设置验证码的样式</li><li><code>specCaptcha.text();</code>获取验证码文本</li><li><code>specCaptcha.toBase64();</code>将生成的验证码图片转换为Base64字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaPtchaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成验证码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 创建SpecCaptcha实例，定义验证码图片：长，宽，验证码位数</span></span><br><span class="line">        <span class="type">SpecCaptcha</span> <span class="variable">specCaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpecCaptcha</span>(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置验证码样式参数 TYPE_DEFAULT=&gt;数字字母混合</span></span><br><span class="line">        specCaptcha.setCharType(SpecCaptcha.TYPE_DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取验证码文本，并将其代表的验证码设置为小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> specCaptcha.text().toLowerCase();</span><br><span class="line">        System.out.println(<span class="string">&quot;验证码文本: &quot;</span> + code);<span class="comment">//验证码文本: kdh7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将生成的验证码图片转换为Base64字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeImage</span> <span class="operator">=</span> specCaptcha.toBase64();</span><br><span class="line">        System.out.println(codeImage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="全局异常与自定义异常"><a href="#全局异常与自定义异常" class="headerlink" title="全局异常与自定义异常"></a>全局异常与自定义异常</h1><ol><li><p>说明<br>在登录逻辑中,无论是业务逻辑判断还是生成token和解析token时,出现错误信息时如,没有token,密码错误等，我们都可以自定义异常，再在全局异常中捕获来返回我们需要的异常信息</p></li><li><p>定义自定义异常</p><ul><li>指定一个类，继承需要的异常类如<code>RuntimeException</code></li><li>在该类中创建我们需要传给前端的信息如<code>code</code>,<code>message</code><ul><li>常见的状态码如下：<ul><li><code>200</code> : 请求成功</li><li><code>404</code> : 请求资源不存在</li><li><code>500</code> : 服务器错误  </li><li>更多信息：<a href="https://www.xusir.fun/posts/241111104921.html">响应状态码</a></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdviceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAdviceException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义全局异常处理器</p><ul><li>指定一个类，加上相应注解<code>@RestControllerAdvice</code>或<code>@ControllerAdvice</code></li><li>在该类下面定义方法，方法上加上对应注解<code>@ExceptionHandler()</code></li><li>更多信息：<a href="https://www.xusir.fun/posts/2410021719.html?highlight=sp">springboo3/springboo3整合Mvc/全局异常</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局异常处理类</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MyAdviceException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerException</span><span class="params">(MyAdviceException e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><ol><li><p>说明</p><ul><li>创建一个类实现<code>HandlerInterceptor</code>接口实现登录拦截功能</li><li>重写<code>preHandle</code>和<code>afterCompletion</code>方法</li><li>preHandle:在每次请求到来时,进行拦截，解析验证token的合法性<br>若需要，可将token中解析出的信息存入<code>ThreadLocal</code></li><li>afterCompletion: 结束所有请求后，销毁<code>ThreadLocal</code>中存储的信息</li></ul></li><li><p>实现</p><ul><li>定义拦截器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception         &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注册拦截器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;拦截的请求路径&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;排除的路径&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="Java-JWT"><a href="#Java-JWT" class="headerlink" title="Java-JWT"></a>Java-JWT</h1><ol><li><p>登录接口需要为登录成功的用户创建并返回JWT</p></li><li><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JWT登录认证相关--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>说明<br>创建一个JwtUtil工具类，里面提供创建token和解析token的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 密钥 密钥可以去搜索随机密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> Keys.hmacShaKeyFor(<span class="string">&quot;密钥&quot;</span>.getBytes());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Long userId, String username)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+<span class="number">3600000</span>)) <span class="comment">//过期时间1小时</span></span><br><span class="line">                .setSubject(<span class="string">&quot;LOGIN_USER&quot;</span>)   <span class="comment">//主题</span></span><br><span class="line">                .claim(<span class="string">&quot;userId&quot;</span>,userId) <span class="comment">//用户id</span></span><br><span class="line">                .claim(<span class="string">&quot;userName&quot;</span>,username) <span class="comment">//用户名</span></span><br><span class="line">                .signWith(secretKey, SignatureAlgorithm.HS256)</span><br><span class="line">                .compact();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解析token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(token==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 抛出异常，未登录</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.USER_LOGIN_AUTH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析token</span></span><br><span class="line">            <span class="type">JwtParser</span> <span class="variable">jwtParser</span> <span class="operator">=</span> Jwts.parserBuilder()</span><br><span class="line">                    .setSigningKey(secretKey)</span><br><span class="line">                    .build();</span><br><span class="line">            Jws&lt;Claims&gt; claimsJws = jwtParser.parseClaimsJws(token);</span><br><span class="line">            <span class="keyword">return</span> claimsJws.getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.TOKEN_EXPIRED);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(ResultCodeEnum.TOKEN_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(createToken(<span class="number">1l</span>, <span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><ul><li>在登录的接口中，当用户账号各校验工作后，返回token给前端<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登陆成功生成token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtil.createToken(user.getId(), user.getUsername());</span><br><span class="line"><span class="keyword">return</span> Result.ok(token);</span><br></pre></td></tr></table></figure></li><li>在拦截器中，需要对token进行解析<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"><span class="comment">//2. 解析token</span></span><br><span class="line"><span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JWTUtil.parseToken(token);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><ol><li><p>说明<br>ThreadLocal是Java中提供的线程本地存储机制，可以利用该机制将数据<font colr=red>缓存在某个线程内部</font>，该线程可以在任意时刻、任意方法中获取缓存的数据</p><ul><li>ThreadMap下存一个个实体<code>entry</code> <ul><li>entry：包含<code>key</code>和<code>value</code>部分<ul><li>key：存放threadlocal</li><li>value: 存放obbject   </li></ul></li></ul></li><li>实际就是操作<code>当前线程</code>上面的<code>ThreadLocalMap</code>,将threadLocal放在key上面，再将threadlocal存储的值放在map的value当中。</li><li>如果你在当前实体上使用了多个threadlocal，它会存储多个entry放在Map当中 </li><li>ThreadLocal只是用来操作当前线程的ThreadLocalMap的工具类。<ul><li><strong>set就是往ThreadLocalMap中存放，Map的key就是threadLoacl对象，value为需要缓存的值</strong></li></ul></li></ul></li><li><p>关于Threadlocal内存泄漏问题<br>在使用了ThreadLocal对象后，手动调用ThreadLocal的remove方法,手动清除Entry对象</p></li><li><p>使用场景<br>当一个共享变量是共享的，但是需要每个线程互不影响，相互隔离，就可以使用ThreadLocal</p></li><li><p>应用实例</p><ul><li>如我们上面的案例，我们需要往Thread中存储当前登录用户LoginUserVo对象，定义如下工具类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUserThreadLocal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;LoginUser&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setLoginUser</span><span class="params">(LoginUser loginUser)</span> &#123;</span><br><span class="line">        threadLocal.set(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoginUser <span class="title function_">getLoginUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>存：当我们在拦截器中验证token完成，即将放行时，将信息存入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 解析token</span></span><br><span class="line"><span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JWTUtil.parseToken(token);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.没有抛异常说明解析成功</span></span><br><span class="line"><span class="comment">//3.1将token中解析的用户信息存入LocalThread中</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> claims.get(<span class="string">&quot;userId&quot;</span>, Long.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> claims.get(<span class="string">&quot;userName&quot;</span>, String.class);</span><br><span class="line">LoginUserThreadLocal.setLoginUser(<span class="keyword">new</span> <span class="title class_">LoginUser</span>(userId,userName));</span><br><span class="line"><span class="comment">//3.2 放行</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li>取：查询当前登录用户信息时，从thread取出关键信息,再用该信息去查询用户详细信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(LoginUserThreadLocal.getLoginUser().getUserId());</span><br><span class="line">  ```  </span><br><span class="line">- 销毁：为防止内存泄漏，在使用完后需要销毁</span><br><span class="line">  ```java</span><br><span class="line">  LoginUserThreadLocal.clear();</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="短信验证码实现"><a href="#短信验证码实现" class="headerlink" title="短信验证码实现"></a>短信验证码实现</h1><ol><li><p>说明</p><ul><li>当用户在前端登录时，输入电话号码，点击发送验证码，即可获取短信验证码</li><li>这里使用阿里的短信发送服务</li></ul></li><li><p>开通阿里云短信服务</p><ul><li>在<a href="https://www.aliyun.com">阿里云官网</a>，注册阿里云账号，并按照指引，完成实名认证（不认证，无法购买服务）</li><li>找到<a href="https://www.aliyun.com/product/sms">短信服务</a>，选择<strong>免费开通</strong></li><li>进入<a href="https://dysms.console.aliyun.com/overview">短信服务控制台</a>，选择<strong>快速学习和测试</strong></li><li>找到<strong>发送测试</strong>下的<strong>API发送测试</strong>，绑定测试用的手机号（只有绑定的手机号码才能收到测试短信），然后配置短信签名和短信模版，这里选择<strong>[专用]测试签名/模版</strong>。</li><li><strong>创建AccessKey</strong><br>云账号AccessKey是访问阿里云API的密钥,没有AccessKey无法调用短信服务。<br>在阿里云首页点击右上角头像，<strong>选择AccessKey</strong>，然后<strong>创建Accesskey</strong><br><strong>AccessSecretKey只会在创建时显示一次，需及时保存记住</strong></li></ul></li><li><p>实现流程</p><ul><li>引入如下依赖，具体可参考<a href="https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?spm=a2c4g.215759.0.0.43e6807dDRAZVz&amp;version=2017-05-25&amp;language=java-tea&amp;tab=primer-doc#doc-summary">官方文档</a>。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dysmsapi20170525<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置环境<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短信验证码配置</span></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">sms:</span></span><br><span class="line">    <span class="attr">access-key-id:</span> </span><br><span class="line">    <span class="attr">access-key-secret:</span> </span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">dysmsapi.aliyuncs.com</span></span><br></pre></td></tr></table></figure></li><li>创建一个属性类用于获取配置属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xnj.sms;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.sms&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunSMSProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建一个配置类，用于获取Client对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xnj.sms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.dysmsapi20170525.Client;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.teaopenapi.models.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AliyunSMSProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;aliyun.sms.endpoint&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunSmsConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliyunSMSProperties properties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Client <span class="title function_">createClient</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="comment">// 创建Client对象</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="comment">// 配置AccessKeyId和AccessKeySecret</span></span><br><span class="line">        config.setAccessKeyId(properties.getAccessKeyId());</span><br><span class="line">        config.setAccessKeySecret(properties.getAccessKeySecret());</span><br><span class="line">        <span class="comment">// 配置Endpoint</span></span><br><span class="line">        config.setEndpoint(properties.getEndpoint());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化Client对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Client</span>(config);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color=red>一定要注意别引错包了，不确定可以看官网，写得很清楚</font></li><li>写一个工具类，用于生成我们想要的验证码格式，下面的仅作示例参考<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRandomCode</span><span class="params">(Integer length)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            builder.append(number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试发送<br><strong>注意，因为为测试使用，所以电话号码只能填你在阿里云里填的测试电话号码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneCodeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Client client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> CodeUtil.getRandomCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//创建一个发送短信的请求对象</span></span><br><span class="line">        <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">        <span class="comment">//短信接收号码</span></span><br><span class="line">        request.setPhoneNumbers(phone);</span><br><span class="line">        <span class="comment">//短信签名</span></span><br><span class="line">        request.setSignName(<span class="string">&quot;阿里云短信测试&quot;</span>);</span><br><span class="line">        <span class="comment">//短信模板code</span></span><br><span class="line">        request.setTemplateCode(<span class="string">&quot;SMS_154950909&quot;</span>);</span><br><span class="line">        <span class="comment">// 短信模板变量 参数必需以json字符串的形式</span></span><br><span class="line">        request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span> + code + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        client.sendSms(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>业务中实现</p><ol><li>引入依赖，参考上面3.实现流程</li><li>配置文件中创建属性(access-key-id,access-key-secret,endpoint)，参考上面3.实现流程</li><li>创建配置属性类和配置类，以及生成验证码的工具类，参考上面3实现流程</li><li>创建发送短信服务接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendCode</span><span class="params">(String phone,String code)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CodeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Client client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCode</span><span class="params">(String phone, String code)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送验证码</span></span><br><span class="line">        <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">        <span class="comment">//短信接收号码</span></span><br><span class="line">        request.setPhoneNumbers(phone);</span><br><span class="line">        <span class="comment">//短信签名</span></span><br><span class="line">        request.setSignName(<span class="string">&quot;阿里云短信测试&quot;</span>);</span><br><span class="line">        <span class="comment">//短信模板code</span></span><br><span class="line">        request.setTemplateCode(<span class="string">&quot;SMS_154950909&quot;</span>);</span><br><span class="line">        <span class="comment">// 短信模板变量 参数必需以json字符串的形式</span></span><br><span class="line">        request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span> + code + <span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.sendSms(request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>引入redis依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在LoginService中实现具体发送验证码登录逻辑<ul><li>前端传入用户输入的手机号，点击发送验证码后</li><li>我们生成验证码和验证码的key(key能标识当前用户手机号)</li><li>判断redis中是否已经存在该用户请求发送的验证码<ul><li>存在，获取旧验证码的有效时间</li><li>用我们预先设置的验证码有效时间 减去 旧验证码的剩余有效时间 满足我们设置的最低间隔时间</li><li>满足，发送新验证码；不满足，返回请求频繁信息，终止这次发送</li></ul></li><li>发送新验证码，将新验证码以及key存入redis中，用于后续校验<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sentCode</span><span class="params">(String phone)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeService codeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送验证码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sentCode</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> CodeUtil.getRandomCode(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//验证码key</span></span><br><span class="line">        String key=<span class="string">&quot;user:code&quot;</span>+phone;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//防刷</span></span><br><span class="line">        <span class="comment">//或redis中查找该key是否存在</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">haskey</span> <span class="operator">=</span> redisTemplate.hasKey(key);</span><br><span class="line">        <span class="comment">//如果存在，说明该手机号在5分钟内已发送过验证码</span></span><br><span class="line">        <span class="keyword">if</span>(haskey)&#123;</span><br><span class="line">            <span class="comment">//获取旧验证码的剩余有效时间</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">            <span class="comment">//如果该用户的间隔时间小于1分钟</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">60</span>*<span class="number">5</span>- ttl &lt; <span class="number">60</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyAdviceException</span>(<span class="number">403</span>,<span class="string">&quot;验证码发送过于频繁，请稍后再试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送验证码</span></span><br><span class="line">        codeService.sendCode(phone,code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存验证码到redis,并设置有效时间5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(key,code,<span class="number">60</span>*<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sentCode</span><span class="params">(<span class="meta">@RequestParam</span>  String phone)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    loginService.sentCode(phone);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol>]]></content>
    
    
    <summary type="html">关于java项目中登录相关逻辑实现</summary>
    
    
    
    
    <category term="java" scheme="https://xusir.fun/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>EasyCaptcha</title>
    <link href="https://xusir.fun/posts/2411052130.html"/>
    <id>https://xusir.fun/posts/2411052130.html</id>
    <published>2024-11-05T21:30:43.000Z</published>
    <updated>2025-03-18T08:04:27.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EasyCaptcha介绍"><a href="#EasyCaptcha介绍" class="headerlink" title="EasyCaptcha介绍"></a>EasyCaptcha介绍</h1><p><strong>EasyCaptcha</strong>是一款开源的验证码生成工具其支持多种类型的验证码<br>例如gif、中文、算术等，并且简单易用<br>本文只简单介绍其在java前后端分离项目的应用<br>更多内容请参考官方文档：具体内容可参考其<a href="https://gitee.com/ele-admin/EasyCaptcha">官方文档</a>。</p><h1 id="前后端项目使用EasyCaptcha"><a href="#前后端项目使用EasyCaptcha" class="headerlink" title="前后端项目使用EasyCaptcha"></a>前后端项目使用EasyCaptcha</h1><ol><li><p><strong>引入依赖</strong><br>官方建议与<code>redis</code>一起使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--EasyCaptcha依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.whvcse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-captcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>redis配置</strong><br>配置连接redis信息，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">&lt;hostname&gt;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&lt;password&gt;</span></span><br><span class="line">      <span class="attr">port:</span> <span class="string">&lt;port&gt;</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="生成图片验证码"><a href="#生成图片验证码" class="headerlink" title="生成图片验证码"></a>生成图片验证码</h1><ol><li><p><strong>项目场景</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&quot;图像验证码&quot;</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证码图片信息，这里并不指图片的url，而是图片本身</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证码key</span></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图形验证码</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;captcha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;CaptchaVo&gt; <span class="title function_">getCaptcha</span><span class="params">()</span> &#123;</span><br><span class="line">        CaptchaVo result=loginService.getCaptcha();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>逻辑实现</strong><br>设置图形验证码的参数：长，宽，验证码位数<br>生成验证码<br>设置验证码的key<br>将验证码存入redis，设置过期时间<br>向前端返回验证码图片信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//service接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    CaptchaVo <span class="title function_">getCaptcha</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//service接口实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CaptchaVo <span class="title function_">getCaptcha</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置图形验证码的参数：长，宽，验证码位数</span></span><br><span class="line">        <span class="type">SpecCaptcha</span> <span class="variable">specCaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpecCaptcha</span>(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成二进制验证码图片，并将其代表的验证码转换为小写</span></span><br><span class="line">        String code= specCaptcha.text().toLowerCase();</span><br><span class="line">        <span class="comment">//设置验证码的key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;admin:login:&quot;</span> +UUID.randomUUID();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存入redis，设置过期时间为1分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key,code,<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回验证码图片信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CaptchaVo</span>(specCaptcha.toBase64(),key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>知识点：</strong></p><ul><li><code>base64</code>能将任意<code>二进制</code>的内容编码成一个字符串</li><li><code>specCaptcha.toBase64()</code>会将生成的二进制验证码图片编码为字符串</li><li>前端只需要在图片标签<code>&lt;img src=&quot;&quot;&gt;</code>，src中填入生成的值即可看到验证码图片</li></ul></li></ol><h1 id="校验验证码"><a href="#校验验证码" class="headerlink" title="校验验证码"></a>校验验证码</h1><ol><li><strong>项目场景</strong><br>controller <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//登录信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* @Schema(description=&quot;用户名&quot;)</span></span><br><span class="line"><span class="comment">    private String username;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Schema(description=&quot;密码&quot;)</span></span><br><span class="line"><span class="comment">    private String password; */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description=&quot;验证码key&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String captchaKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description=&quot;验证码code&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String captchaCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginVo loginVo)</span> &#123;</span><br><span class="line">        String token=loginService.login(loginVo);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><strong>验证功能实现</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//service接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">login</span><span class="params">(LoginVo loginVo)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//service接口实现类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(LoginVo loginVo)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 判断前端所传验证码是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(loginVo.getCaptchaCode()==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//return &quot;请输入验证码&quot;;</span></span><br><span class="line">        <span class="comment">//抛出异常：验证码为空</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginExeception</span>(<span class="string">&quot;验证码为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 从redis中获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(loginVo.getCaptchaKey());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 判断验证码是否过期</span></span><br><span class="line">    <span class="keyword">if</span>(code==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//return &quot;验证码已过期&quot;;</span></span><br><span class="line">        <span class="comment">//抛出异常：验证码已过期</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginExeception</span>(<span class="string">&quot;验证码已过期&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 判断验证码是否正确</span></span><br><span class="line">    <span class="comment">//忽略大小写逻辑：前面的逻辑中将验证码转换为小写，所以这里也需要将用户输入的验证码转换为小写</span></span><br><span class="line">    <span class="keyword">if</span>(!code.equals(loginVo.getCaptchaCode().toLowerCase()))&#123;</span><br><span class="line">        <span class="comment">//return &quot;验证码错误&quot;;</span></span><br><span class="line">        <span class="comment">//抛出异常：验证码错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LoginExeception</span>(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 验证码正确，执行其他登录验证逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">一款开源的验证码生成工具</summary>
    
    
    
    
    <category term="java" scheme="https://xusir.fun/tags/java/"/>
    
    <category term="EasyCaptcha" scheme="https://xusir.fun/tags/EasyCaptcha/"/>
    
  </entry>
  
  <entry>
    <title>MinIO</title>
    <link href="https://xusir.fun/posts/2410251004.html"/>
    <id>https://xusir.fun/posts/2410251004.html</id>
    <published>2024-10-25T10:04:48.000Z</published>
    <updated>2025-03-18T08:04:27.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在虚拟机中部署MinIO"><a href="#在虚拟机中部署MinIO" class="headerlink" title="在虚拟机中部署MinIO"></a>在虚拟机中部署MinIO</h1><blockquote><p>以下的环境为CentOS7！！！</p></blockquote><ol><li><p><strong>获取MinIO安装包</strong></p><p>下载地址如下：<a href="https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20230809233022.0.0.x86_64.rpm">https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20230809233022.0.0.x86_64.rpm</a> ，通过以下命令可直接将安装包下载至服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20230809233022.0.0.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>安装MinIO</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh minio-20230809233022.0.0.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p><strong>集成Systemd</strong></p><ul><li><p><strong>Systemd概述</strong></p><p><code>Systemd</code>是一个广泛应用于Linux系统的系统初始化和服务管理器，其可以管理系统中的各种服务和进程，包括启动、停止和重启服务，除此之外，其还可以监测各服务的运行状态，并在服务异常退出时，自动拉起服务，以保证服务的稳定性。系统自带的防火墙服务<code>firewalld</code>，我们自己安装的<code>mysqld</code>和<code>redis</code>均是由<code>Systemd</code>进行管理的，此处将MinIO服务也交给Systemd管理。</p></li><li><p><strong>编写MinIO服务配置文件</strong></p><p>Systemd所管理的服务需要由一个配置文件进行描述，这些配置文件均位于<code>/etc/systemd/system/</code>或者<code>/usr/lib/systemd/system/</code>目录下，下面创建MinIO服务的配置文件。</p><p>执行以下命令创建并打开<code>minio.service</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/minio.service</span><br></pre></td></tr></table></figure><p>内容如下，具体可参考MinIO<a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html#create-the-systemd-service-file">官方文档</a>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MinIO</span><br><span class="line"><span class="attr">Documentation</span>=https://min.io/docs/minio/linux/index.html</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">AssertFileIsExecutable</span>=/usr/local/bin/minio</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/usr/local</span><br><span class="line"><span class="attr">ProtectProc</span>=invisible</span><br><span class="line"><span class="attr">EnvironmentFile</span>=-/etc/default/minio</span><br><span class="line"><span class="attr">ExecStartPre</span>=/bin/bash -c <span class="string">&quot;if [ -z \&quot;$&#123;MINIO_VOLUMES&#125;\&quot; ]; then echo \&quot;Variable MINIO_VOLUMES not set in /etc/default/minio\&quot;; exit 1; fi&quot;</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/minio server <span class="variable">$MINIO_OPTS</span> <span class="variable">$MINIO_VOLUMES</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"><span class="attr">TasksMax</span>=infinity</span><br><span class="line"><span class="attr">TimeoutStopSec</span>=infinity</span><br><span class="line"><span class="attr">SendSIGKILL</span>=<span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>重点关注上述文件中的以下内容即可</p><ul><li><code>EnvironmentFile</code>，该文件中可配置MinIO服务所需的各项参数</li><li><code>ExecStart</code>，该参数用于配置MinIO服务的启动命令，其中<code>$MINIO_OPTS</code>、<code>$MINIO_VOLUMES</code>，均引用于<code>EnvironmentFile</code>中的变量。<ul><li><code>MINIO_OPTS</code>用于配置MinIO服务的启动选项，可省略不配置。</li><li><code>MINIO_VOLUMES</code>用于配置MinIO服务的数据存储路径。</li></ul></li><li><code>Restart</code>，表示自动重启</li></ul></li><li><p><strong>编写<code>EnvironmentFile</code>文件</strong></p><p>执行以下命令创建并打开<code>/etc/default/minio</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/minio</span><br></pre></td></tr></table></figure><p>内容如下，具体可参考<a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html#create-the-environment-variable-file">官方文档</a>。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MINIO_ROOT_USER</span>=minioadmin</span><br><span class="line"><span class="attr">MINIO_ROOT_PASSWORD</span>=minioadmin</span><br><span class="line"><span class="attr">MINIO_VOLUMES</span>=/data</span><br><span class="line"><span class="attr">MINIO_OPTS</span>=<span class="string">&quot;--console-address :9001&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p><code>MINIO_ROOT_USER</code>和<code>MINIO_ROOT_PASSWORD</code>为用于访问MinIO的用户名和密码，<strong>密码长度至少8位</strong>。</p></li><li><p><code>MINIO_VOLUMES</code>用于指定数据存储路径，需确保指定的路径是存在的，可执行以下命令创建该路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data</span><br></pre></td></tr></table></figure></li><li><p><code>MINIO_OPTS</code>中的<code>console-address</code>,用于指定管理页面的地址。</p></li></ul></li></ul></li><li><p><strong>启动MinIO</strong></p><p>执行以下命令启动MinIO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start minio</span><br></pre></td></tr></table></figure><p>执行以下命令查询运行状态<br>运行结果信息中，Consloe:<a href="http://xxx.xxx.xxx.xxx:xxx">http://xxx.xxx.xxx.xxx:xxx</a> 就是访问地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status minio</span><br></pre></td></tr></table></figure><p>设置MinIO开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> minio</span><br></pre></td></tr></table></figure></li><li><p><strong>访问MinIO管理页面</strong></p><p>管理页面的访问地址为：<code>http://192.168.10.101:9001</code> </p><p><strong>注意</strong>：</p><p><code>ip</code>需要根据你的虚拟机实际情况做出修改,如果按前面的步骤配置的，则端口固定为<code>9001</code></p></li></ol><h1 id="MinIO快速入门"><a href="#MinIO快速入门" class="headerlink" title="MinIO快速入门"></a>MinIO快速入门</h1><h2 id="MinIO核心概念"><a href="#MinIO核心概念" class="headerlink" title="MinIO核心概念"></a>MinIO核心概念</h2><p>下面介绍MinIO中的几个核心概念，这些概念在所有的对象存储服务中也都是通用的。</p><ul><li><p><strong>对象（Object）</strong> </p><p>对象是实际的数据单元，例如我们上传的一个图片。</p></li><li><p><strong>存储桶（Bucket）</strong></p><p>存储桶是用于组织对象的命名空间，类似于文件夹。每个存储桶可以包含多个对象。</p></li><li><p><strong>端点（Endpoint）</strong> </p><p>端点是MinIO服务器的网络地址，用于访问存储桶和对象，例如<code>http://192.168.40.101:9000</code></p><p><strong>注意：</strong></p><p><code>9000</code>为MinIO的API的默认端口，前边配置的<code>9001</code>以为管理页面端口。</p></li><li><p><strong>Access Key 和 Secret Key</strong></p><p><strong>Access Key</strong>是用于标识和验证访问者身份的唯一标识符，相当于用户名。</p><p><strong>Secret Key</strong>是与<strong>Access Key</strong>关联的密码，用于验证访问者的身份。</p></li></ul><h2 id="MinIO管理页面操作"><a href="#MinIO管理页面操作" class="headerlink" title="MinIO管理页面操作"></a>MinIO管理页面操作</h2><ol><li><p><strong>登录</strong></p><p>管理页面的地址为 <a href="http://192.168.40.101:9001">http://192.168.40.101:9001</a> ，登录的用户名和密码为部署时在<code>EnvironmentFile</code>文件中配置的如下参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MINIO_ROOT_USER</span>=minioadmin</span><br><span class="line"><span class="attr">MINIO_ROOT_PASSWORD</span>=minioadmin</span><br></pre></td></tr></table></figure></li><li><p><strong>创建存储桶</strong><br>点击左侧菜单Buckets,再点击右侧CreateBucket<br><img src="https://picbed.xusir.fun/post_img/minIO/MinIO入门-创建桶.png" alt=""></p></li><li><p><strong>上传图片</strong></p><ul><li>找到目标桶<br>点击左侧菜单的<code>ObjectBrowser</code>,在界面中找到<code>并点击目标桶</code></li><li>上传图片<br>点击右上角<code>Upload</code>,可以选择上传文件或目录<br><img src="https://picbed.xusir.fun/post_img/minIO/MinIO入门-上传图片.png" alt=""></li></ul></li><li><p><strong>访问图片</strong></p><ul><li><strong>图片URL</strong><br>由于MinIO提供了HTTP访问功能，所以可以通过浏览器直接访问对象。对象URL为MinIO的<code>Endpoint</code>+<code>对象的存储路径</code>，例如下图中的图片对象的URL为 http:192.168.40.101:9000/test/backmom.png<br><img src="https://picbed.xusir.fun/post_img/minIO/MinIO入门-存储路径.png" alt="">。 </li><li><strong>访问权限</strong><br>不出意外的话，使用浏览器访问上述URL，会得到如下响应，很显然是没有访问权限。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Error</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Code</span>&gt;</span>AccessDenied<span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Message</span>&gt;</span>Access Denied.<span class="tag">&lt;/<span class="name">Message</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Key</span>&gt;</span>backmom.png<span class="tag">&lt;/<span class="name">Key</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">BucketName</span>&gt;</span>test<span class="tag">&lt;/<span class="name">BucketName</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Resource</span>&gt;</span>/test/backmom.png<span class="tag">&lt;/<span class="name">Resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">RequestId</span>&gt;</span>177BC92022FC5684<span class="tag">&lt;/<span class="name">RequestId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HostId</span>&gt;</span>dd9025bab4ad464b049177c95eb6ebf374d3b3fd1af9251148b658df7ac2e3e8<span class="tag">&lt;/<span class="name">HostId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Error</span>&gt;</span></span><br></pre></td></tr></table></figure>若想继续访问图片，需要修改图片<strong>所在桶</strong>的访问权限，如下图所示<br><img src="https://picbed.xusir.fun/post_img/minIO/MinIO入门-访问权限.png" alt=""><br>如上图所示，可选的访问权限共有三个选项，分别是<code>Private</code>、<code>Public</code>和<code>Custom</code>，具体说明如下<ul><li><code>Private</code><br>只允许桶的所有者对该桶进行读写。</li><li><code>Public</code><br>允许所有人对该桶进行读写。</li><li><code>Custom</code><br>自定义访问权限。<br>若想将权限设置为只允许所有者写，但允许所有人读，就需要自定义访问权限。自定义访问权限，需要使用一个规定格式的JSON字符串进行描述，具体格式可参考<a href="https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#policy-document-structure">官方文档</a>。<br>例如以下JSON字符串表达的含义是：允许(<code>Allow</code>)所有人(<code>*</code>)读取(<code>s3:GetObject</code>)指定桶(<code>test</code>)的所有内容。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Statement&quot;</span> : [ &#123;</span><br><span class="line">    <span class="string">&quot;Action&quot;</span> : <span class="string">&quot;s3:GetObject&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Effect&quot;</span> : <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Principal&quot;</span> : <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Resource&quot;</span> : <span class="string">&quot;arn:aws:s3:::test/*&quot;</span></span><br><span class="line">  &#125; ],</span><br><span class="line">  <span class="string">&quot;Version&quot;</span> : <span class="string">&quot;2012-10-17&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>将<code>test</code>桶访问权限设置为<code>Custom</code>，并添加上述内容<br>重新访问 http:192.168.40.101:9000/test/backmom.png ，观察是否正常。</li></ul></li></ul></li></ol><h2 id="MinIO-Java-SDK"><a href="#MinIO-Java-SDK" class="headerlink" title="MinIO Java SDK"></a>MinIO Java SDK</h2><p>MinIO提供了多种语言的SDK供开发者使用，本项目需要用到Java SDK，下面通过一个简单案例熟悉一下其基本用法，具体内容可参考<a href="https://www.minio.org.cn/docs/minio/linux/developers/java/minio-java.html#">官方文档</a>。</p><ol><li><strong>创建一个maven项目</strong></li><li><strong>引入如下依赖</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写如下内容<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOQuickstart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//minio节点</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;http://192.168.40.101:9000&quot;</span>;</span><br><span class="line">        <span class="comment">// 访问密钥</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKey</span> <span class="operator">=</span> <span class="string">&quot;minioadmin&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;minioadmin&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 桶名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;helllo-minio&quot;</span>;</span><br><span class="line">        <span class="comment">// 初始化minio客户端,endpoint是节点，credentials参数为accessKey，secretKey</span></span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">client</span> <span class="operator">=</span> MinioClient.builder()</span><br><span class="line">                     .endpoint(endpoint)</span><br><span class="line">                     .credentials(accessKey, secretKey)</span><br><span class="line">                     .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.bucketExists(BucketExistsArgs.builder()</span><br><span class="line">                                     .bucket(bucketName).build());</span><br><span class="line">            <span class="comment">//判断桶是否已经存在</span></span><br><span class="line">            <span class="keyword">if</span>(!exists)&#123;</span><br><span class="line">                <span class="comment">//创建桶, 这里的bucketName是桶名称</span></span><br><span class="line">                client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 桶策略(访问权限)</span></span><br><span class="line">                String policy= <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                          &quot;Statement&quot; : [ &#123;</span></span><br><span class="line"><span class="string">                            &quot;Action&quot; : &quot;s3:GetObject&quot;,</span></span><br><span class="line"><span class="string">                            &quot;Effect&quot; : &quot;Allow&quot;,</span></span><br><span class="line"><span class="string">                            &quot;Principal&quot; : &quot;*&quot;,</span></span><br><span class="line"><span class="string">                            &quot;Resource&quot; : &quot;arn:aws:s3:::%s/*&quot;</span></span><br><span class="line"><span class="string">                          &#125; ],</span></span><br><span class="line"><span class="string">                          &quot;Version&quot; : &quot;2012-10-17&quot;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>.formatted(bucketName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置桶策略, 这里的bucketName是桶名称, 这里的policy是桶策略</span></span><br><span class="line">                client.setBucketPolicy(SetBucketPolicyArgs.builder()</span><br><span class="line">                                   .bucket(bucketName).config(policy).build());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上传文件 filename是文件路径, bucketName是桶名称, objectName是对象(在桶中文件的)名称</span></span><br><span class="line">            client.uploadObject(UploadObjectArgs.builder().</span><br><span class="line">                    filename(<span class="string">&quot;C:\\Users\\xnj\\Pictures\\保存的图片\\loong.jpg&quot;</span>)</span><br><span class="line">                    .bucket(bucketName).object(<span class="string">&quot;long.jpg&quot;</span>).build());</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>运行测试</strong><br>运行上述代码，然后查看MinIO管理页面，观察是否上传成功。</li></ol><h1 id="第三方工具推件：X-File-Storage"><a href="#第三方工具推件：X-File-Storage" class="headerlink" title="第三方工具推件：X-File-Storage"></a>第三方工具推件：X-File-Storage</h1><ol><li><p>介绍<br>一行代码将文件存储到本地、FTP、SFTP、WebDAV、阿里云 OSS、华为云 OBS、七牛云 Kodo、腾讯云 COS、百度云 BOS、又拍云 USS、MinIO、 Amazon S3、GoogleCloud Storage、FastDFS、 Azure Blob Storage、Cloudflare R2、金山云 KS3、美团云 MSS、京东云 OSS、天翼云 OOS、移动 云EOS、沃云 OSS、 网易数帆 NOS、Ucloud US3、青云 QingStor、平安云 OBS、首云 OSS、IBM COS、其它兼容 S3 协议的存储平台。</p></li><li><p>官网：<br>中文官网：<code>https://x-file-storage.xuyanwu.cn/#/</code><br>下面的<strong>快速入门-以上面minio为例，更多参考官网</strong></p></li><li><p>引入依赖，默认为<code>springboot</code>环境</p><ul><li>引入<code>x-file-storage-spring</code>的maven依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dromara.x-file-storage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>x-file-storage-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引入对应平台依赖，没有则不引，这里为minio<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置文件<br>以下方配置文件为例,注意补充密钥等参数<br>上传文件一个test.png的图片<br>最终路径为：<a href="http://192.168.40.101:9000/dkd-oss/dkd-images/test.png">http://192.168.40.101:9000/dkd-oss/dkd-images/test.png</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件上传</span></span><br><span class="line"><span class="attr">dromara:</span></span><br><span class="line">  <span class="attr">x-file-storage:</span> <span class="comment">#文件存储配置</span></span><br><span class="line">    <span class="attr">default-platform:</span> <span class="string">minio-1</span> <span class="comment">#默认使用的存储平台</span></span><br><span class="line">    <span class="attr">thumbnail-suffix:</span> <span class="string">&quot;.min.jpg&quot;</span> <span class="comment">#缩略图后缀，例如【.min.jpg】【.png】</span></span><br><span class="line">    <span class="attr">minio:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">minio-1</span> <span class="comment"># 存储平台标识</span></span><br><span class="line">        <span class="attr">enable-storage:</span> <span class="literal">true</span>  <span class="comment"># 启用存储</span></span><br><span class="line">        <span class="attr">access-key:</span> </span><br><span class="line">        <span class="attr">secret-key:</span> </span><br><span class="line">        <span class="attr">end-point:</span> <span class="string">http://192.168.40.101:9000</span></span><br><span class="line">        <span class="attr">bucket-name:</span> <span class="string">dkd-oss</span></span><br><span class="line">        <span class="attr">domain:</span> <span class="string">http://192.168.40.101:9000/dkd-oss/</span> <span class="comment"># 访问域名，注意“/”结尾，例如：http://   minio.abc.com/abc/</span></span><br><span class="line">        <span class="attr">base-path:</span> <span class="string">dkd-images/</span> <span class="comment"># 基础路径</span></span><br></pre></td></tr></table></figure></li><li><p>编码</p><ul><li>在启动类上加上<code>@EnableFileStorage</code>注解</li></ul></li><li><p>上传文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDetailController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;<span class="comment">//注入实列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> FileInfo <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileStorageService.of(file).upload();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件，成功返回文件 url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload2</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">FileInfo</span> <span class="variable">fileInfo</span> <span class="operator">=</span> fileStorageService.of(file)</span><br><span class="line">                .setPath(<span class="string">&quot;upload/&quot;</span>) <span class="comment">//保存到相对路径下，为了方便管理，不需要可以不写</span></span><br><span class="line">                .setSaveFilename(<span class="string">&quot;image.jpg&quot;</span>) <span class="comment">//设置保存的文件名，不需要可以不写，会随机生成</span></span><br><span class="line">                .setObjectId(<span class="string">&quot;0&quot;</span>)   <span class="comment">//关联对象id，为了方便管理，不需要可以不写</span></span><br><span class="line">                .setObjectType(<span class="string">&quot;0&quot;</span>) <span class="comment">//关联对象类型，为了方便管理，不需要可以不写</span></span><br><span class="line">                .putAttr(<span class="string">&quot;role&quot;</span>,<span class="string">&quot;admin&quot;</span>) <span class="comment">//保存一些属性，可以在切面、保存上传记录、自定义存储平   台等地方获取使用，不需要可以不写</span></span><br><span class="line">                .upload();  <span class="comment">//将文件上传到对应地方</span></span><br><span class="line">        <span class="keyword">return</span> fileInfo == <span class="literal">null</span> ? <span class="string">&quot;上传失败！&quot;</span> : fileInfo.getUrl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传图片，成功返回文件信息</span></span><br><span class="line"><span class="comment">     * 图片处理使用的是 https://github.com/coobird/thumbnailator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload-image&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> FileInfo <span class="title function_">uploadImage</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileStorageService.of(file)</span><br><span class="line">                .image(img -&gt; img.size(<span class="number">1000</span>,<span class="number">1000</span>))  <span class="comment">//将图片大小调整到 1000*1000</span></span><br><span class="line">                .thumbnail(th -&gt; th.size(<span class="number">200</span>,<span class="number">200</span>))  <span class="comment">//再生成一张 200*200 的缩略图</span></span><br><span class="line">                .upload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件到指定存储平台，成功返回文件信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload-platform&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> FileInfo <span class="title function_">uploadPlatform</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileStorageService.of(file)</span><br><span class="line">                .setPlatform(<span class="string">&quot;aliyun-oss-1&quot;</span>)    <span class="comment">//使用指定的存储平台</span></span><br><span class="line">                .upload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接读取 HttpServletRequest 中的文件进行上传，成功返回文件信息</span></span><br><span class="line"><span class="comment">     * 使用这种方式有些注意事项，请查看文档 基础功能-上传 章节</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload-request&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> FileInfo <span class="title function_">uploadPlatform</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileStorageService.of(request).upload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">一款免费开源的对象存储服务</summary>
    
    
    
    
    <category term="linux" scheme="https://xusir.fun/tags/linux/"/>
    
    <category term="MinIO" scheme="https://xusir.fun/tags/MinIO/"/>
    
  </entry>
  
  <entry>
    <title>Redis-2</title>
    <link href="https://xusir.fun/posts/2410141459.html"/>
    <id>https://xusir.fun/posts/2410141459.html</id>
    <published>2024-10-14T14:59:48.000Z</published>
    <updated>2025-03-18T08:04:27.582Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>下面选择的Linux版本为CentOS 7<br>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p></blockquote><h1 id="单机安装Redis"><a href="#单机安装Redis" class="headerlink" title="单机安装Redis"></a>单机安装Redis</h1><h2 id="安装Redis依赖"><a href="#安装Redis依赖" class="headerlink" title="安装Redis依赖"></a>安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure></p><h2 id="下载安装包并解压"><a href="#下载安装包并解压" class="headerlink" title="下载安装包并解压"></a>下载安装包并解压</h2><p>将Redis安装包<mark>(如：redis-6.2.6.tar.gz)</mark>下载或上传到虚拟机的任意目录：<br>如将其放在了：<code>/usr/local/src</code> 目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入指定目录</span></span><br><span class="line">cd /usr/local/src</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载redis安装文件</span></span><br><span class="line">sudo wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压缩：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压后<code>/usr/local/src</code>目录中会出现<code>redis-6.2.6</code>的文件夹<br>进入redis目录：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redis-6.2.6/</span><br></pre></td></tr></table></figure></p><p>运行编译命令,运行完没有报错就说明成功了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>默认的安装路径在<code>/usr/local/bin</code>目录下：<br>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li><code>redis-cli</code>：是redis提供的命令行客户端</li><li><code>redis-server</code>：是redis的服务端启动脚本</li><li><code>redis-sentinel</code>：是redis的哨兵启动脚本</li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>redis的启动方式有：默认启动，指定配置启动，开机自启</p><h3 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><br>启动后能看到经典的redis的logo图形<br>这种启动属于<mark>前台启动</mark>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h3><p>如果要让Redis以<mark>后台方式启动</mark>，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫<mark>redis.conf</mark>：<br>我们先将这个配置文件备份一份：(以防不测用来复原hh)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure></p><p>然后修改redis.conf文件中的一些配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入编辑界面</span></span><br><span class="line">vi redis.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按i进入编辑模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按esc退出编辑模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索命令。命令模式输入/port就能查找port相关字段，按n查找下一个，N上一个</span></span><br><span class="line">/内容</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"># 守护进程，修改为yes后即可后台运行</span><br><span class="line">daemonize yes </span><br><span class="line"># 密码，设置后访问Redis必须输入密码</span><br><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 监听的端口</span><br><span class="line">port 6379</span><br><span class="line"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="line">dir .</span><br><span class="line"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="line">databases 1</span><br><span class="line"># 设置redis能够使用的最大内存</span><br><span class="line">maxmemory 512mb</span><br><span class="line"># 日志文件，默认为空，不记录日志，可以指定日志文件名（存放在当前工作目录）</span><br><span class="line">logfile &quot;redis.log&quot;</span><br></pre></td></tr></table></figure></p><p>启动Redis：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入redis安装目录</span> </span><br><span class="line">cd /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure></p><p>查看有没有成功运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二列是redis的运行进程号</span></span><br><span class="line">ps -ef | grep redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以杀死进程来关闭redis</span></span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure></p><p>停止服务：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123456 shutdown</span><br></pre></td></tr></table></figure></p><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>我们也可以通过配置来实现开机自启。首先，新建一个系统服务文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure></p><p>内容如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>然后重载系统服务：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p><p>现在，我们可以用下面的命令来操作redis了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure></p><p>执行下面的命令，可以让redis开机自启：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure></p><h1 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h1><p>redis的客户端包括：命令行客户端，图形化桌面客户端，编辑客户端</p><h2 id="Redis命令行客户端"><a href="#Redis命令行客户端" class="headerlink" title="Redis命令行客户端"></a>Redis命令行客户端</h2><p>Redis安装完成之后就自带了命令行客户端：redis-cli，使用方式如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><br>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码 <ul><li>如：<code>redis-cli -a 123456</code></li><li>也可以在进入控制台后，通过auth命令来指定密码如：<code>auth 123456</code></li></ul></li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p>选择库：<br>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 0</span><br></pre></td></tr></table></figure></p><h2 id="图形化桌面客户端"><a href="#图形化桌面客户端" class="headerlink" title="图形化桌面客户端"></a>图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在该仓库里选择版本下载安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a><br>如下载完成后得到压缩包：<code>resp-2022.2.zip</code>，解压缩后，运行安装程序即可安装<br>安装完成后，在安装目录找到<code>resp.exe</code>,双击即可运行。老版本是<code>rdm.exe</code></p><h3 id="连接与防火墙"><a href="#连接与防火墙" class="headerlink" title="连接与防火墙"></a>连接与防火墙</h3><p>如果使用图形化客户端连接不上redis多半是防火墙的问题</p><ol><li><p>连接时不使用默认的120.0.0.1,填虚拟机的ip</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将ens33中的ip地址填进去即可</span> </span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下操作2选一即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式1：关闭防火墙</span></span><br><span class="line">systemctl stop firewalld# 关闭防火墙</span><br><span class="line">systemctl disable firewalld# 停止防火墙开机自启</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式2：放行6379端口的外部访问</span></span><br><span class="line">firewall-cmd --add-port=6379/tcp --permanent# --add-port=6379/tcp表示放行6379端口的tcp访问，--permanent表示永久生效</span><br><span class="line">firewall-cmd --reload# 重新载入防火墙规则使其生效</span><br></pre></td></tr></table></figure></li><li><p>输入redis的密码点击测试连接成功即可。</p></li></ol>]]></content>
    
    
    <summary type="html">Redis安装指南-Linux</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="redis" scheme="https://xusir.fun/tags/redis/"/>
    
    <category term="linux" scheme="https://xusir.fun/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://xusir.fun/posts/2410051824.html"/>
    <id>https://xusir.fun/posts/2410051824.html</id>
    <published>2024-10-05T18:24:00.000Z</published>
    <updated>2025-03-18T08:04:27.582Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mybatis-plus：3.5.3.1 注意：springboot版本需要在3.2.0以下才兼容<br>mybatis-plus官网：<a href="https://baomidou.com">https://baomidou.com</a></p></blockquote><h1 id="快速了解-入门案例"><a href="#快速了解-入门案例" class="headerlink" title="快速了解(入门案例)"></a>快速了解(入门案例)</h1><ol><li><p>准备数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建项目，导入依赖(pom.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.    apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xnj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-mybatisplus-04<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot核心包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库相关配置启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot应用打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件(application.yml)和启动类(MainApp)<br> application.yml：src/main/resources</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/studb</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#myBatisPlus常用配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.xnj.domain</span> <span class="comment">#别名扫描，这样在mapperXml里就不需要写类的全路径名了</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/**/*.xml</span> <span class="comment">#Mapper.xml文件地址,默认值</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#是否开启下划线和驼峰的映射</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span> <span class="comment">#是否开启二级缓存</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#控制台打印日志</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span> <span class="comment">#id为雪花算法生成</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment">#更新策略:只更新非空字段</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span> <span class="comment">#表前缀</span></span><br></pre></td></tr></table></figure><p> MainApp：cn.xnj</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.xnj.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体类(User)和持久层(UserMapper)<br> User: cn.xnj.pojo</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> UserMapper：xn.xnj.mapper</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试(MyBatisPlusTest)<br>MyBatisPlusTest：src/main/test/java/cn.xnj.test</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="基于Mapper接口CRUD"><a href="#基于Mapper接口CRUD" class="headerlink" title="基于Mapper接口CRUD"></a>基于Mapper接口CRUD</h1><blockquote><p>下面使用的案例即上面的入门案例</p></blockquote><h2 id="Insert方法"><a href="#Insert方法" class="headerlink" title="Insert方法"></a>Insert方法</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="comment">// T 就是要插入的实体对象</span></span><br><span class="line"><span class="comment">// 默认主键生成策略为雪花算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数说明：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">entity</td><td style="text-align:center">实体对象</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_insert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;rows:&quot;</span>+rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Delete方法"><a href="#Delete方法" class="headerlink" title="Delete方法"></a>Delete方法</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 根据 ID 删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><strong>参数说明：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Serializable</td><td style="text-align:center">id</td><td style="text-align:center">主键 ID</td></tr><tr><td style="text-align:center">Collection&lt;? extends Serializable&gt;</td><td style="text-align:center">idList</td><td style="text-align:center">主键 ID 列表(不能为 null 以及 empty)</td></tr><tr><td style="text-align:center">Map<String, Object></td><td style="text-align:center">columnMap</td><td style="text-align:center">表字段 map 对象</td></tr><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">wrapper</td><td style="text-align:center">实体对象封装操作类（可以为 null）</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_delete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 根据id删除</span></span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE id=?</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rows1</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1276067841L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;rows1=&quot;</span>+rows1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 删除（根据ID 批量删除）</span></span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    Collection&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows2</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">    System.out.println(<span class="string">&quot;rows2=&quot;</span>+rows2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据 columnMap 条件，删除记录</span></span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">    Map&lt;String,Object&gt; columnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    columnMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">24</span>);</span><br><span class="line">    columnMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Billie&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows4</span> <span class="operator">=</span> userMapper.deleteByMap(columnMap);</span><br><span class="line">    System.out.println(<span class="string">&quot;rows4=&quot;</span>+rows4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 根据 entity 条件，删除记录 wrapper 条件</span></span><br><span class="line">    <span class="comment">//wrapper 条件封装对象，可以无限的封装条件</span></span><br><span class="line">    <span class="comment">//userMapper.delete(wrapper);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Update方法"><a href="#Update方法" class="headerlink" title="Update方法"></a>Update方法</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 根据 ID 修改  主键属性必须有值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, </span></span><br><span class="line"><span class="params">            <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数说明：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">entity</td><td style="text-align:center">实体对象 (set 条件值,可为 null)</td></tr><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">updateWrapper</td><td style="text-align:center">实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//当属性为null时，不修改，所以实体属性都用封装类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 根据 ID 修改 ,主键属性必须有值 修改id为1的用户的年龄为30</span></span><br><span class="line">    <span class="comment">// UPDATE user SET age=? WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    user.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows1</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;rows1=&quot;</span>+rows1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 根据 whereWrapper 条件，更新记录</span></span><br><span class="line">    <span class="comment">//将所有人的年龄改为22</span></span><br><span class="line">    <span class="comment">// UPDATE user SET age=? </span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user2.setAge(<span class="number">22</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows2</span> <span class="operator">=</span> userMapper.update(user2,<span class="literal">null</span>);<span class="comment">//null表示没有条件</span></span><br><span class="line">    System.out.println(<span class="string">&quot;rows2=&quot;</span>+rows2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Select方法"><a href="#Select方法" class="headerlink" title="Select方法"></a>Select方法</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 查询（根据ID 批量查询）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 根据 entity 条件，查询一条记录</span></span><br><span class="line">T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 根据 entity 条件，查询全部记录</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 查询（根据 columnMap 条件）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMapsPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line">Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数说明：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Serializable</td><td style="text-align:center">id</td><td style="text-align:center">主键 ID</td></tr><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">queryWrapper</td><td style="text-align:center">实体对象封装操作类（可以为 null）</td></tr><tr><td style="text-align:center">Collection&lt;? extends Serializable&gt;</td><td style="text-align:center">idList</td><td style="text-align:center">主键 ID 列表(不能为 null 以及 empty)</td></tr><tr><td style="text-align:center">Map<String, Object></td><td style="text-align:center">columnMap</td><td style="text-align:center">表字段 map 对象</td></tr><tr><td style="text-align:center">IPage<T></td><td style="text-align:center">page</td><td style="text-align:center">分页查询条件（可以为 RowBounds.DEFAULT）</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_select</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据id查询</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user=&quot;</span>+user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据ID 批量查询</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    Collection&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">    List&lt;User&gt; userList1 = userMapper.selectBatchIds(ids);</span><br><span class="line">    System.out.println(<span class="string">&quot;userList1 =&quot;</span>+userList1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 查询（根据 columnMap 条件）</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE name =? AND age =?</span></span><br><span class="line">    Map&lt;String,Object&gt; columnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    columnMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">24</span>);</span><br><span class="line">    columnMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Billie&quot;</span>);</span><br><span class="line">    List&lt;User&gt; userList2 = userMapper.selectByMap(columnMap);</span><br><span class="line">    System.out.println(<span class="string">&quot;userList2=&quot;</span>+userList2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="基于Service接口CRUD"><a href="#基于Service接口CRUD" class="headerlink" title="基于Service接口CRUD"></a>基于Service接口CRUD</h1><blockquote><p>下面使用的案例即上面的入门案例</p></blockquote><p>通用 Service CRUD 封装IService (opens new window)接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</p><p><strong>对比Mapper接口CRUD区别：</strong></p><ul><li>service添加了批量方法</li><li>service层的方法自动添加事务</li></ul><h2 id="使用IService接口方式"><a href="#使用IService接口方式" class="headerlink" title="使用IService接口方式"></a>使用IService接口方式</h2><ol><li><p>mapper还是照前面写<code>继承BaseMapper&lt;T&gt;</code>【cn.xnj.mapper】</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>service接口<code>继承Iservice&lt;T&gt;</code>【cn.xnj.service】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>service的实现类<code>继承ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt;</code>【cn.xnj.service.impl】</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>官网： <a href="https://baomidou.com/guides/data-interface/">https://baomidou.com/guides/data-interface/</a></p></blockquote><h2 id="save"><a href="#save" class="headerlink" title="save"></a>save</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 2. 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 3. 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">entity</td><td style="text-align:center">实体对象</td></tr><tr><td style="text-align:center">Collection<T></td><td style="text-align:center">entityList</td><td style="text-align:center">实体对象集合</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">batchSize</td><td style="text-align:center">插入批次数量(即一次insert语句插入的条数)</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_save</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.插入一条记录（选择字段，策略插入）</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>,<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flg1</span> <span class="operator">=</span> userService.save(user1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 插入（批量） 默认批次 这里不能再用上面的user对象加入集合中进行批量插入，出现主键重复</span></span><br><span class="line">    <span class="comment">//假设默认的批次的大小为2</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * INSERT INTO user (name,age, email) VALUES</span></span><br><span class="line"><span class="comment">     * (&#x27;王五1&#x27;, 20,&#x27;EMAIL1&#x27;),</span></span><br><span class="line"><span class="comment">     * (&#x27;王五2&#x27;, 21,&#x27;EMAIL2&#x27;),</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;王五1&quot;</span>,<span class="number">20</span>,<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;王五2&quot;</span>,<span class="number">21</span>,<span class="string">&quot;EMAIL2&quot;</span>);</span><br><span class="line">    userList.add(user2);</span><br><span class="line">    userList.add(user3);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flg2</span> <span class="operator">=</span> userService.saveBatch(userList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 插入（批量） 分批次 设置批次大小为1</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * INSERT INTO user (name,age, email) VALUES(&#x27;张三1&#x27;, 20,&#x27;EMAIL&#x27;),</span></span><br><span class="line"><span class="comment">     * INSERT INTO user (name,age, email) VALUES(&#x27;张三2&#x27;, 21,&#x27;EMAIL2&#x27;),</span></span><br><span class="line"><span class="comment">     * INSERT INTO user (name,age, email) VALUES(&#x27;张三3&#x27;, 20,&#x27;EMAIL3&#x27;),</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; userList2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;张三1&quot;</span>,<span class="number">20</span>,<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;张三2&quot;</span>,<span class="number">21</span>,<span class="string">&quot;EMAIL2&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;张三3&quot;</span>,<span class="number">20</span>,<span class="string">&quot;EMAIL&quot;</span>);</span><br><span class="line">    userList2.add(user4);</span><br><span class="line">    userList2.add(user5);</span><br><span class="line">    userList2.add(user6);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flg3</span> <span class="operator">=</span> userService.saveBatch(userList2,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="saveOrUpdate"><a href="#saveOrUpdate" class="headerlink" title="saveOrUpdate"></a>saveOrUpdate</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. TableId 注解属性值存在则更新记录，否插入一条记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 2. 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 3. 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 4. 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">entity</td><td style="text-align:center">实体对象</td></tr><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">updateWrapper</td><td style="text-align:center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td style="text-align:center">Collection<T></td><td style="text-align:center">entityList</td><td style="text-align:center">实体对象集合</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">batchSize</td><td style="text-align:center">插入批次数量</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_saveOrUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. TableId 注解属性值存在则更新记录，否插入一条记录</span></span><br><span class="line">    <span class="comment">//如果id有值就更新，没有值就插入一条记录</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;John Doe&quot;</span>,<span class="number">30</span>,<span class="string">&quot;john.doe@example.com&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flg1</span> <span class="operator">=</span> userService.saveOrUpdate(user);<span class="comment">// 插入一条记录</span></span><br><span class="line"></span><br><span class="line">    user.setId(<span class="number">1843191296522436610L</span>);</span><br><span class="line">    user.setAge(<span class="number">40</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flg2</span> <span class="operator">=</span> userService.saveOrUpdate(user);<span class="comment">// 更新一条记录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 根据 queryWrapper 设置的条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 2. 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 3. 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 4. 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">queryWrapper</td><td style="text-align:center">实体包装类 QueryWrapper</td></tr><tr><td style="text-align:center">Serializable</td><td style="text-align:center">id</td><td style="text-align:center">主键 ID</td></tr><tr><td style="text-align:center">Map<String, Object></td><td style="text-align:center">columnMap</td><td style="text-align:center">表字段 map 对象</td></tr><tr><td style="text-align:center">Collection&lt;? extends Serializable&gt;</td><td style="text-align:center">idList</td><td style="text-align:center">主键 ID 列表</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_remove</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 2. 根据ID 删除一条记录</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> userService.removeById(<span class="number">1843191296522436610L</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 根据 columnMap 条件，删除记录</span></span><br><span class="line">    Map&lt;String, Object&gt; columnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    columnMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三1&quot;</span>);</span><br><span class="line">    columnMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> userService.removeByMap(columnMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 删除（根据ID 批量删除）</span></span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE id IN (?,?,? )</span></span><br><span class="line">    Collection&lt;Long&gt; ids = List.of(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag3</span> <span class="operator">=</span> userService.removeByIds(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 2. 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 3. 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 4. 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 5. 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">updateWrapper</td><td style="text-align:center">实体对象封装操作类 UpdateWrapper</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">entity</td><td style="text-align:center">实体对象</td></tr><tr><td style="text-align:center">Collection<T></td><td style="text-align:center">entityList</td><td style="text-align:center">实体对象集合</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">batchSize</td><td style="text-align:center">更新批次数量</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//为空的属性不更改</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据 ID 选择修改</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1843124048071974914L</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">28</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> userService.updateById(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 根据ID 批量更新   默认批次</span></span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5L</span>, <span class="literal">null</span>, <span class="number">58</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4L</span>, <span class="literal">null</span>, <span class="number">68</span>, <span class="literal">null</span>);</span><br><span class="line">    userList.add(user1);</span><br><span class="line">    userList.add(user2);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> userService.updateBatchById(userList);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 根据ID 批量更新   分批次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 2. 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 3. 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 4. 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 5. 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Serializable</td><td style="text-align:center">id</td><td style="text-align:center">主键 ID</td></tr><tr><td style="text-align:center">Wrapper<T></td><td style="text-align:center">queryWrapper</td><td style="text-align:center">实体对象封装操作类 QueryWrapper</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">throwEx</td><td style="text-align:center">有多个 result 是否抛出异常</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">entity</td><td style="text-align:center">实体对象</td></tr><tr><td style="text-align:center">Function&lt;? super Object, V&gt;</td><td style="text-align:center">mapper    转换函数</td></tr></tbody></table></div><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_get</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="number">3L</span>);<span class="comment">//返回的是单个对象</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p><strong>语法：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 2. 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 3. 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 4. 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 5. 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 6. 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 7. 查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 8. 查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"><span class="comment">// 9. 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 10. 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong><br>|类型|参数名|描述|<br>|:—-:|:—-:|:—-:|<br>|Wrapper<T>|queryWrapper|实体对象封装操作类 QueryWrapper|<br>|Collection&lt;? extends Serializable&gt;|idList|主键 ID 列表|<br>|Map<String, Object>|columnMap|表字段 map 对象|<br>|Function&lt;? super Object, V&gt;|mapper|转换函数|</p><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_list</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = userService.list(<span class="literal">null</span>);<span class="comment">//查询全部，返回的是集合</span></span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="MyBatisPlus更新策略-Mybatis-Plus-update-strategy"><a href="#MyBatisPlus更新策略-Mybatis-Plus-update-strategy" class="headerlink" title="MyBatisPlus更新策略(Mybatis-Plus update strategy)"></a>MyBatisPlus更新策略(Mybatis-Plus update strategy)</h1><p>使用Mybatis-Plus提供的更新方法时，若实体中的字段为<code>null</code>，默认情况下，最终生成的update语句中，不会包含该字段。若想改变默认行为，可做以下配置。</p><ol><li><p><strong>全局配置</strong><br>在<code>application.yml</code>中配置如下参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">&lt;strategy&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：上述<code>&lt;strategy&gt;</code>可选值有：<code>ignore</code>、<code>not_null</code>、<code>not_empty</code>、<code>never</code>，默认值为<code>not_null</code></p><ul><li><code>ignore</code>：忽略空值判断，不管字段是否为空，都会进行更新<ul><li><code>not_null</code>：进行非空判断，字段非空才会进行判断</li></ul></li><li><code>not_empty</code>：进行非空判断，并进行非空串（””）判断，主要针对字符串类型</li><li><code>never</code>：从不进行更新，不管该字段为何值，都不更新</li></ul></li><li><p><strong>局部配置</strong><br>在实体类中的具体字段通过<code>@TableField</code>注解进行配置，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Schema(description = &quot;密码&quot;)</span></span><br><span class="line"><span class="meta">@TableField(value = &quot;password&quot;, updateStrategy = FieldStrategy.NOT_EMPTY)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure></li></ol><h1 id="page分页查询"><a href="#page分页查询" class="headerlink" title="page分页查询"></a>page分页查询</h1><ol><li><p>前置条件说明【依然是上面入门案例】</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.xnj.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.xnj.service.impl;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>在配置类中<font color=red>将mybatis-plus插件加入ioc容器中，并加入<code>分页插件</code>,并指定数据库类型如<code>DbType.MYSQL</code> </font></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.xnj.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mybatis-plus插件加入到ioc容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">plusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//mybatis-plus的插件集合【加入到这个插件集合中即可：分页插件，乐观锁插件..】</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//加入分页插件</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MybatisPlus的<code>BaseMapper</code>和<code>ServiceImpl</code>均提供了常用的分页查询的方法，例如：</p><ul><li><code>BaseMapper</code>的分页查询:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page,Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>ServiceImpl</code>的分页查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page)</span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li><li><p>自定义Mapper<br>对于自定义SQL，也可以十分方便的完成分页查询，如下<br><code>Mapper</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;UserVo&gt; <span class="title function_">selectPageVo</span><span class="params">(IPage&lt;?&gt; page, Integer state)</span>;</span><br></pre></td></tr></table></figure><p><code>Mapper.xml</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectPageVo&quot;</span> resultType=<span class="string">&quot;xxx.xxx.xxx.UserVo&quot;</span>&gt;</span><br><span class="line">   SELECT id,name FROM user WHERE state=#&#123;state&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>Mapper.xml</code>中的SQL只需实现查询<code>list</code>的逻辑即可，无需关注分页的逻辑。</p></li></ul></li></ol><ol><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusPageTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//IPage -&gt; Page(页码,页容量)</span></span><br><span class="line">        IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        IPage&lt;User&gt; result = userMapper.selectPage(page,<span class="literal">null</span>);<span class="comment">//第二个参数为条件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//结果最后也会被封装到page中</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> result.getCurrent();<span class="comment">//当前页页码</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> result.getSize();<span class="comment">//页容量</span></span><br><span class="line">        List&lt;User&gt; records = result.getRecords();<span class="comment">//当前页数据</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> result.getTotal();<span class="comment">//总记录数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> result.getPages();<span class="comment">//总页数</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> result.hasNext();<span class="comment">//是否有下一页</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPrevious</span> <span class="operator">=</span> result.hasPrevious();<span class="comment">//是否有上一页</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义page分页查询"><a href="#自定义page分页查询" class="headerlink" title="自定义page分页查询"></a>自定义page分页查询</h2><ol><li>同上方，需要在配置类中添加mybatis-plus分页的插件</li><li><p>在mapper中定义你自己的page方法<br><mark>注意方法返回值：IPage&lt;查询返回类型&gt; 如查询部分字段还重命名了就可以用Map</mark></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//返回的是IPage</span></span><br><span class="line">    IPage&lt;User&gt; <span class="title function_">selectPageByAge</span><span class="params">(IPage&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> mybatisplus对mapperxml文件的默认目录是：resources/mapper<br> 所以如果不在配置文件里新定规则的话，直接创建如下：<code>resources/mapper/XxxMapper.xml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--resultType的value是page的泛型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageByAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where age&gt;#&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//IPage -&gt; Page(页码,页容量)</span></span><br><span class="line">    IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    IPage&lt;User&gt; result=userMapper.selectPageByAge(page,<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//结果page最后也会被封装结果</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> result.getCurrent();<span class="comment">//当前页页码</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> result.getSize();<span class="comment">//页容量</span></span><br><span class="line">    List&lt;User&gt; records = result.getRecords();<span class="comment">//当前页数据</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> result.getTotal();<span class="comment">//总记录数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> result.getPages();<span class="comment">//总页数</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> result.hasNext();<span class="comment">//是否有下一页</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasPrevious</span> <span class="operator">=</span> result.hasPrevious();<span class="comment">//是否有上一页</span></span><br><span class="line"></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h1><p>MyBatis-Plus 提供了一套强大的条件构造器（Wrapper），用于构建复杂的数据库查询条件。</p><p>修改的时候：UpdateWrapper、LambdaUpdateWrapper<br>删除，查询，修改：QueryWrapper、LambdaQueryWrapper</p><p><strong>函数：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">说明</th><th style="text-align:center">函数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">eq</td><td style="text-align:center">等于=</td><td style="text-align:center">ne</td><td style="text-align:center">不等于&lt;&gt;</td></tr><tr><td style="text-align:center">gt</td><td style="text-align:center">大于&gt;</td><td style="text-align:center">ge</td><td style="text-align:center">大于等于&gt;=</td></tr><tr><td style="text-align:center">lt</td><td style="text-align:center">小于&lt;</td><td style="text-align:center">le</td><td style="text-align:center">小于等于&lt;=</td></tr><tr><td style="text-align:center">between</td><td style="text-align:center">between a and b</td><td style="text-align:center">notBetween</td><td style="text-align:center">not between a and b</td></tr><tr><td style="text-align:center">like</td><td style="text-align:center">like ‘%值%’</td><td style="text-align:center">notLike</td><td style="text-align:center">not like ‘%值%’</td></tr><tr><td style="text-align:center">likeLeft</td><td style="text-align:center">like ‘%值’</td><td style="text-align:center">likeRight</td><td style="text-align:center">like ‘值%’</td></tr><tr><td style="text-align:center">isNull</td><td style="text-align:center">字段 is null</td><td style="text-align:center">isNotNull</td><td style="text-align:center">字段 is not null</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">字段 in (v0,v1,..)</td><td style="text-align:center">notIn</td><td style="text-align:center">字段 not in (v0,v1,..)</td></tr><tr><td style="text-align:center">inSql</td><td style="text-align:center">字段 in (sql语句)</td><td style="text-align:center">notInSql</td><td style="text-align:center">字段 not in (sql语句)</td></tr><tr><td style="text-align:center">groupBy</td><td style="text-align:center">分组</td><td style="text-align:center">orderBy</td><td style="text-align:center">排序</td></tr><tr><td style="text-align:center">orderByAsc</td><td style="text-align:center">升序排序</td><td style="text-align:center">orderByDesc</td><td style="text-align:center">降序排序</td></tr><tr><td style="text-align:center">having</td><td style="text-align:center">having(sql语句)</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">拼接or</td><td style="text-align:center">and</td><td style="text-align:center">and嵌套</td></tr></tbody></table></div><font color=red>or()函数只有后面紧跟的条件为or拼接，其他条件全默认为and连接</font><h2 id="基于QueryWrapper组装条件"><a href="#基于QueryWrapper组装条件" class="headerlink" title="基于QueryWrapper组装条件"></a>基于QueryWrapper组装条件</h2><p><strong>示例：</strong><br>创建一个QueryWrapper对象来组装条件<br>普通使用或链式调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含&#x27;张&#x27;,年龄在20，30之间，并且邮箱不为空</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/*queryWrapper.like(&quot;name&quot;,&quot;张&quot;);</span></span><br><span class="line"><span class="comment">    queryWrapper.between(&quot;age&quot;,20,30);</span></span><br><span class="line"><span class="comment">    queryWrapper.isNotNull(&quot;email&quot;);*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//链式调用</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>)</span><br><span class="line">            .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按年龄降序查询用户，如果年龄相同，则按id升序排列</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper1.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">        .orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        </span><br><span class="line">List&lt;User&gt; userList1 = userMapper.selectList(queryWrapper1);</span><br><span class="line">System.out.println(userList1);</span><br></pre></td></tr></table></figure></p><p>查询指定列 <code>queryWrapper2.select(&quot;列1&quot;，&quot;列2&quot;...)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户名和年龄字段，并且用户年龄大于25的用户</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper2 = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper2.gt(<span class="string">&quot;age&quot;</span>,<span class="number">25</span>);</span><br><span class="line">queryWrapper2.select(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList2 = userMapper.selectList(queryWrapper2);</span><br><span class="line">System.out.println(userList2);</span><br></pre></td></tr></table></figure><br>删除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 删除邮箱为null的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>修改操作<br>使用queryWrapper + 实体类形式可以实现修改，但是无法将列值修改为null值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将年龄大于20并且用户名中包含有&#x27;张&#x27;或邮箱为null的用户信息修改</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)</span><br><span class="line">         .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>)<span class="comment">//条件直接俄调用方法默认使用and拼接</span></span><br><span class="line">            .or().isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">25</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;EMAIL666&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.update(user,queryWrapper);</span><br><span class="line">    System.out.println(rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>条件判断(if test=”判断”)<br>每个方法都会有一个boolean condition，运行第一位放一个比较表达式 true则整个条件生效 false不生效<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//前端传两个参数：name不为空 条件=，age&gt;18 条件=</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张xx&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">    queryWrapper.eq(StringUtils.isNotBlank(name),<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    queryWrapper.eq(age!=<span class="literal">null</span> &amp;&amp; age&gt;<span class="number">18</span>,<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基于UpdateWrapper组装条件"><a href="#基于UpdateWrapper组装条件" class="headerlink" title="基于UpdateWrapper组装条件"></a>基于UpdateWrapper组装条件</h2><p>updateWrapper能直接修改数据，也能将数据修改为任意值如null【QueryWrapper不能修改为null】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusUpdateWrapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//updatewrappper修改【条件，修改】</span></span><br><span class="line">        <span class="comment">// 可以直接修改数据 .set(“列名”,值)</span></span><br><span class="line">        <span class="comment">//允许修改为任意值 .set(&quot;列名&quot;,null)</span></span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        updateWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)</span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>)</span><br><span class="line">                .or().isNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .set(<span class="string">&quot;age&quot;</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="基于LambdaQueryWrapper和LambdaUpdateWrapper组装条件"><a href="#基于LambdaQueryWrapper和LambdaUpdateWrapper组装条件" class="headerlink" title="基于LambdaQueryWrapper和LambdaUpdateWrapper组装条件"></a>基于LambdaQueryWrapper和LambdaUpdateWrapper组装条件</h2><p>在写条件字段时可以直接：<code>(对象::get方法,值)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusLambdaQueryWrapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LambdaQueryWrapper</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_select</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 查询用户名包含&#x27;张&#x27;,年龄在20，30之间，并且邮箱不为空</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//queryWrapper,链式调用</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>)</span><br><span class="line">                .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        List&lt;User&gt; userList1 = userMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LambdaQueryWrapper,lambda</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.like(User::getName,<span class="string">&quot;张&quot;</span>)</span><br><span class="line">                .between(User::getAge,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">                .isNotNull(User::getEmail);</span><br><span class="line">        List&lt;User&gt; userList2 = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//LambdaUpdateWrapper</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//将年龄大于20并且用户名中包含有&#x27;张&#x27;的用户年龄改为18岁</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//UpdateQueryWrapper，修改</span></span><br><span class="line">        UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)</span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>)<span class="comment">//条件直接俄调用方法默认使用and拼接</span></span><br><span class="line">                .set(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows1</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>,updateWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//LambdaQueryWrapper</span></span><br><span class="line">        LambdaUpdateWrapper&lt;User&gt; lambdaUpdateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaUpdateWrapper.gt(User::getAge,<span class="number">20</span>)</span><br><span class="line">             .like(User::getName,<span class="string">&quot;张&quot;</span>)</span><br><span class="line">                .set(User::getAge,<span class="number">18</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows2</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>,lambdaUpdateWrapper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="MyBatisPlus核心注解使用"><a href="#MyBatisPlus核心注解使用" class="headerlink" title="MyBatisPlus核心注解使用"></a>MyBatisPlus核心注解使用</h1><ol><li><strong>@TableName(value=”表名”)</strong><br>如果仅使用该注解，而不指定值，就使用类名为表名，忽略大小写，可以省略该注解！<br>也可以在全局配置文件中指定类名与表名的映射关系<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> <span class="comment"># mybatis-plus的配置</span></span><br><span class="line"> <span class="attr">global-config:</span></span><br><span class="line">   <span class="attr">db-config:</span></span><br><span class="line">     <span class="attr">table-prefix:</span> <span class="string">t_</span> <span class="comment"># 表名前缀字符串 User -&gt; t_user</span></span><br></pre></td></tr></table></figure><ul><li><code>value</code>：当实体类名与数据库表名不一致的时候，可以用value来指定数据库表名</li></ul></li></ol><ol><li><p><strong>@TableId(value=”主键列名”,type=主键策略)</strong><br>用在属性上指定主键id字段</p><ul><li><code>value</code>：当主键名与属性名完全不同时在里面填主键字段名</li><li><code>type</code>：主键策略如：auto、ASSIGN_ID(雪花算法生成不重复的long型id，默认)<br> ASSIGN_ID雪花算法： 1.数据库主键为 bigint / varchar(64)类型 2.实体属性为long  3.随机生成不重复<br> auto自增：1.数据库主键类型为数字 设置了auto_increment  2.插入数据自增长<br> 也可以通过全局配置文件配置type   <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#myBatisPlus常用配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span> <span class="comment">#id为雪花算法生成</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span> <span class="comment">#更新策略:只更新非空字段</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span> <span class="comment">#表前缀</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>@TableField(value=&quot;非主键字段名&quot;,exist = 是否为表字段)</code></p><ul><li>@TableField用于实体类非主键字段的其他属性上</li><li><code>value</code>：当表字段名和属性名不一致就可以使用value来指定</li><li><code>exist</code>：当为<strong>false</strong>时表示该字段不属于数据库表字段，插入或查询时不参与</li></ul></li></ol><h1 id="逻辑删除的实现"><a href="#逻辑删除的实现" class="headerlink" title="逻辑删除的实现"></a>逻辑删除的实现</h1><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据<br>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><ol><li><p>表添加逻辑删除字段(可以是一个布尔类型、整数类型或枚举类型。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> deleted <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> ;  # <span class="type">int</span> 类型 <span class="number">1</span> 逻辑删除 <span class="number">0</span> 未逻辑删除</span><br></pre></td></tr></table></figure></li><li><p>实体类添加逻辑删除属性</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// @TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除，默认值为0，1为删除</span></span><br><span class="line">    <span class="comment">//当删除数据的时候，会自动将deleted字段的值改为1</span></span><br><span class="line">    <span class="comment">//当查询数据的时候，会自动将deleted字段的值为1的数据过滤掉，只查询deleted=0的数据</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="comment">//逻辑删除字段 int mybatis-plus下,默认 逻辑删除值为1 未逻辑删除 0 </span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果觉得每个类都添加<code>@TableLogic</code>注解麻烦，可以在全局配置中指定</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h1><ol><li><p>情景：</p><ul><li>对一个实体类有状态字段，存入数据库的状态字段为数字如：1，2。</li><li>返回前端时需要将数字转为对应的字符串如：”正常”、“冻结”<br>定义如下实体类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    Nomarl(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    Freeze(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">// 枚举值序列化到数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="meta">@JsonValue</span>  <span class="comment">//枚举值传给前端</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> code, String value) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在实体类中的状态字段改为枚举类，原本判断如：<code>user.getStatus() == 1</code> 改为<code>user.getStatus() == UserStatus.Nomarl</code></li></ul></li><li><p>注解讲解</p><ul><li>添加配置和注解<code>@EnumValue</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span> <span class="comment">#枚举类型处理器</span></span><br></pre></td></tr></table></figure>然后在枚举类中，需要传给数据库的枚举类字段，那么在枚举类中添加<code>@EnumValue</code>注解。最后保存到数据库时，会保存枚举类的注解字段值</li><li>JsonValue注解<code>@JsonValue</code><br>在枚举类中，需要传给前端的枚举类字段，那么在枚举类中添加<code>@JsonValue</code>注解。最后查询结果会返回枚举类的注解字段值</li></ul></li></ol><h1 id="乐观锁的实现"><a href="#乐观锁的实现" class="headerlink" title="乐观锁的实现"></a>乐观锁的实现</h1><p>乐观锁和悲观锁：<br>用上厕所蹲坑来比喻，悲观锁就是有厕所门的厕所，一个人进去了锁了门，另一个人就进不去了。乐观锁就是没有厕所门的厕所，一个人进去了，另一个人进去发现已经有人了就失败，再进去发现还是有人还是失败，直到厕所里没人了再进去成功。</p><p>注意：悲观锁和乐观锁是两种解决并发数据问题的思路,不是具体技术!!!</p><p>乐观锁具体方案：<br><strong>版本号/时间戳</strong>：为数据添加一个版本号或时间戳字段，每次更新数据时，比较当前版本号或时间戳与期望值是否一致，若一致则更新成功，否则表示数据已被修改，需要进行冲突处理。</p><ul><li>每条数据添加一个版本号字段version</li><li>取出记录时，获取当前 version</li><li>更新时，检查获取版本号是不是数据库当前最新版本号</li><li>如果是[证明没有人修改数据], 执行更新, set 数据更新 , version = version+ 1 </li><li>如果 version 不对[证明有人已经修改了]，我们现在的其他记录就是失效数据!就更新失败</li></ul><p><strong>实现步骤：</strong></p><ol><li><p>实体类添加乐观锁字段并添加@Version注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li><li><p>数据库也添加version字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> version <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span> ;  # <span class="type">int</span> 类型 乐观锁字段</span><br></pre></td></tr></table></figure><ul><li>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,</li><li>仅支持 updateById(id) 与 update(entity, wrapper) 方法</li></ul></li><li><p>添加版本号更新插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mybatis-plus插件加入到ioc容器中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">plusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//mybatis-plus的插件集合【加入到这个插件集合中即可：分页插件，乐观锁插件..】</span></span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    <span class="comment">//加入分页插件</span></span><br><span class="line">    <span class="comment">//mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入乐观锁插件  mybatis-plus会在更新的时候，每次帮我们对比版本号字段和增加版本号+1</span></span><br><span class="line">    mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>之后正常使用更新即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示乐观锁生效场景</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick7</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//步骤1: 先查询,在更新 获取version数据</span></span><br><span class="line">    <span class="comment">//同时查询两条,但是version唯一,最后更新的失败</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span>  <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>); <span class="comment">//version=1</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span>  <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);<span class="comment">//version=1</span></span><br><span class="line"></span><br><span class="line">    user.setAge(<span class="number">20</span>); <span class="comment">//age=20</span></span><br><span class="line">    user1.setAge(<span class="number">30</span>); <span class="comment">//age=30</span></span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user);<span class="comment">//修改成功 version=2</span></span><br><span class="line">    <span class="comment">//乐观锁生效,失败!</span></span><br><span class="line">    userMapper.updateById(user1);<span class="comment">//2！=1 修改失败</span></span><br><span class="line">    <span class="comment">//age=20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="防全表更新和删除实现"><a href="#防全表更新和删除实现" class="headerlink" title="防全表更新和删除实现"></a>防全表更新和删除实现</h1><ol><li><p>添加防止全表更新和删除拦截器</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">  <span class="comment">//防止全表更新和删除插件【防止恶意操作】</span></span><br><span class="line">  mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">BlockAttackInnerInterceptor</span>());</span><br><span class="line">  <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试全部更新或全部删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick8</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;custom_name&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;xxx@mail.com&quot;</span>);</span><br><span class="line">    <span class="comment">//Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibition of table update operation</span></span><br><span class="line">    <span class="comment">//全局更新,报错</span></span><br><span class="line">    userService.saveOrUpdate(user,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="MyBatis-Plus代码生成器-MyBatisX插件"><a href="#MyBatis-Plus代码生成器-MyBatisX插件" class="headerlink" title="MyBatis-Plus代码生成器(MyBatisX插件)"></a>MyBatis-Plus代码生成器(MyBatisX插件)</h1><ol><li><p>确保你的idea安装了MyBatisX的插件</p></li><li><p>点击idea右侧数据库，连接数据库</p></li><li><p>右键表，点击<code>MyBatisX-Generator</code></p><ul><li><code>module path</code>:选择项目如 D:/code/springboot-project</li><li><code>base package</code>:项目根包如 cn.xnj</li><li><code>relative package</code>:存实体类的包如 pojo</li><li><code>ignore file prefix/sufix</code>:忽略字段的前/后缀  </li><li><code>ignore table prefix/sufix</code>:忽略表的前前/后缀如 t_</li></ul></li><li><p>点击next</p><ul><li><code>annotation注解</code>: MyBatis-Plus3</li><li><code>options</code>: Lombok  Model</li><li><code>template</code>: mybatis-plus3</li></ul></li><li><p>点击finish即可生成<br>注意实体类属性中version，deleted等字段还需要自己添加相应需求注解</p></li></ol><p>MyBatisX代码生成器:在mapper里写方法名时会发现mybatisx的提示，按其提示写，然后alter+enter将会帮我们自动生成代码</p>]]></content>
    
    
    <summary type="html">MyBatis-Plus</summary>
    
    
    
    <category term="笔记" scheme="https://xusir.fun/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="mybatis" scheme="https://xusir.fun/tags/mybatis/"/>
    
    <category term="mybatis-plus" scheme="https://xusir.fun/tags/mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置</title>
    <link href="https://xusir.fun/posts/2410032030.html"/>
    <id>https://xusir.fun/posts/2410032030.html</id>
    <published>2024-10-03T20:30:00.000Z</published>
    <updated>2025-03-18T08:04:27.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不能在VSCode终端执行程序脚本"><a href="#不能在VSCode终端执行程序脚本" class="headerlink" title="不能在VSCode终端执行程序脚本"></a>不能在VSCode终端执行程序脚本</h1><p>我们安装好vscode编辑器，并安装好cnpm或其他开发工具例如vue的开发工具vuecli后，在vscode终端运行npm脚本，或其他如<code>vue -version</code>;<code>hexo g</code>等程序脚本命令时，发出诸如无法加载文件等错误，这十分影响我们的操作<br>解决办法：</p><ol><li><p>右击桌面<code>VSCode</code>图标,选择以管理员的身份运行。</p></li><li><p>在vscode终端中执行<code>get-executionpolicy</code>：显示<code>Restricted</code></p><ul><li>显示：<code>RemoteSigned</code>表示允许执行允许本地创建的脚本</li><li>显示：<code>Restricted</code>表示禁止执行脚本【这就是原因】</li></ul></li><li><p>修改权限：<br>这时执行<code>set-executionpolicy RemoteSigned</code></p></li><li><p>验证：<br>再执行<code>get-executionpolicy</code>：显示<code>RemoteSigned</code>,表示状态解禁，可以运行。</p></li></ol><h1 id="创建多级目录平级折叠"><a href="#创建多级目录平级折叠" class="headerlink" title="创建多级目录平级折叠"></a>创建多级目录平级折叠</h1><p>文件-&gt;首选项-&gt;设置:搜索<code>compact</code>，将以下两个选项的勾取消即可</p><ul><li>Explorer: Compact Folders</li><li>Notebook: Compact View</li></ul><h1 id="VsCode扩展插件推荐"><a href="#VsCode扩展插件推荐" class="headerlink" title="VsCode扩展插件推荐"></a>VsCode扩展插件推荐</h1><ol><li><p>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code<br>适用于 VS Code 的中文（简体）语言包</p></li><li><p>IntelliJ IDEA Keybindings<br>适用于 Visual Studio Code 的 IntelliJ IDEA 键绑定，能适配idea中的快捷键<br>详情请看：<a href="https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings">https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings</a></p></li><li><p>Live Server<br>打开 HTML 文件并右键单击编辑器，然后单击 。<code>Open with Live Server</code>就能边编辑边看到界面的实时变化了。具有实时浏览器重新加载功能的 Quick Development Live Server。通过单击状态栏启动或停止服务器。</p></li><li><p>Markdown All in One<br>Markdown 所需的一切（键盘快捷键、目录、自动预览等）<br>预览md文档效果：在你的md文件编辑界面点击鼠标右键，<code>MPE:打开侧边栏预览</code></p></li><li><p>Markdown Preview Enhanced<br>Markdown预览增强</p></li></ol>]]></content>
    
    
    <summary type="html">VSCode各种配置与问题解决</summary>
    
    
    
    <category term="博客" scheme="https://xusir.fun/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="vscode" scheme="https://xusir.fun/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot3</title>
    <link href="https://xusir.fun/posts/2410021719.html"/>
    <id>https://xusir.fun/posts/2410021719.html</id>
    <published>2024-10-02T17:19:00.000Z</published>
    <updated>2025-03-18T08:04:27.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h1><blockquote><p>文章中创建目录时用的组名使用的是我的如cn.xnj，替换成你自己的如：com.xxx即可。</p></blockquote><p>使用Springboot目的：简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。</p><div class="table-container"><table><thead><tr><th>技术&amp;工具</th><th>版本（or later）</th></tr></thead><tbody><tr><td>springboot</td><td>3.0.5</td></tr><tr><td>maven</td><td>3.6.3 or later 3.6.3 或更高版本</td></tr><tr><td>Tomcat</td><td>10.0+</td></tr><tr><td>Servlet</td><td>9.0+</td></tr><tr><td>JDK</td><td>17+</td></tr></tbody></table></div><h1 id="快速创建一个SpringBoot项目"><a href="#快速创建一个SpringBoot项目" class="headerlink" title="快速创建一个SpringBoot项目"></a>快速创建一个SpringBoot项目</h1><ol><li><p>在idea中创建一个空项目如：springboot-project</p></li><li><p>在该项目下新建一个模块如：springboot-quickstart<br>在这里声明group如：cn.xnj   jdk版本：17  构建系统：maven</p></li><li><p>构建springboot起步依赖和项目结构</p><ol><li>在pom.xml中:1.继承spring-boot为父工程2.导入对应的启动器<font color=red>需要联网</font><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.spring-boot为父工程，所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里是你的组名，项目名，版本号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xnj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-quickstart-01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.导入对应的启动器即可，web开发就是spring-boot-starter-web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-boot-starter-web 为web开发的起步依赖   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建启动类：在类上加<code>@SpringBootApplication</code>注解，在main方法下加上<code>SpringApplication.run(该类名.class,args);</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class,args);<span class="comment">//自动创建ioc容器，启动tomact服务器软件(默认)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>验证：创建一个controller来验证项目创建成功：<br><font color=red>注意：请在启动类的同包或者子包下方写Ioc和Di才能生效</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问测试： http://localhost:8080/hello</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键启动类，运行即可启动springboot项目了，web项目默认8080端口</p></li></ol><h2 id="创建总结"><a href="#创建总结" class="headerlink" title="创建总结"></a>创建总结</h2><ol><li><p><strong>父项目依赖：</strong>每个boot项目都有一个父项目<code>spring-boot-starter-parent</code>，parent的父项目是<code>spring-boot-dependencies</code>，里面已经对各种常用依赖的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标(不需要添加版本)即可！</p></li><li><p><strong>启动器：</strong>一个场景启动器Starter就包含了对应场景下的各种依赖和配置，比如web启动器<code>spring-boot-starter-web</code>就包含了【spring-web,spring-webmvc,tomcat,json处理,servlet的jakarta.annotation-api,logback,slf4j..】等web下的所有依赖和配置。<strong>更多预定义Starter请看官网：</strong>  <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a><br>启动器官方提供的场景：命名为：<code>spring-boot-starter-*</code> 第三方提供场景：命名为：<code>*-spring-boot-starter</code></p></li><li><p><strong>@SpringBootApplication注解：</strong>要理解它导入的以下三个注解：</p><ul><li><code>@SpringBootConfiguration</code>：配置类</li><li><code>@EnableAutoConfiguration</code>：自动加载其他的配置类</li><li><code>@ComponentScan</code>：扫描当前启动类所在的包<ul><li><strong>它会自动扫描当前包及其子包，这就是为什么我们要在启动类所在包下创建ioc/di的原因！！！</strong> </li></ul></li></ul></li></ol><h1 id="SpringBoot3配置文件"><a href="#SpringBoot3配置文件" class="headerlink" title="SpringBoot3配置文件"></a>SpringBoot3配置文件</h1><h2 id="统一配置文件"><a href="#统一配置文件" class="headerlink" title="统一配置文件"></a>统一配置文件</h2><ol><li><p>统一配置文件<br>SpringBoot工程下，进行统一的配置管理，你想设置的任何参数（端口号、项目根路径、数据库连接信息等等)都集中到一个固定位置和命名的配置文件（<code>application.properties或application.yml</code>）中。</p></li><li><p>存放目录<br>目录为<code>src/main/resources</code>是Spring Boot默认的类路径（classpath），配置文件会被自动加载并可供应用程序访问。</p></li><li><p>官网功能参数配置说明<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a><br>application.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#端口</span><br><span class="line">server.port=80 </span><br><span class="line">#根路径</span><br><span class="line">server.servlet.context-path=/test</span><br></pre></td></tr></table></figure></li></ol><h2 id="属性配置文件使用"><a href="#属性配置文件使用" class="headerlink" title="属性配置文件使用"></a>属性配置文件使用</h2><ol><li><p>配置文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># application.properties 为统一配置文件</span><br><span class="line"># 内部包含: 固定功能的key,自定义的key</span><br><span class="line"># 此处的配置信息,我们都可以在程序中@Value等注解读取</span><br><span class="line"></span><br><span class="line"># 固定的key</span><br><span class="line"># 启动端口号</span><br><span class="line">server.port=80 </span><br><span class="line"></span><br><span class="line"># 自定义</span><br><span class="line">spring.jdbc.datasource.driverClassName=com.mysql.cj.jdbc.driver</span><br><span class="line">spring.jdbc.datasource.url=jdbc:mysql:///springboot_01</span><br><span class="line">spring.jdbc.datasource.username=root</span><br><span class="line">spring.jdbc.datasource.password=root</span><br></pre></td></tr></table></figure></li><li><p>读取配置文件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成get set 和 toString方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="YAML配置文件使用"><a href="#YAML配置文件使用" class="headerlink" title="YAML配置文件使用"></a>YAML配置文件使用</h2><p>YAML文件使用缩进和冒号来表示层次结构，使得数据之间的关系更加清晰和直观。这样可以更容易理解和维护复杂的配置，特别适用于深层次嵌套的配置情况。</p><ol><li><p>语法说明：</p><ul><li>数据结构用树形结构呈现，通过缩进来表示层级，</li><li>连续的项目（集合）通过减号 ” - ” 来表示</li><li>键值结构里面的key/value对用冒号 ” : ” 来分隔。</li><li>YAML配置文件的扩展名是yaml 或 yml</li></ul></li><li><p>示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有层次，可以继承的配置文件格式</span></span><br><span class="line"><span class="comment">#key1:</span></span><br><span class="line"><span class="comment">#两个空格key2:  -&gt;key.key</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义属性</span></span><br><span class="line"><span class="comment">#user.name=xnj</span></span><br><span class="line"><span class="comment">#user.age=18</span></span><br><span class="line"><span class="comment">#user.hobby=篮球,足球</span></span><br><span class="line"><span class="comment">#user.account.username=xnj</span></span><br><span class="line"><span class="comment">#user.account.password=root</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xnj</span> <span class="comment">#key:空格value</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">hobby:</span> <span class="comment">#@Value只能读取单个的值，所以不能用@Value()List来接收</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sing</span></span><br><span class="line">  <span class="attr">account:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xnj</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>读取配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取配置的方式</span></span><br><span class="line"><span class="comment"> * 方式一：<span class="doctag">@Value</span>(&quot;$&#123;key&#125;&quot;)</span></span><br><span class="line"><span class="comment"> *      直接在属性上使用<span class="doctag">@Value</span>注解，将配置文件中的值注入到属性中</span></span><br><span class="line"><span class="comment"> *      注意:<span class="doctag">@Value</span>(key路径要写全)</span></span><br><span class="line"><span class="comment"> *      并且:<span class="doctag">@Value</span>只能读取单个的值,不能读取集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方式二批量配置读取：<span class="doctag">@ConfigurationProperties</span>(prefix = &quot;通用前缀&quot;)</span></span><br><span class="line"><span class="comment"> *      实体类：属性名 = 最后一位key的值</span></span><br><span class="line"><span class="comment"> *      即 prefix + 属性名 = 全路径key的值($&#123;xxx.xxx.xxx&#125;)</span></span><br><span class="line"><span class="comment"> *      可以给集合赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span>  <span class="comment">//需要在pom.xml中添加lombok依赖 &lt;version&gt;1.18.30&lt;/version&gt;</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user.account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;user.account.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;user.account.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value(&quot;$&#123;user.hobby&#125;&quot;)//会报错，因为list类型不能直接注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><h3 id="方法一：多配置文件"><a href="#方法一：多配置文件" class="headerlink" title="方法一：多配置文件"></a>方法一：多配置文件</h3><p>springboot的配置文件命名支持：<font color=red>application-别名.文件后缀【application或yaml或yml】</font>的格式。</p><p>如现在有多个生产环节使用的配置文件：</p><ul><li><code>application.yml</code></li><li>开发环境配置：<code>application-dev.yml</code></li><li>测试环境配置：<code>application-test.yml</code></li></ul><p>也可以将不同配置分开写：</p><ul><li>durid连接池配置：<code>application-durid.yml</code></li><li>mybatis配置：<code>application-mybatis.yml</code></li></ul><p>我们在<code>application.yml</code>配置文件中通过<code>spring.profiles.active</code>来指定激活哪些<code>外部</code>配置文件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line"><span class="comment">#    active: dev # 指定单个生效：开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev,mybatis,durid</span> <span class="comment"># 指定多个生效</span></span><br></pre></td></tr></table></figure><br><mark>当外部配置和内部配置有相同key时，外部配置覆盖内部配置生效</mark></p><h3 id="方式二：单文件配置"><a href="#方式二：单文件配置" class="headerlink" title="方式二：单文件配置"></a>方式二：单文件配置</h3><ul><li>使用<code>---</code> 分隔不同环境的配置</li><li>spring.config.activate.on-profile 配置所属的环境</li><li>spring.profiles.active 激活环境</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通用信息，指定生效的环境</span></span><br><span class="line"><span class="comment">#多环境下的共性属性</span></span><br><span class="line"><span class="comment"># 如果特点环境的配置和通用配置冲突，以特点环境的为准</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 当前为开发环境</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot3整合SpringMVC"><a href="#SpringBoot3整合SpringMVC" class="headerlink" title="SpringBoot3整合SpringMVC"></a>SpringBoot3整合SpringMVC</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>因为流程同上面演示的：<a href="https://www.xusir.fun/posts/2410021719.html#快速创建一个SpringBoot项目">2.快速创建一个SpringBoot项目</a>  所以下面只简单讲一些流程关键词来快速回忆</p><ol><li><p>依赖</p><ul><li>父工程：<code>spring-boot-starter-parent</code></li><li>web起步依赖:<code>spring-boot-starter-web</code></li></ul></li><li><p>启动类</p><ul><li>注解：<code>@SpringBootApplication //启动类</code></li><li>启动方法：<code>SpringApplication.run(启动类类名.class,args);</code></li></ul></li><li><p>创建controller并启动测试</p><ul><li><code>@RestController</code>,<code>@RequestMapping(&quot;/xxx&quot;)</code></li><li>运行启动类，打开浏览器访问即可</li></ul></li></ol><h2 id="web相关配置"><a href="#web相关配置" class="headerlink" title="web相关配置"></a>web相关配置</h2><p>官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server</a></p><p>application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># springmvc相关的web配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span> <span class="comment">#端口号</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/boot</span> <span class="comment">#设置项目根路径</span></span><br><span class="line">    <span class="attr">encoding:</span>   <span class="comment">#这两个属性用于配置HTTP请求和响应的字符编码</span></span><br><span class="line">      <span class="attr">charset:</span>  <span class="comment"># 定义字符编码的名称（例如UTF-8）</span></span><br><span class="line">      <span class="attr">enabled:</span>  <span class="comment"># 用于启用或禁用字符编码的自动配置。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span>       <span class="comment">#这两个属性用于配置视图解析器的前缀和后缀。</span></span><br><span class="line">      <span class="attr">prefix:</span>   <span class="comment">#前缀</span></span><br><span class="line">      <span class="attr">suffix:</span>   <span class="comment">#后缀</span></span><br><span class="line">  <span class="attr">web:</span> </span><br><span class="line">    <span class="attr">resources:</span> </span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/wabapp</span> <span class="comment">#配置静态资源的位置</span></span><br><span class="line">      <span class="comment"># 一旦指定自定义路径后，原本默认的将不再生效：public static resources</span></span><br></pre></td></tr></table></figure></p><h2 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h2><p><strong>默认的静态资源路径为：【classpath指的就是src/main/resources】</strong><br><strong>· classpath:/META-INF/resources/</strong><br><strong>· classpath:/resources/</strong><br><strong>· classpath:/static/</strong><br><strong>· classpath:/public/</strong><br>我们只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。 我们习惯会把静态资源放在classpath:/static/ 目录下。在resources目录下创建index.html文件，启动项目，打开浏览器访问:<code>localhost:8080/index.html</code>即可</p><p>覆盖路径:<code>spring.web.resources.static-locations=classpath:/自定义静态文件夹</code></p><h2 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h2><ol><li>引入依赖<br>全局异常处理由mvc提供 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个全局异常管理类<br>类名上加上注解：</p><ul><li><code>@ControllerAdvice</code>或<code>@RestControllerAdvice</code></li><li><code>RestControllerAdvice</code>注解内包含了<code>@ResponseBody</code>注解</li><li>如果给方法上加<code>@ResponseBody</code>注解,则方法中的返回值将作为接口发生异常的返回值。<br>类中的方法接收异常的同时添加注解：</li><li><code>@ExceptionHandler(Exception.class)</code></li><li>注解中为处理指定的异常</li></ul></li><li><p>示例代码   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice // 可以返回逻辑视图 转发和重定向的</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">// @RessponseBody，并且返回json数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当发生算术异常会触发此方法!</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerArithmeticException</span><span class="params">(ArithmeticException e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        System.out.println(<span class="string">&quot;msg:&quot;</span>+msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空指针异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerNullPointerException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HTTP 消息不可读异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerJsonDateException</span><span class="params">(HttpMessageNotReadableException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有异常都会触发此方法!但是如果有具体的异常处理Handler!</span></span><br><span class="line"><span class="comment">     * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment">     * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment">     *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><ol><li><p>定义拦截器【创建类，实现HandlerInterceptor接口，重写preHandle方法】</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,  Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,    Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,   Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册拦截器【创建配置类，注册自定义的拦截器】</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>项目情景示例<br>一个SpringBoot微头条项目，对文章发布相关的内容(请求以headline开头的)全部拦截，必须先检测登录和token是否过期，下面是它的拦截器实现和注册部分</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.interceptor;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtHelper jwtHelper;<span class="comment">//生成，解析，检验token的工具类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,    HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//检测token是否过期 true 过期  false 未过期</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">expiration</span> <span class="operator">=</span> jwtHelper.isExpiration(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//未过期放行</span></span><br><span class="line">        <span class="keyword">if</span> (!expiration) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过期拦截 返回504的json数据</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span>  Result.build(<span class="literal">null</span>, ResultCodeEnum.NOTLOGIN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应体</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(result);</span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.xnj.config;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginInterceptor loginInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginInterceptor).addPathPatterns(<span class="string">&quot;/ headline/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringBoot3整合Durid数据源"><a href="#SpringBoot3整合Durid数据源" class="headerlink" title="SpringBoot3整合Durid数据源"></a>SpringBoot3整合Durid数据源</h1><ol><li><p>前言<br>目前durid只支持springboot2，兼容springboot3需要自己写一点配置</p></li><li><p>引入依赖<code>pom.xml</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/ maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xnj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-durid-02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  web开发的场景启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件<code>application.yml</code></p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#使用durid连接池</span></span><br><span class="line">    <span class="comment">#username: root   #用户名 如果是springboot2可以这么写，springboot3不行</span></span><br><span class="line">    <span class="comment">#password: 123456</span></span><br><span class="line">    <span class="comment"># Druid的其他属性配置 springboot3整合情况下,数据库连接信息必须在Druid属性下!</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/studb</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池的最小空闲数量</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池最大连接数量</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery  检测连接是否有效。</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最 小生存时间)</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">30000</span></span><br><span class="line">      <span class="comment"># 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说  oracle,在mysql下建议关闭。</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在   Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>pojo和controller</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from students&quot;</span>;</span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt; (Student.class));</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行测试总结问题<br>这里使用的<code>druid-spring-boot-3-starter</code><mark>1.2.22 已经能完美运行</mark><br>如果<code>druid-spring-boot-3-starter</code>使用的是更低的版本，将会报以下错误：</p><ul><li><code>Cannot load driver class: org.h2.Driver</code></li><li>原因是缺少了自动装配的文件</li></ul><p>解决办法为：手动在resources目录下创建<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，文件内容如下!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringBoot3整合MyBatis"><a href="#SpringBoot3整合MyBatis" class="headerlink" title="SpringBoot3整合MyBatis"></a>SpringBoot3整合MyBatis</h1><h2 id="快速整合Mybatis步骤"><a href="#快速整合Mybatis步骤" class="headerlink" title="快速整合Mybatis步骤"></a>快速整合Mybatis步骤</h2><ol><li><p>创建项目引入依赖【pom.xml】【对比上面druid只是加了一个mybatis-spring-boot-starter启动依赖】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xnj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-mybatis-03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  web开发的场景启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis 启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置【application.yml】</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># druid连接池配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/studb?useUnicode=true&amp;characterEncoding=utf-8&amp;</span>   <span class="string">useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis配置  不再需要 mybatis-config.xml配置文件了</span></span><br><span class="line"><span class="comment"># mapperxml文件位置  settings的配置 别名的配置.....</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span>  <span class="comment">#指定mapperxml文件位置</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.xnj.pojo</span>  <span class="comment">#别名的配置</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  <span class="comment">#开启驼峰命名规则</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span>  <span class="comment">#开启自动映射</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.slf4j.Slf4jImpl</span>  <span class="comment">#开启日志</span></span><br></pre></td></tr></table></figure></li><li><p>启动类，实体类，controller<br>启动类Main：cn.xnj</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@MapperScan(&quot;cn.xnj.mapper&quot;)//mapper接口所在位置 这样的话 就不用在每个mapper接口上加上  @Mapper注解了</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类Student：cn.xnj.pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentController：cn.xnj.controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><font color=red>mapper和mapper.xml</font></strong><br>StudentMapper：cn.xnj.mapper</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果启动类使用了@MapperScan(&quot;cn.xnj.mapper&quot;)注解这里就可以不写@Mapper注解</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Select(&quot;select * from students&quot;) 简单的sql也可以直接用注解</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> StudentMapper.xml：resources/cn/xnj/mapper<br> <strong>注意：前面配置文件中如果指定了mapperxml文件位置<code>mapper-locations: classpath:/mapper/*.xml</code>,那这里包路径可以按配置文件来。 <code>resources/mapper</code></strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        select * from students</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="声明式事务的整合"><a href="#声明式事务的整合" class="headerlink" title="声明式事务的整合"></a>声明式事务的整合</h2><ol><li><p>导入依赖【pom.xml】【上述整合mybatis步骤中已经导入】</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>@Transactional</code>注解即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span><span class="comment">// 开启事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> studentMapper.deleteById(id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;<span class="comment">// 模拟异常  报错 / by zero  事务回滚</span></span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="AOP整合配置"><a href="#AOP整合配置" class="headerlink" title="AOP整合配置"></a>AOP整合配置</h2><ol><li><p>导入依赖【pom.xml】</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个类直接在里面使用aop注解即可【cn.xnj.advice】</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">//@Order(1)// 配置优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.xnj.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span><span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">// joinPoint = execution(List cn.xnj.service.StudentService.getAll())</span></span><br><span class="line">        System.out.println(<span class="string">&quot;joinPoint = &quot;</span>+ joinPoint);</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getSimpleName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(className+<span class="string">&quot;::&quot;</span>+methodName+<span class="string">&quot;开始执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringTask定时任务"><a href="#SpringTask定时任务" class="headerlink" title="SpringTask定时任务"></a>SpringTask定时任务</h1><p>SpringTask是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。具体实现如下。</p><ol><li><p><strong>启动定时任务</strong></p><ul><li>导入maven坐标<code>spring-context</code>(已被包含于spring-boot-starter内了)</li><li>在springboot<strong>启动类</strong>上加上<code>@EnableScheduling</code>注解,如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xnj.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WebApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>编写定时逻辑/任务类</strong><br>创建<code>com.xnj.web.task.MyTask</code>定时任务类，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">// 定时任务类需要实例化并交给spring容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注释里的cron值表示每秒都执行方法内的逻辑</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;* * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>知识点-cron表达式</strong><br>SpringBoot中的cron表达式语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌───────────── second (0-59)</span><br><span class="line">│ ┌───────────── minute (0 - 59)</span><br><span class="line">│ │ ┌───────────── hour (0 - 23)</span><br><span class="line">│ │ │ ┌───────────── day of the month (1 - 31)</span><br><span class="line">│ │ │ │ ┌───────────── month (1 - 12) (or JAN-DEC)</span><br><span class="line">│ │ │ │ │ ┌───────────── day of the week (0 - 7)</span><br><span class="line">│ │ │ │ │ │          (0 or 7 is Sunday, or MON-SUN)</span><br><span class="line">│ │ │ │ │ │</span><br><span class="line">* * * * * *</span><br></pre></td></tr></table></figure><p>如:2024年04月13日上午9点整对应的cron表达式为：<code>0 0 9 13 04 ? 2024</code><br>附上cron表达式在线生成器网站：<a href="https://cron.ciding.cc/">https://cron.ciding.cc/</a></p></li></ol><h1 id="异步执行方法注解"><a href="#异步执行方法注解" class="headerlink" title="异步执行方法注解"></a>异步执行方法注解</h1><p>在实现接口的方法上加上<code>@Async</code>注解，启动类上添加<code>@EnableAsync</code>注解即可，这样当执行该方法时，springboot会帮我们自动创建一个新的线程来异步执行该方法<br>应用场景如，<code>添加浏览历史</code></p><h1 id="SpringBoot3项目打包和运行"><a href="#SpringBoot3项目打包和运行" class="headerlink" title="SpringBoot3项目打包和运行"></a>SpringBoot3项目打包和运行</h1><h2 id="添加打包插件"><a href="#添加打包插件" class="headerlink" title="添加打包插件"></a>添加打包插件</h2><blockquote><p>在Spring Boot项目中添加spring-boot-maven-plugin插件是为了支持将项目打包成可执行的可运行jar包。如果不添加spring-boot-maven-plugin插件配置，使用常规的java -jar命令来运行打包后的Spring Boot项目是无法找到应用程序的入口点，因此导致无法运行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="执行打包"><a href="#执行打包" class="headerlink" title="执行打包"></a>执行打包</h2><p>在idea中点击侧边栏maven，选择要打包的项目，点击生命周期中的<code>package</code>即可<br>打包完成后，在项目的target目录下即可看到打包好的jar包</p><ul><li><code>项目/target/项目名-版本号.jar</code></li></ul><h2 id="命令启动和参数声明"><a href="#命令启动和参数声明" class="headerlink" title="命令启动和参数声明"></a>命令启动和参数声明</h2><p><code>java -jar</code>命令用于在<code>Java环境</code>中执行可执行的<code>JAR文件</code>。下面是关于java -jar命令的说明：</p><ul><li>在你jar包存放的位置打开cmd输入</li><li>命令格式：<code>java -jar  [选项] [参数] &lt;jar文件名&gt;</code></li><li>在运行的窗口按： <code>Ctrl + c</code>停止</li></ul><ol><li><p>设置系统属性 <code>-D&lt;name&gt;=&lt;value&gt;</code>：可以通过System.getProperty()方法在应用程序中获取该属性值。例如：<code>java -jar -Dserver.port=8888 springboot-mybatis-03-1.0-SNAPSHOT.jar</code>。</p></li><li><p>设置JVM参数，例如内存大小、垃圾回收策略等 <code>-X</code>。常用的选项包括：</p><ul><li><code>-Xmx&lt;size&gt;</code>：设置JVM的最大堆内存大小，例如 <code>-Xmx512m</code> 表示设置最大堆内存为512MB。</li><li><code>-Xms&lt;size&gt;</code>：设置JVM的初始堆内存大小，例如 <code>-Xms256m</code> 表示设置初始堆内存为256MB。</li></ul></li><li><p>指定Spring Boot的激活配置文件 <code>-Dspring.profiles.active=&lt;profile&gt;</code>：<br> 可以通过<code>application-&lt;profile&gt;.properties</code>或<code>application-&lt;profile&gt;.yml</code>文件来加载相应的配置。例如：<code>java -jar -Dspring.profiles.active=dev myapp.jar</code>。</p></li><li><p>多个配置直接使用空格隔开就好</p><ul><li>例如：<code>java -jar -Dserver.port=8080 -Dspring.profiles.active=dev myapp.jar</code></li></ul></li><li><p><strong>注意： -D 参数必须要在jar之前！否者不生效！</strong></p></li></ol><h2 id="SpringBoot属性配置"><a href="#SpringBoot属性配置" class="headerlink" title="SpringBoot属性配置"></a>SpringBoot属性配置</h2><p>打包好的项目是一个jar包，如果要改配置怎么办？<br>方式一： 命令行参数方式  <code>--键=值</code></p><ul><li>示例：希望项目运行的端口为 9999</li><li><code>java -jar big-event-1.0-SNAPSHOT.jar --server.port=9999</code></li></ul><p>方式二：环境变量方式</p><ul><li>在环境变量中添加属性  server.port  8888</li><li>环境变量改变后，需要重启终端。</li></ul><p>方式三： 外部配置文件方式</p><ul><li>在jar包所在的目录下提供一个<code>application.yml</code>配置文件</li><li>在这里面可以批量的修改配置属性，在项目启动时，会自动读取该配置文件里的配置。 </li></ul><p>关于配置的优先级</p><ul><li>命令行参数 &gt; 操作系统环境变量 &gt; jar包所在目录下的appliaction.yml &gt; 项目resources目录下的appliaction.yml</li></ul>]]></content>
    
    
    <summary type="html">SpringBoot3框架复习</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://xusir.fun/tags/springboot/"/>
    
    <category term="spring" scheme="https://xusir.fun/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat</title>
    <link href="https://xusir.fun/posts/2409261624.html"/>
    <id>https://xusir.fun/posts/2409261624.html</id>
    <published>2024-09-26T16:24:00.000Z</published>
    <updated>2025-03-18T08:04:27.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装和配置jdk"><a href="#安装和配置jdk" class="headerlink" title="安装和配置jdk"></a>安装和配置jdk</h1><p><strong>Tomcat</strong>的工作需要<strong>java环境</strong>，因此安装Tomcat前先做好准备工作：安装jdk。</p><ul><li>window：按住 <code>win+R</code>输入cmd,打开命令提示符界面</li><li>输入：<code>java -version</code> 能看到java版本信息说明jdk安装和环境配置成功</li></ul><h1 id="下载和安装Tomcat"><a href="#下载和安装Tomcat" class="headerlink" title="下载和安装Tomcat"></a>下载和安装Tomcat</h1><ol><li><p>进入Apache Tomcat的官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p></li><li><p>左侧菜单导航中<strong>Download</strong>下面是Tomcat的几个最新版本，点击想要了解的版本，即可在右侧看到对该版本的特性介绍和对比上版本的变化。</p><ul><li>建议不要选择测试版(beta),新版测试版可能不稳定</li></ul></li><li><p>已tomcat10.1版本为例，在右侧界面中往下滑，在Core下选择选择<strong>64位Windows的zip</strong>下载。</p><ol><li>通过压缩包方式下载可以免安装，</li><li>下载完成后选择想要的位置解压，<strong>解压目录就是安装目录</strong></li><li>这个安装目录会用于<strong>配置环境</strong></li></ol><p><img src="https://picbed.xusir.fun/post_img/tomcat/tomcat_01.webp" alt="tomcat下载图片"></p></li><li><p>例如我是在D盘创建一个<code>Develop</code>文件夹，用来存放一些安装的app，将下载的tomcat压缩包在解压到该文件夹中</p></li><li><p>解压好的<code>apache-tomcat-10.1.30/</code>目录下包含如下文件目录</p><ul><li>bin</li><li>conf</li><li>lib</li><li>logs</li><li>temp</li><li>webapps</li><li>works</li><li>此外还有一些其他相关文件</li></ul></li></ol><h1 id="配置Tomcat环境"><a href="#配置Tomcat环境" class="headerlink" title="配置Tomcat环境"></a>配置Tomcat环境</h1><ol><li><p>复制安装目录<br>复制我们tomcat安装目录，如：<code>D:\Develop\apache-tomcat-10.1.30</code></p></li><li><p>右击“我的电脑” &gt;&gt; 选择“属性” &gt;&gt; 单击左侧栏 “高级系统设置” &gt;&gt;“高级”&gt;&gt;“环境变量”，能看到用户变量和系统变量</p><ul><li>用户变量：配置的环境仅当前用户生效(不推荐)</li><li><p>系统变量：全局生效(推荐)</p><p><img src="https://picbed.xusir.fun/post_img/tomcat/tomcat_02.webp" alt="tomcat环境配置"></p></li></ul></li><li><p>在<strong>系统变量</strong>这一栏中，配置Tomcat的环境变量</p><ol><li><p><strong>点击新建，新建<code>CATALINA_BASE</code>变量</strong></p><ul><li><strong>变量名</strong>：CATALINA_BASE</li><li><strong>变量值</strong>(填Tomcat的安装目录，刚刚复制好的目录)：D:\Develop\apache-tomcat-10.1.30</li><li>点击确定</li></ul></li><li><p><strong>点击新建,新建<code>CATALINA_HOME</code>变量</strong></p><ul><li><strong>变量名</strong>：CATALINA_HOME</li><li><strong>变量值</strong>(填Tomcat的安装目录，刚刚复制好的目录)：D:\Develop\apache-tomcat-10.1.30</li><li>点击确定</li></ul></li><li><p><strong>点击新建,新建<code>CATALINA_TMPDIR</code>变量</strong></p><ul><li><strong>变量名</strong>：CATALINA_TMPDIR</li><li><strong>变量值</strong>(填Tomcat的安装目录，刚刚复制好的目录后面加上\temp)：D:\Develop\apache-tomcat-10.1.30\temp</li><li>点击确定</li></ul></li><li><p><strong>在系统变量下找到<code>Path</code>变量，点击编辑,再点击新建</strong></p><ul><li><strong>输入</strong>(填Tomcat的安装目录，刚刚复制好的目录后面加上\bin)：D:\Develop\apache-tomcat-10.1.30\bin</li><li>点击确定</li></ul></li><li><p>然后一直点击确定，确保变量已经保存。<br>不要点取消或点X，一直点确定会保存并一步步退出</p></li></ol></li></ol><h1 id="检查Tomcat环境配置成功"><a href="#检查Tomcat环境配置成功" class="headerlink" title="检查Tomcat环境配置成功"></a>检查Tomcat环境配置成功</h1><p>1、检测Tomcat是否可以启动成功，同时按下<code>Win+R</code>键，然后在弹出的对话框中输入<code>cmd</code>并按回车键。在命令提示符界面中输入<code>startup</code>并回车，打开Tomcat。如图：<br><img src="https://picbed.xusir.fun/post_img/tomcat/tomcat_03.webp" alt="启动tomcat"></p><p>2、不要关闭刚刚启动的Tomcat，打开浏览器在地址栏输入“localhost:8080”或者“127.0.0.1:8080”回车，出现Apache Tomcat主页说明Tomcat已经成功启动。如图：<br><img src="https://picbed.xusir.fun/post_img/tomcat/tomcat_04.webp" alt="tomcat界面"></p><p>3、回到tomcat提示符界面，同时按下<code>Ctrl+C</code>即可停止Tomcat</p><h1 id="Tomcat中文乱码"><a href="#Tomcat中文乱码" class="headerlink" title="Tomcat中文乱码"></a>Tomcat中文乱码</h1><p>原因和解决办法如下：<br>1、字符编码设置不正确<br>   Tomcat默认的字符编码是ISO88591，如果请求和响应的字符编码与Tomcat默认的字符编码不一致，就可能出现乱码。<br>   解决方法：在Tomcat的配置文件server.xml中，找到<Connector>标签，添加URIEncoding属性，设置为正确的字符编码，URIEncoding=”UTF8”。</p><p>2、页面字符编码设置不正确<br>   如果JSP或HTML页面中的字符编码设置与实际编码不一致，也会导致乱码。<br>   解决方法：在JSP或HTML页面的头部，使用<meta>标签设置正确的字符编码，<meta httpequiv="ContentType" content="text/html; charset=UTF8">。</p><p>3、数据库连接字符编码设置不正确<br>   如果使用JDBC连接数据库时，没有设置正确的字符编码，可能导致从数据库读取的数据出现乱码。<br>   解决方法：在JDBC连接字符串中，添加characterEncoding属性，设置为正确的字符编码，jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8。</p><p>4、修改conf/logging.properties<br>   <code>java.util.logging.ConsoleHandler.encoding = UTF-8</code>修改为<code>GBK</code></p><p>5、修改bin/catalina.bat<br>   <code>set JAVA_OPTS=-Xms512m -Xmx1024m -XX:MaxPermSize=1024m -Dfile.encoding=UTF-8</code></p>]]></content>
    
    
    <summary type="html">Tomcat的安装和环境配置</summary>
    
    
    
    <category term="Tomcat" scheme="https://xusir.fun/categories/Tomcat/"/>
    
    
    <category term="tomcat" scheme="https://xusir.fun/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="https://xusir.fun/posts/2409261458.html"/>
    <id>https://xusir.fun/posts/2409261458.html</id>
    <published>2024-09-26T14:58:00.000Z</published>
    <updated>2025-03-18T08:04:27.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h1><p>SSM框架构建起单体项目的技术栈需求！其中的SpringMVC负责表述层（控制层）实现简化！<br>SpringMVC的作用主要覆盖的是表述层，例如：<br>   请求映射、数据输入、视图界面、请求分发、表单回显、会话控制、过滤拦截、异步交互、文件上传、文件下载、数据校验、类型转换，等等等。<br>   总结来说就是：<font color=red>简化前端参数接收(形参列表)，简化后端数据响应(返回值)…</font></p><p>创建springwebmvc项目要记得转成maven/web程序</p><ul><li>改变项目打包方式，pom.xml:<code>&lt;packaging&gt;war&lt;/packaging&gt;</code></li><li>并创建这些目录:<code>(src/main/webapp/WEB-INF/web.xml)</code></li></ul><p>或者idea中直接搜索并安装<code>JBLJavaToWeb</code>插件，右键项目点击JBLJavaToWeb即可自动改成web项目格式</p><h1 id="快速了解-入门案例"><a href="#快速了解-入门案例" class="headerlink" title="快速了解(入门案例)"></a>快速了解(入门案例)</h1><ol><li>准备项目<br>a.创建项目<br>   springmvc-quickstart<br>   <strong>注意将项目转成：maven/web程序</strong><br>b.导入依赖   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet.api</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">servlet.api</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springioc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- web相关依赖  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在 Spring Web MVC 6 中，Servlet API 迁移到了 Jakarta EE API，因此在配置   DispatcherServlet 时需要使用</span></span><br><span class="line"><span class="comment">         Jakarta EE 提供的相应类库和命名空间。错误信息 “‘org.springframework.web.servlet.  DispatcherServlet’</span></span><br><span class="line"><span class="comment">         is not assignable to ‘javax.servlet.Servlet,jakarta.servlet.Servlet’” 表明你  使用了旧版本的</span></span><br><span class="line"><span class="comment">         Servlet API，没有更新到 Jakarta EE 规范。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 pom.xml 中引入 Jakarta EE Web API 的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet.api&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- springwebmvc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Controller层 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">     <span class="comment">//handlers</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * handler就是controller内部的具体方法</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@RequestMapping</span>(&quot;/springmvc/hello&quot;) 就是用来向handlerMapping中注册的方法注解!</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@ResponseBody</span> 代表向浏览器直接返回数据!不去找视图解析器</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/springmvc/hello&quot;)</span></span><br><span class="line">     <span class="meta">@ResponseBody</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;HelloController.hello&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;hello springmvc!!&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>SpringMVC核心配置类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;cn.xnj.controller&quot;)</span> <span class="comment">//扫描controller包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerMapping <span class="title function_">handlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title function_">handlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>SpringMVC环境搭建<br>对于基于java的Spring配置的应用程序，建议这样做，如下示例：<br>创建一个类并固定继承<code>AbstractAnnotationConfigDispatcherServletInitializer</code><br>它可以被web项目加载，会初始化ioc容器，会设置dispatherServlet的地址 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SpringMVC提供的接口,是替代web.xml的方案,更方便实现完全注解方式ssm处理!</span></span><br><span class="line"><span class="comment">// Springmvc框架会自动检查当前类的实现类,会自动加载 getRootConfigClasses /     getServletConfigClasses 提供的配置类</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> getServletMappings 返回的地址 设置DispatherServlet对应处理的地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInitializer</span> <span class="keyword">extends</span>    <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定service / mapper层的配置类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定springmvc的配置类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; MvcConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置dispatcherServlet的处理路径!</span></span><br><span class="line"><span class="comment">   * 一般情况下为 / 代表处理所有请求!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试<br>a.点击idea上方<code>CurrentFile(当前文件)</code><br>b.点击<code>(Edit Configurations)当前配置</code><br>c.在弹出窗口点击左上角<code>+</code>号，选择<code>(Tomcat Server)Tomcat服务器 (Local)本地</code><br>d.点击右下角红色感叹号<code>(Fix)修复</code>，部署当前项目<code>springmvc-quickstart:war exploded</code><br>e.点击<code>OK</code>,然后运行当前项目<br>f.在浏览器输入：<code>localhost:8080/springmvc/hello</code><br>g.能看到界面<code>hello springmvc!!</code>说明成功。</p><p>注意<code>tomcat</code>应该为<code>10+</code>的版本！才支持Jakarta EE API!</p></li></ol><h1 id="SpringMVC接收数据"><a href="#SpringMVC接收数据" class="headerlink" title="SpringMVC接收数据"></a>SpringMVC接收数据</h1><h2 id="访问路径设置—-RequestMapping"><a href="#访问路径设置—-RequestMapping" class="headerlink" title="访问路径设置—@RequestMapping()"></a>访问路径设置—@RequestMapping()</h2><p><code>@RequestMapping</code>注解的作用就是将请求的 URL 地址和处理请求的方式（handler方法）关联起来，建立映射关系。SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p><p>以前写<code>@WebServlet(&quot;&quot;)</code>时，里面的路径要求必须用<code>/</code>开头，<code>@RquestMapping(&quot;&quot;)</code>则并不强制要求，你可以<strong>用</strong><code>/</code>开头：<code>/user/login</code>、也可以<strong>不用</strong><code>/</code>开头：<code>user/login</code></p><ol><li><p><strong>精准地址</strong><br>在@RequestMapping中，可以支持一个或多个地址：<code>&#123;&quot;地址1&quot;,&quot;地址2&quot;&#125;</code></p><ul><li>一个地址：<code>@RequestMapping(&quot;/springmvc/hello&quot;)</code></li><li>多个地址：<code>@RequestMapping(&#123;&quot;/user/login&quot;,&quot;/user/regist&quot;&#125;)</code></li></ul></li><li><p><strong>模糊地址</strong><br>在@RequestMapping中，地址可以支持模糊路径匹配,通过使用通配符，匹配多个类似的地址。</p><ul><li><code>*</code>：表示任意一层字符串<ul><li>/user/* 可以表示: user/a 或 user/aaa ，但不能表示： /user/a/b</li><li>/a/*/b  表示地址以a开头，中间模糊，后面b结尾，如：/a/c/b 但不能表示：/a/c/d/b</li></ul></li><li><code>**</code>：任意层任意字符串 <ul><li>/user/** 既可以表示 user/a 和 user/a/b  还可以表示更多层如：/user/a/b/c/d</li></ul></li></ul></li><li><p><strong>类和方法上的区别</strong><br>加在类上用于提取通用的访问地址：<br>提取前：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/regist&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="string">&quot;regist&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取后：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;regist&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="string">&quot;regist&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加在方法上就是具体的handler地址，访问：<strong>类地址+方法地址</strong></p></li><li><p><strong>请求方式指定_1</strong><br>客户端的http请求分为多种类型：<code>(get | post | put | delete)</code><br>默认情况使用@RequestMapping(“login”),只要地址正确，任何请求方式都可以访问<br>我们可以使用注解的同时指定请求的方式：<strong>@RequestMapping(value=”地址”,method=”请求方式”)</strong></p><ul><li>get：<code>@RequestMapping(value = &quot;&quot;,method = RequestMethod.GET)</code></li><li>post：<code>@RequestMapping(value = &quot;&quot;,method = RequestMethod.POST)</code></li><li>put：<code>@RequestMapping(value = &quot;&quot;,method = RequestMethod.PUT)</code></li><li>delete：<code>@RequestMapping(value = &quot;&quot;,method = RequestMethod.DELETE)</code></li><li>如果有不符合请求方式的请求过来，会报<code>405</code>异常</li></ul></li><li><p><strong>请求方式指定_2</strong><br>我们也可以使用@RequestMapping的HTTP方法特定快捷方式变体:</p><ul><li>get：<code>@GetMapping(&quot;地址&quot;)</code></li><li>post；<code>@PostMapping(&quot;地址&quot;)</code></li><li>put：<code>@PutMapping(&quot;地址&quot;)</code></li><li>delete：<code>@DeleteMapping(&quot;地址&quot;)</code></li><li>注意：这几个注解不能用在类上!!</li></ul></li></ol><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a><font color=red>接收参数</font></h2><h3 id="param和json参数比较"><a href="#param和json参数比较" class="headerlink" title="param和json参数比较"></a>param和json参数比较</h3><p>Param: key=value &amp; key=value<br>JSON: {key:value,key:value}</p><ol><li>参数编码：<br> param 类型的参数会被编码为 ASCII 码。例如，假设 <code>name=john doe</code>，则会被编码为 <code>name=john%20doe</code>。而 JSON 类型的参数会被编码为 UTF-8。</li><li>参数顺序：<br> param 类型的参数没有顺序限制。但是，JSON 类型的参数是有序的。JSON 采用键值对的形式进行传递，其中键值对是有序排列的。</li><li>数据类型：<br> param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。</li><li>嵌套性：<br> param 类型的参数不支持嵌套。但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。</li><li>可读性：<br> param 类型的参数格式比 JSON 类型的参数更加简单、易读。但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。</li></ol><p>总结：单一的数据传递适合使用param类型参数，复杂的数据传递适合使用json，我们常常对get请求使用param参数，post请求使用json参数。</p><h3 id="param参数接收"><a href="#param参数接收" class="headerlink" title="param参数接收"></a>param参数接收</h3><ol><li><p>直接接收<br>客户端请求：<code>localhost:8080/param/data?name=zhangsan&amp;age=18</code><br>handler接收参数：<br>只要形参数名和类型与传递参数相同，即可自动接收!，可以不传递值，不会报错。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">data</span><span class="params">(String name,Integer age)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;,age:&quot;</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@RequestParam注解指定<br>使用<code>@RequestParam()</code>可以：</p><ul><li>指定任意的请求参数名：<code>value = &quot;指定参数名&quot;</code></li><li>要求请求参数必须传递，要求不必须传递：<code>required = true | false</code>，默认true必须传</li><li>为请求参数提供默认值：<code>defaultValue = &quot;默认值&quot;</code></li><li>如果传递参数名错误,必须传的参数没传：<code>400</code>异常</li></ul><p>客户端请求：<code>localhost:8080/param/data1?name=zhangsan&amp;page=1</code>,且name必须传递，page可以不传递，如果不传递值，默认值为1<br>handler接收参数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/data1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">data1</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;name&quot;)</span> String username,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(required = false,defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,page:&quot;</span>+page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特殊场景接收参数<br>a.一名多值<br>前端多选框，递交数据传递的参数就是一个key对应多个值，可以使用集合来接收<br>客户端请求：<code>http://localhost:8080/param/data2?hobby=sing&amp;hobby=dance&amp;hobby=ball</code><br>handler接收参数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/data2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hobbies</span><span class="params">(<span class="meta">@RequestParam(&quot;hobby&quot;)</span> List&lt;String&gt; hobbies)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hobbies:&quot;</span>+hobbies);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;oK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> b.实体对象接收：<strong>要求，实体属性名=前端传递参数名</strong><br> 客户端请求：<code>localhost:8080/data3?name=zhangsan&amp;age=18</code><br> 定义一个实体类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//实体属性名=前端传递参数名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> aage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加get,set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> handler接收参数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;data3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">data3</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路径参数接收"><a href="#路径参数接收" class="headerlink" title="路径参数接收"></a>路径参数接收</h3><p><code>@PathVariable</code> 注解允许将 URL 中的占位符映射到控制器方法中的参数<br>使用步骤：1.设置动态路径、2.接收动态路口参数。如现在需要将<code>/user/&#123;id&#125;</code>路径的<code>&#123;id&#125;</code>作为参数映射到controller的一个方法参数中：<strong>【@PathVariable(value=”方法参数名”)，应于路径参数名相同】</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;getUser&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="json参数接收"><a href="#json参数接收" class="headerlink" title="json参数接收"></a>json参数接收</h3><p>前端传递 JSON 数据时，Spring MVC 框架可以使用 <code>@RequestBody</code> 注解来将 JSON 数据转换为 Java 对象。@RequestBody 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。其使用方式和示例代码如下：</p><ol><li>前端发送JSON数据(示例)如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>定义一个用于接收 JSON 数据的 Java 类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 补充 get set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在控制器中，使用<strong>@RequestBody</strong>注解来接收 JSON 数据，并将其转换为 Java 对象，例如： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/student/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>问题：此时进行测试，发现报错：<font color=red>HTTP状态 415 - 不支持的媒体类型</font><br>原因是不支持json数据类型处理，没有json类型处理的工具，Java原生的api，只支持路径参数和param参数 request.getParameter(“key”); param 不支持 json，json本就是前端的数据格式</li><li>解决：<br>a.导入json处理的依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>b.springmvc handlerAdpater配置json转化器,配置类需要明确：<br>在你的webmvc配置类加上注解<code>@EnableWebMvc</code>，并不用再写，<code>RequestMappingHandlerMapping</code>和<code>RequestMappingHandlerAdapter的bean</code>了 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj.controller&quot;)</span><span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span>  &#123;</span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public RequestMappingHandlerMapping handlerMapping()&#123;</span></span><br><span class="line"><span class="comment">        return new RequestMappingHandlerMapping();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public RequestMappingHandlerAdapter handlerAdapter()&#123;</span></span><br><span class="line"><span class="comment">        return new RequestMappingHandlerAdapter();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>@EnableWebMvc注解效果等同于在 XML 配置中，可以使用 <mvc:annotation-driven> 元素！</li></ol><h3 id="接收Cookie数据"><a href="#接收Cookie数据" class="headerlink" title="接收Cookie数据"></a>接收Cookie数据</h3><p>使用 <code>@CookieValue</code> 注释将 HTTP Cookie 的值绑定到控制器中的方法参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cookie&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/data&quot;)</span><span class="comment">//取得cookie的值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">data</span><span class="params">(<span class="meta">@CookieValue(&quot;cookieName&quot;)</span> String value)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value:&quot;</span>+value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/save&quot;)</span><span class="comment">//保存cookie的值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;cookieName&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="接收请求头数据"><a href="#接收请求头数据" class="headerlink" title="接收请求头数据"></a>接收请求头数据</h3><p>使用 <code>@RequestHeader(value=&quot;请求头的名字&quot;)</code> 批注将请求标头绑定到控制器中的方法参数。<br>如以下带有标头的请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host                    localhost:<span class="number">8080</span></span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span></span><br><span class="line">Accept-Language         fr,en-gb;q=<span class="number">0.7</span>,en;q=<span class="number">0.3</span></span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-<span class="number">8859</span>-<span class="number">1</span>,utf-<span class="number">8</span>;q=<span class="number">0.7</span>,*;q=<span class="number">0.7</span></span><br><span class="line">Keep-Alive              <span class="number">300</span></span><br></pre></td></tr></table></figure><br>获取Host示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/header&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">data</span><span class="params">(<span class="meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;host:&quot;</span>+host);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;host:&quot;</span>+host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="SpringMVC响应数据"><a href="#SpringMVC响应数据" class="headerlink" title="SpringMVC响应数据"></a>SpringMVC响应数据</h1><h2 id="页面跳转控制"><a href="#页面跳转控制" class="headerlink" title="页面跳转控制"></a>页面跳转控制</h2><h3 id="返回模板视图"><a href="#返回模板视图" class="headerlink" title="返回模板视图"></a>返回模板视图</h3><p>这里以jsp例子来示例：</p><ol><li>准备jsp页面和依赖<br>pom.xml <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>jsp页面：创建webapp/WEB-INF/下，避免被外界直接访问到<br>这里示例创建在/WEB-INF/views/index.jsp <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;font color=<span class="string">&quot;red&quot;</span>&gt;hello jsp:$&#123;msg&#125;&lt;/font&gt;&lt;br&gt;</span><br><span class="line">    $&#123;msg&#125;-》相当于后台的vue格式：&#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>创建配置类并配置jsp视图解析器 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//视图解析器，指定了视图的前缀和后缀</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 配置 Spring MVC 应用的初始化 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;MvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>handler返回视图 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jsp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JspViewsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">indexJsp</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello world!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试<br>部署本地tomcat访问<a href="http://localhost:8080/jsp/index">http://localhost:8080/jsp/index</a></li></ol><h3 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h3><p>在 Spring MVC 中，Handler 方法返回值来实现快速转发，可以使用 <code>redirect</code> 或者 <code>forward</code>关键字来实现重定向。<br>先说总结：</p><ul><li><strong>转发：客户端上方的访问地址不会发生变化</strong>，使用<code>forward</code>关键字</li><li><strong>重定向：客户端上方的访问地址会变化</strong>，使用<code>redirect</code>关键字</li><li><strong>语法：</strong>将方法返回值设置为<code>String</code>,返回值：<code>关键字:/路径</code></li><li><strong>注意：</strong>方法或类上都不能用@ResponseBody注解</li></ul><p>接4.1.1案例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发  ：返回字符串前  forward:/转发地址</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">forward</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;forward...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/jsp/index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问：localhost:8080/jsp/forward，地址不变，返回index.jsp页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向 : 返回字符串前  redirect:/重定向的地址</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/redirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;redirect...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/jsp/index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 访问：localhost:8080/jsp/redirect，地址变为：localhost:8080/jsp/index，返回index.jsp页面</span></span><br></pre></td></tr></table></figure></p><h2 id="返回JSON数据"><a href="#返回JSON数据" class="headerlink" title="返回JSON数据"></a>返回JSON数据</h2><ol><li><p><strong>导入jackson依赖</strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>添加json数据转换器</strong><br>在mvc配置类上添加注解：<code>@EnableWebMvc</code></p></li><li><p><strong>@ResponseBody</strong></p><ol><li>在<strong>方法上</strong>使用@ResponseBody注解<br>在方法上使用 @ResponseBody注解，用于将方法返回的对象序列化为 JSON 或 XML 格式的数据，并发送给客户端。</li><li>在<strong>类</strong>上使用 @ResponseBody注解<br>在类上加上该注解相当于该类下所有方法都加上了该注解</li></ol></li><li><p><strong>@RestController</strong><br>在类上使用：<code>@RestController</code> == <code>@Controller</code> + <code>@ResponseBody</code></p></li></ol><h2 id="返回时间格式处理"><a href="#返回时间格式处理" class="headerlink" title="返回时间格式处理"></a>返回时间格式处理</h2><p>当实体类中的<code>某个属性</code>字段为<code>Date</code>类型，<code>Date</code>类型的字段在序列化成JSON字符串时，需要考虑两个点，分别是<strong>格式</strong>和<strong>时区</strong>。<br>使用JSON序列化框架为Jackson，具体配置如下</p><ol><li><p><strong>格式</strong><br>格式可按照字段单独配置，也可全局配置，下面分别介绍</p><ul><li><strong>单独配置</strong><br>在指定字段增加<code>@JsonFormat</code>注解，如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date appointmentTime;</span><br></pre></td></tr></table></figure></li><li><strong>全局配置</strong><br>在<code>application.yml</code>中增加如下内容<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>时区</strong><br>时区同样可按照字段单独配置，也可全局配置，下面分别介绍</p><ul><li><strong>单独配置</strong><br>在指定字段增加<code>@JsonFormat</code>注解，如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(timezone = &quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date appointmentTime;</span><br></pre></td></tr></table></figure></li><li><strong>全局配置</strong><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="返回静态资源处理"><a href="#返回静态资源处理" class="headerlink" title="返回静态资源处理"></a>返回静态资源处理</h2><ol><li><p>静态资源包括：<br>纯HTMML文件，图片，CSS文件，javaScript文件</p></li><li><p>web应用上加入静态资源<br>这里我们希望能直接被外部访问到,存放位置：webApp/images/a.png</p></li><li><p>编译项目，确认图片在编译后的目录中</p></li><li><p>访问静态资源：<a href="http://localhost:8080/images/a.png">http://localhost:8080/images/a.png</a><br>报404错误，原因如下：</p><ul><li>DispatcherServlet 的 url-pattern 配置的是“/”</li><li>url-pattern 配置“/”表示整个 Web 应用范围内所有请求都由 SpringMVC 来处理</li><li>对 SpringMVC 来说，必须有对应的 @RequestMapping 才能找到处理请求的方法</li><li>现在 images/mi.jpg 请求没有对应的 @RequestMapping 所以返回 404</li></ul></li><li><p>问题解决<br>在MvcConfig配置类上开启静态资源处理：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//视图解析器，指定了视图的前缀和后缀</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启静态资源处理 &lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer     configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试访问图片路径即可在浏览器看到图片</p></li></ol><h1 id="RESTFul风格"><a href="#RESTFul风格" class="headerlink" title="RESTFul风格"></a>RESTFul风格</h1><h2 id="restful风格设计规范"><a href="#restful风格设计规范" class="headerlink" title="restful风格设计规范"></a>restful风格设计规范</h2><div class="table-container"><table><thead><tr><th>操作</th><th>请求方式</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>查询操作</td><td>GET</td><td>/CRUD/editEmp?empId=2</td><td>URL 地址：/CRUD/emp/2<br>请求方式：GET</td></tr><tr><td>保存操作</td><td>POST</td><td>/CRUD/saveEmp</td><td>URL 地址：/CRUD/emp<br>请求方式：POST</td></tr><tr><td>删除操作</td><td>DELETE</td><td>/CRUD/removeEmp?empId=2</td><td>URL 地址：/CRUD/emp/2<br>请求方式：DELETE</td></tr><tr><td>更新操作</td><td>PUT</td><td>/CRUD/updateEmp</td><td>URL 地址：/CRUD/emp<br>请求方式：PUT</td></tr></tbody></table></div><h2 id="restful风格案例"><a href="#restful风格案例" class="headerlink" title="restful风格案例"></a>restful风格案例</h2><p>接口设计：</p><div class="table-container"><table><thead><tr><th>功能</th><th>接口和请求方式</th><th>请求参数</th><th>返回值</th></tr></thead><tbody><tr><td>分页查询</td><td>GET  /user</td><td>page=1&amp;size=10</td><td>{ 响应数据 }</td></tr><tr><td>用户添加</td><td>POST /user</td><td>{ user 数据 }</td><td>{响应数据}</td></tr><tr><td>用户详情</td><td>GET /user/1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>用户更新</td><td>PUT /user</td><td>{ user 更新数据}</td><td>{响应数据}</td></tr><tr><td>用户删除</td><td>DELETE /user/1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>条件模糊</td><td>GET /user/search</td><td>page=1&amp;size=10&amp;keywork=关键字</td><td>{响应数据}</td></tr></tbody></table></div><p>controller层实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getPages</span><span class="params">(<span class="meta">@RequestParam(required = false,defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                               <span class="meta">@RequestParam(required = false,defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加用户</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;save&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户详情</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getdetail</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户更新</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户删除</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件模糊查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">search</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String name,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(required = false)</span> Integer age,</span></span><br><span class="line"><span class="params">                             String keywork)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="全局异常处理机制"><a href="#全局异常处理机制" class="headerlink" title="全局异常处理机制"></a>全局异常处理机制</h1><p>开发过程中是不可避免地会出现各种异常情况的，例如网络连接异常、数据格式异常、空指针异常等等。<br>对于异常的处理，一般分为两种方式：<br>编程式异常处理：try/catch<br>声明式异常处理：@Throws 、@ExceptionHandler</p><font color=red>方法的执行为选择更精确的那个异常，如是RuntimeException就不会执行Exception的方法</font><p>声明异常处理控制器类<br>cn.xnj.error<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice // 可以返回逻辑视图 转发和重定向的</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">// @RessponseBody，并且返回json数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当发生算术异常会触发此方法!</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerArithmeticException</span><span class="params">(ArithmeticException e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        System.out.println(<span class="string">&quot;msg:&quot;</span>+msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空指针异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerNullPointerException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//HTTP 消息不可读异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerJsonDateException</span><span class="params">(HttpMessageNotReadableException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有异常都会触发此方法!但是如果有具体的异常处理Handler!</span></span><br><span class="line"><span class="comment">     * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment">     * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment">     *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>记得让注解被扫描到，在配置类中要导入<br><code>@ComponentScan(&#123;&quot;cn.xnj.controller&quot;,&quot;cn.xnj.error&quot;&#125;)</code></p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>有时候我们需要自定义异常来返回我们需要的信息</p><ol><li><p>创建一个类，继承所属异常,并在这个类中定义我们的需求即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaseExeception</span>  <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeaseExeception</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在全局异常处理器中注册，这样在其他地方抛出我们自定义异常时，执行相应方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">//自定义异常</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(LeaseExeception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">leaseExexeption</span><span class="params">(LeaseExeception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.fail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在相应的业务逻辑中抛出异常即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(error)&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LeaseExeception</span>(<span class="number">401</span>,<span class="string">&quot;请先删除房间&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>实现步骤：</p><ul><li>1.创建一个类实现<code>HandlerInterceptor接口</code></li><li>2.重写该接口里的<code>preHandle，postHandle，afterCompletion方法</code></li><li>3.在配置类中重写<code>addInterceptors方法</code>,并注册我们自定义的拦截器<ul><li>指定地址拦截：<code>.addPathPatterns(&quot;/地址&quot;);</code></li><li>排除拦截：<code>.excludePathPatterns(&quot;/地址&quot;);</code></li></ul></li></ul><p><strong>a.实现接口,定义拦截器</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在执行控制器(controller)之前执行的方法!,</span></span><br><span class="line"><span class="comment">     * 如编码格式设置，登录保护，权限处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler handler就是我们要调用的方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示放行，返回false表示拦截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,  Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request:&quot;</span>+request+<span class="string">&quot; response:&quot;</span>+response+<span class="string">&quot; handler:&quot;</span>+handler);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在执行控制器(controller)之后执行的方法!没有拦截机制了！ 只有preHandle方法返回true会执 行此方法!</span></span><br><span class="line"><span class="comment">     *  如对结果处理！敏感词汇检查！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler handler就是我们要调用的方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView 返回的视图和共享域数据对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,    Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor.postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 整体处理完毕之后执行的方法!在视图渲染完毕之后执行的方法!</span></span><br><span class="line"><span class="comment">     * 如资源清理，记录日志, 异常处理!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex handler报错了，异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,   Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor.afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>b.注册拦截器</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;cn.xnj.controller&quot;,&quot;cn.xnj.error&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//注册拦截器</span></span><br><span class="line">        <span class="comment">// 配置方案1：拦截所有请求，包括静态资源</span></span><br><span class="line">        <span class="comment">//registry.addInterceptor(new MyInterceptor());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置方案2：指定地址拦截：.addPathPatterns(&quot;/地址&quot;)，/*表示任意一层字符串，/**表示任意多层</span></span><br><span class="line">        <span class="comment">//registry.addInterceptor(new MyInterceptor())</span></span><br><span class="line">        <span class="comment">//        .addPathPatterns(&quot;/user/**&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置方案3：排除拦截：.excludePathPatterns(&quot;/地址&quot;);</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>())</span><br><span class="line">               .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">               .excludePathPatterns(<span class="string">&quot;/user/&#123;id&#125;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多有关拦截器参考文章：<a href="https://www.xusir.fun/posts/202409061602.html">拦截器和过滤器</a></p><h1 id="参数效验"><a href="#参数效验" class="headerlink" title="参数效验"></a>参数效验</h1><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p><p><strong><font color=red>先总结：1.引入依赖、2.实体类属性添加效验注解、3.handler(@Validated 实体类对象)、4.注解对param和json参数都有效，json参数仍然需要加上@RequestBody注解、5：使用@BindingResult或其他捕获异常方式处理异常</font></strong></p><div class="table-container"><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Null</td><td>标注值必须为 null</td></tr><tr><td>@NotNull</td><td>标注值不可为 null</td></tr><tr><td>@AssertTrue</td><td>标注值必须为 true</td></tr><tr><td>@AssertFalse</td><td>标注值必须为 false</td></tr><tr><td>@Min(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@Max(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@DecimalMin(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@DecimalMax(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@Size(max,min)</td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td>@Digits(integer,fratction)</td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td>@Past</td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td>@Future</td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td>@Pattern(value)</td><td>标注值必须符合指定的正则表达式</td></tr></tbody></table></div><p>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</p><div class="table-container"><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Email</td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td>@Length</td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>标注值字符串不能是空字符串</td></tr><tr><td>@Range</td><td>标注值必须在指定的范围内</td></tr></tbody></table></div><p><strong>注意：包装类型不为空用：@NotNull。字符串不为空且不为””用：@NotBlank。集合类型长度大于0用：@NotEmpty</strong></p><p>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注解驱动 @EnableWebMvc 的方式进行数据校验。Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</p><p>配置 @EnableWebMvc后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标注 @Validated 注解即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>引入依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验注解实现--&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>应用校验注解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//age   1 &lt;=  age &lt; = 150</span></span><br><span class="line">    <span class="meta">@Min(1)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name 3 &lt;= name.length &lt;= 6</span></span><br><span class="line">    <span class="meta">@Length(min = 3,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//email 邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日期格式 过去日期</span></span><br><span class="line">    <span class="meta">@Past</span></span><br><span class="line">    <span class="keyword">private</span> Data birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get set 方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>handler标记和绑定错误收集<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Validated</span> 代表应用校验注解! 必须添加!</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 注意：如果不符合效验规则，会直接向前端抛异常！</span></span><br><span class="line"><span class="comment">     * 接收错误绑定信息！自定义返回结果！约定：参数错误-&gt;&#123;code:400&#125;-&gt;前端</span></span><br><span class="line"><span class="comment">     * 捕捉错误，绑定错误信息</span></span><br><span class="line"><span class="comment">     *    1.handler(效验对象,BindingResult result)要求：BindingResult需要紧挨着校验对象</span></span><br><span class="line"><span class="comment">     *    2.bindresult获取绑定错误</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 或者你也可以用全局异常捕获等其他机制处理异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                       //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!</span></span><br><span class="line"><span class="params">                       BindingResult result)</span>&#123;</span><br><span class="line">       <span class="comment">//判断是否有信息绑定错误! 有可以自行处理!</span></span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> result.getFieldError().toString();</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有,正常处理业务即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p><font color=red>跨域：由于浏览器的同源策略限制，向不同源(不同协议，不同域名，不同端口)发送ajax请求会失败</font><br>解决办法：在controller上添加<code>@CrossOrigin</code>注解</p><ol><li><p>在contrller类上面添加@CrossOrigin注解来解决跨域<br><code>@CrossOrigin // 解决跨域问题,允许其他源访问我们的controller</code><br>这个cotroller下的所有方法都可以被外部访问</p></li><li><p>在controller下某些方法添加@CrossOrigin注解来解决跨域<br>该方法可以被外部访问</p></li></ol><h1 id="SSM整合案例"><a href="#SSM整合案例" class="headerlink" title="SSM整合案例"></a>SSM整合案例</h1><p>至少两个容器：<br>root容器(mapper,service,aop,tx,dataSource,mybatis等)和web容器(controller,拦截器，全局异常等springmvc核心组件)<br>调用关系：<br>web容器是root容器的子容器，父子容器关系。子容器可以单向注入父Ioc容器组件，父容器则不行<br>Ioc初始化方式和配置位置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指定root容器对应的配置类</span></span><br><span class="line">  <span class="comment">//root容器的配置类</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; ServiceJavaConfig.class,MapperJavaConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//指定web容器对应的配置类 webioc容器的配置类</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; WebJavaConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//指定dispatcherServlet处理路径，通常为 / </span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="创建项目引入依赖"><a href="#创建项目引入依赖" class="headerlink" title="创建项目引入依赖"></a>创建项目引入依赖</h2><p><strong>注意：创建项目记得改成web项目形式<code>&lt;packaging&gt;war&lt;/packaging&gt;</code></strong><br><strong>依赖导入</strong>：pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring 相关依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring核心容器 ioc/di/(传递)aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解依赖  jsr250如@Resource  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring aop  已被spring-context传递--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;6.0.6&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring aop 的注解依赖如：@Aspect定义切面类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring 事务管理：@EnableTransactionManagement,@Transactional --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springwebmvc相关依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- json处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Hibernate校验注解 @Validated--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis相关依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--整合需要--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-web 整合servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis-spring 整合mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--lombok 自动生成get，set等方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="数据库和实体类"><a href="#数据库和实体类" class="headerlink" title="数据库和实体类"></a>数据库和实体类</h2><p><strong>数据库准备</strong>：mysql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database studb ;</span><br><span class="line"></span><br><span class="line">use studb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_tb</span><br><span class="line">(</span><br><span class="line">    id         <span class="type">int</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    name       <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    gender     <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    age        <span class="type">int</span>,</span><br><span class="line">    class_name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_tb(name, gender, age, class_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">80</span>,<span class="string">&#x27;高中一班&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;高中二班&#x27;</span>),(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;高中一班&#x27;</span>),(<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;高中三班&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;刘七&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;高中二班&#x27;</span>),(<span class="string">&#x27;陈八&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;高中一班&#x27;</span>),(<span class="string">&#x27;杨九&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;高中三班&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;吴十&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;高中二班&#x27;</span>)</span><br></pre></td></tr></table></figure></p><p><strong>实体类添加</strong>：cn.xnj.pojo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//lombok 自动生成get set toString 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotEmpty</span>  <span class="comment">//Hibernate校验注解 不能为空</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;男|女&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="meta">@Range(min = 1,max = 100)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="各配置类和配置文件"><a href="#各配置类和配置文件" class="headerlink" title="各配置类和配置文件"></a>各配置类和配置文件</h2><p><strong>数据库连接配置文件</strong>：resource/jdbc.properties<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure></p><p><strong>logback日志输出配置文件</strong>：resource/logback.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置，ConsoleAppender表示输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：TRACE、DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别，可也是包名或全类名。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;cn.xnj.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>SpringWebMvc配置类</strong>：cn.xnj.config/SpringMvcConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.controller</span></span><br><span class="line"><span class="comment"> * 2.全局异常处理器</span></span><br><span class="line"><span class="comment"> * 3.handlerMapping，handlerAdapter：`WebMvcConfigurer`</span></span><br><span class="line"><span class="comment"> * 4.静态资源处理</span></span><br><span class="line"><span class="comment"> * 5.jsp 视图解析器前后缀</span></span><br><span class="line"><span class="comment"> * 6.json解析器</span></span><br><span class="line"><span class="comment"> * 7.拦截器...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;cn.xnj.controller&quot;,&quot;cn.xnj.exception&quot;&#125;)</span><span class="comment">// 1,2</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">// 3,6</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();<span class="comment">//静态资源处理器，图片，js，css等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//        registry.jsp(&quot;/WEB-INF/jsp/&quot;,&quot;.jsp&quot;);// 视图解析器jsp前后缀</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">//        registry.addInterceptor();// 拦截器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>SpringConfig配置类</strong>：cn.xnj.config/SpringConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. service</span></span><br><span class="line"><span class="comment"> * 2. 开启aop注解的支持 aspect：<span class="doctag">@Before</span>，<span class="doctag">@After</span>...</span></span><br><span class="line"><span class="comment"> * 3. 声明式事务管理：</span></span><br><span class="line"><span class="comment"> *      a.对应的事务管理器实现[TransactionManager DataSource..Hibrnate..Jpa..]</span></span><br><span class="line"><span class="comment"> *      b.开启事务注解支持 <span class="doctag">@Transactional</span></span></span><br><span class="line"><span class="comment"> * 4. 配置事务管理器</span></span><br><span class="line"><span class="comment"> * 5. 配置事务注解驱动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">// 2</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 3</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj.service&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;MyBatisConfig.class, DataSourceConfig.class&#125;)</span><span class="comment">//导入配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>数据源配置DataSourceConfig</strong>：cn.xnj.config/DataSourceConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据源配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入数据库属性值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Durid 连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MyBatisConfig配置类</strong>：cn.xnj.config/MyBatisConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置MyBatis</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">// MyBatisConfig 配置SqlSessionFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);<span class="comment">// 数据源，连接池</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置mybatis功能</span></span><br><span class="line">        org.apache.ibatis.session.<span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> factoryBean.getObject().getConfiguration();</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="literal">true</span>);<span class="comment">//开启驼峰命名</span></span><br><span class="line">        <span class="comment">//configuration.setLogImpl(Slf4jImpl.class);//开启日志输出 已经使用了第三方logback 所以注释掉</span></span><br><span class="line">        <span class="comment">//configuration.setAutoMappingBehavior(AutoMappingBehavior.FULL);//开启resultMap自动映射</span></span><br><span class="line">        factoryBean.setConfiguration(configuration);<span class="comment">// 配置mybatis功能</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 别名扫描</span></span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;cn.xnj.pojo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        <span class="type">PageInterceptor</span> <span class="variable">pageInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInterceptor</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">//设置属性</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;helperDialect&quot;</span>, <span class="string">&quot;mysql&quot;</span>);</span><br><span class="line">        pageInterceptor.setProperties(properties);</span><br><span class="line"></span><br><span class="line">        factoryBean.addPlugins(pageInterceptor);<span class="comment">//添加插件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MyBatisConfig 配置MapperScannerConfigurer</span></span><br><span class="line">    <span class="comment">//mapper接口的扫描器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;cn.xnj.mapper&quot;</span>);<span class="comment">// 扫描mapper接口和mapper.xml文件的路径</span></span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>SpringMvC初始化配置类</strong>：cn.xnj.config/SpringIocInit<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIocInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//root容器配置类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="comment">//return new Class[]&#123;SpringConfig.class, DataSourceConfig.class, MyBatisConfig.class&#125;;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;<span class="comment">//SpringConfig.class导入了DataSourceConfig.class, MyBatisConfig.class</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//webioc容器配置类指定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dispatcherServlet的拦截路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><p><strong>规范返回结果Result</strong>：cn.xnj.utils<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回结果类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">200</span>; <span class="comment">//200成功状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg ; <span class="comment">//返回信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;  <span class="comment">//返回具体数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.data = data;</span><br><span class="line">        result.msg=<span class="string">&quot;操作成功&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data,String msg)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.data = data;</span><br><span class="line">        result.msg=msg;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>();</span><br><span class="line">        result.code = <span class="number">500</span>; <span class="comment">//错误码</span></span><br><span class="line">        result.msg = msg; <span class="comment">//错误状态</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>分页工具类PageBean</strong>：cn.xnj.utils<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页工具类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageBean</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentPage;   <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;      <span class="comment">// 每页显示的数据量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total;    <span class="comment">// 总数据条数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;      <span class="comment">// 当前页的数据集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="全局异常管理类"><a href="#全局异常管理类" class="headerlink" title="全局异常管理类"></a>全局异常管理类</h2><p><strong>全局异常GlobalExceptionHandler</strong>：cn.xnj.exeception<br>注意生效前提：<code>@ComponentScan(&quot;cn.xnj.exception&quot;)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//开启</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">// Lombok 库提供的注解,用于自动生成日志记录器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 当发生算术异常会触发此方法!</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerArithmeticException</span><span class="params">(ArithmeticException e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        log.info(<span class="string">&quot;ArithmeticException:&#123;&#125;&quot;</span>,msg);</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空指针异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerNullPointerException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        log.info(<span class="string">&quot;NullPointerException:&#123;&#125;&quot;</span>,msg);</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sql 异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerSQLException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        log.info(<span class="string">&quot;SQLException:&#123;&#125;&quot;</span>,msg);</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有异常都会触发此方法!但是如果有具体的异常处理Handler!</span></span><br><span class="line"><span class="comment">     * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment">     * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment">     *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        log.info(<span class="string">&quot;Exception:&#123;&#125;&quot;</span>,msg);</span><br><span class="line">        <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="表现层controller和业务逻辑层service"><a href="#表现层controller和业务逻辑层service" class="headerlink" title="表现层controller和业务逻辑层service"></a>表现层controller和业务逻辑层service</h2><p><strong>controller层</strong>：cn.xnj.controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">// 解决跨域问题,允许其他源访问我们的controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//lombok 提供</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页条件(可选)模糊查询</span></span><br><span class="line">    <span class="comment">//GetMapping http://localhost:8080/student/1/4?gender=男</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable(name =&quot;currentPage&quot;)</span> <span class="type">int</span> currentPage,</span></span><br><span class="line"><span class="params">                          <span class="meta">@PathVariable(name =&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize,</span></span><br><span class="line"><span class="params">                           Student student)</span>&#123;</span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> studentService.getPage(currentPage, pageSize,student);</span><br><span class="line">        log.info(<span class="string">&quot;查询的数据为 :&#123;&#125;&quot;</span>,pageBean);</span><br><span class="line">        <span class="keyword">return</span>  Result.success(pageBean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生删除</span></span><br><span class="line">    <span class="comment">//DeleteMapping  http://localhost:8080/student/9</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> studentService.deleteById(id);</span><br><span class="line">        <span class="keyword">if</span> (rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.success(rows);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 添加学生</span></span><br><span class="line"><span class="comment">     * PostMapping http://localhost:8080/student</span></span><br><span class="line"><span class="comment">     * &#123;</span></span><br><span class="line"><span class="comment">     *     &quot;name&quot;:&quot;阿柒&quot;,</span></span><br><span class="line"><span class="comment">     *     &quot;gender&quot;:&quot;男&quot;,</span></span><br><span class="line"><span class="comment">     *     &quot;age&quot;:20,</span></span><br><span class="line"><span class="comment">     *     &quot;className&quot;:&quot;高中三班&quot;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> Student student , BindingResult result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            <span class="comment">//String msg = result.getFieldError().getDefaultMessage();</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;必要参数为空或格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        studentService.save(student);</span><br><span class="line">        <span class="keyword">return</span> Result.success(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**更新学生信息</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@PutMapping</span>  http://localhost:8080/student</span></span><br><span class="line"><span class="comment">     *&#123;</span></span><br><span class="line"><span class="comment">     *     &quot;id&quot;:1,</span></span><br><span class="line"><span class="comment">     *     &quot;name&quot;:&quot;刘坤&quot;,</span></span><br><span class="line"><span class="comment">     *     &quot;age&quot;:16</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">( <span class="meta">@RequestBody</span> Student student)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(student.getId()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;操作失败，id不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rows=studentService.update(student);</span><br><span class="line">        <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;保存修改失败，未知错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>service层</strong>：cn.xnj.service/impl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口类 cn.xnj.service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize, Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新学生信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Student student)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类 cn.xnj.service.impl</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize, Student student)</span> &#123;</span><br><span class="line">        <span class="comment">//开启分页</span></span><br><span class="line">        PageHelper.startPage(currentPage, pageSize);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        List&lt;Student&gt; studentList = studentMapper.queryList(student);</span><br><span class="line">        <span class="comment">//分页数据装配</span></span><br><span class="line">        PageInfo&lt;Student&gt; info = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(studentList);</span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        PageBean&lt;Student&gt; pageBean = <span class="keyword">new</span> <span class="title class_">PageBean</span>&lt;&gt;(currentPage, pageSize, info.getTotal(), info.getList());</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id删除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.insert(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新学生信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Student student)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentMapper.update(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="数据访问层Mapper-xml-Mapper"><a href="#数据访问层Mapper-xml-Mapper" class="headerlink" title="数据访问层Mapper.xml,Mapper"></a>数据访问层Mapper.xml,Mapper</h2><p><strong>XxxMapper</strong>：cn.xnj.mapper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryList</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from stu_tb where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新学生信息</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Student student)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>XxxMapper</strong>：resource/cn/xnj/mapper<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--分页 条件(可选)模糊查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from stu_tb</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!= null&quot;</span>&gt;</span></span><br><span class="line">                name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!= null&quot;</span>&gt;</span></span><br><span class="line">                and gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!= null&quot;</span>&gt;</span></span><br><span class="line">                and age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;className!=null&quot;</span>&gt;</span></span><br><span class="line">                and class_name = #&#123;className&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into stu_tb(name,gender,age,class_name)</span><br><span class="line">        values (#&#123;name&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;className&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update stu_tb</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null&quot;</span>&gt;</span></span><br><span class="line">                name = #&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span></span><br><span class="line">                gender = #&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age!=null&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;className!=null&quot;</span>&gt;</span></span><br><span class="line">                class_name = #&#123;className&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="note info flat"><p>笔记：<a href="https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF">https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF</a></p></div>]]></content>
    
    
    <summary type="html">SpringWebMVC框架复习</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="spring" scheme="https://xusir.fun/tags/spring/"/>
    
    <category term="springmvc" scheme="https://xusir.fun/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="https://xusir.fun/posts/2409231531.html"/>
    <id>https://xusir.fun/posts/2409231531.html</id>
    <published>2024-09-23T15:31:00.000Z</published>
    <updated>2025-03-18T08:04:27.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速了解-入门案例-Mybatis3"><a href="#快速了解-入门案例-Mybatis3" class="headerlink" title="快速了解(入门案例)(Mybatis3)"></a>快速了解(入门案例)(Mybatis3)</h1><ol><li><strong>准备数据模型</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `mybatis-example`;</span><br><span class="line"></span><br><span class="line">USE `mybatis-example`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_emp`(</span><br><span class="line">  emp_id INT AUTO_INCREMENT,</span><br><span class="line">  emp_name <span class="title function_">CHAR</span><span class="params">(<span class="number">100</span>)</span>,</span><br><span class="line">  emp_salary <span class="title function_">DOUBLE</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span><span class="params">(emp_id)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(<span class="string">&quot;tom&quot;</span>,<span class="number">200.33</span>);</span><br><span class="line">INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(<span class="string">&quot;jerry&quot;</span>,<span class="number">666.66</span>);</span><br><span class="line">INSERT INTO `t_emp`(emp_name,emp_salary) VALUES(<span class="string">&quot;andy&quot;</span>,<span class="number">777.77</span>);</span><br></pre></td></tr></table></figure></li><li><strong>搭建项目和准备</strong><br>a.搭建项目<br> mybatis-base-quickstart-01<br>b.依赖导入 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>c.实体类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成 getter | setter | toString 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>准备Mapper接口和MapperXML文件</strong><br>MyBatis 框架下，SQL语句编写位置发生改变，从原来的Java类，改成<strong>XML</strong>或者注解定义！<br>a.定义mapper接口 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xnj.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * t_emp表对应数据库SQL语句映射接口!</span></span><br><span class="line"><span class="comment"> *    接口只规定方法,参数和返回值!</span></span><br><span class="line"><span class="comment"> *    mapper.xml中编写具体SQL语句!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据员工id查询员工数据方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> empId  员工id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 员工实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Employee <span class="title function_">selectEmployeeById</span><span class="params">(Integer empId)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.定义xml映射文件<br> 注意此处规范的文件目录格式应该是：<code>src/main/resource/对应mapper接口包路径/xxxMapper.xml</code><br> 对应mapper接口包路径在idea创建的时候也应该用<code>/</code>分隔开，这里不能用<code>.</code> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 查询使用 select标签</span></span><br><span class="line"><span class="comment">            id = 方法名</span></span><br><span class="line"><span class="comment">            resultType = 返回值类型</span></span><br><span class="line"><span class="comment">            标签内编写SQL语句</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- #&#123;empId&#125;代表动态传入的参数,并且进行赋值! --&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName, emp_salary empSalary from</span><br><span class="line">        t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure> <strong>注意：</strong><ul><li>方法名和SQL的id一致</li><li>方法返回值和resultType一致</li><li>方法的参数和SQL的参数一致</li><li>接口的全类名和映射配置文件的名称空间一致</li></ul></li><li><strong>准备MyBatis配置文件</strong><br>mybatis框架配置文件： 数据库连接信息，性能配置，mapper.xml配置等！<br>建议命名为<code>mybatis-config.xml</code>,之后用spring会整合，就不需要该配置文件了 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default 属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基 准的相对路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们  可以以resources目录为基准 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/xnj/mapper/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>运行和测试 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmployee</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.读取外部配置文件 (mybatis-config.xml)</span></span><br><span class="line">        <span class="comment">// ①声明Mybatis全局配置文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">// ②以输入流的形式加载Mybatis配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建SqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build (inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.根据sqlSessionFactory创建sqlSession(每次业务创建一个，用完就释放)</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.根据接口的代理对象(代理技术)调用代理对象的方法，就会查找 mapper接口的方法</span></span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectEmployeeById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.关闭SqlSession</span></span><br><span class="line">        <span class="comment">//session.commit(); //提交事务 [DQL不需要,其他需要]</span></span><br><span class="line">        session.close(); <span class="comment">//关闭会话</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 说明：<ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul></li></ol><h1 id="MyBatis基本使用"><a href="#MyBatis基本使用" class="headerlink" title="MyBatis基本使用"></a>MyBatis基本使用</h1><h2 id="向SQL语句传参"><a href="#向SQL语句传参" class="headerlink" title="向SQL语句传参"></a>向SQL语句传参</h2><h3 id="mybatis日志输出配置"><a href="#mybatis日志输出配置" class="headerlink" title="mybatis日志输出配置"></a>mybatis日志输出配置</h3><p>mybatis-config.xml配置文件中的标签和结构如下：<br>configuration(配置，都写在它下面)</p><ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）</li><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源） </li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul><p>在mybatis的配置文件使用settings标签设置，输出运过程SQL日志！<br>日志配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启 mybatis的日志输出，</span></span><br><span class="line"><span class="comment">        STDOUT_LOGGING -选择使用sysytem进行控制台输出</span></span><br><span class="line"><span class="comment">        SLF4J           -选择使用选择slf4j输出</span></span><br><span class="line"><span class="comment">        JDK_LOGGING -选择使用JDK自带的日志输出</span></span><br><span class="line"><span class="comment">        NOP_LOGGING -选择不输出日志</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="形式"><a href="#形式" class="headerlink" title="#{}形式"></a>#{}形式</h3><p>Mybatis会将SQL语句中的#{}转换为<code>?</code>问号占位符。</p><ul><li><code>#&#123;key&#125;</code>:emp_id = ?   ? = 赋值</li><li>可以防止sql注入的问题</li><li>？只能代替值的位置，不能代替 容器名(标签，列名，sql关键字)</li><li>select * from 表 where 列名=#{传参}</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id empId,emp_name empName, emp_salary empSalary from</span><br><span class="line">    t_emp where emp_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="形式-1"><a href="#形式-1" class="headerlink" title="${}形式"></a>${}形式</h3><p>${}形式传参，底层Mybatis做的是<code>字符串拼接</code>操作。</p><ul><li>${key}：字符串拼接 <code>&quot;emp_id=&quot; + id</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id empId,emp_name empName, emp_salary empSalary from</span><br><span class="line">    t_emp where emp_id = $&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p><ul><li>简单类型：只包含一个值的数据类型<ul><li>基本数据类型：int、byte、short、double、……</li><li>基本数据类型的包装类型：Integer、Character、Double、……</li><li>字符串类型：String</li></ul></li><li>复杂类型：包含多个值的数据类型<ul><li>实体类类型：Employee、User、……</li><li>集合类型：List、Set、Map、……</li><li>数组类型：int[]、String[]、……</li><li>复合类型：List<Employee>、实体类中包含集合……</li></ul></li></ul><h3 id="单个简单类型参数"><a href="#单个简单类型参数" class="headerlink" title="单个简单类型参数"></a>单个简单类型参数</h3><p><strong>传入单个简单类型，<code>列名=#&#123;key&#125;</code>，key可以随便取值，但是为了规范，使用参数名！</strong></p><p>Mapper接口中抽象方法声明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    Employee <span class="title function_">selectEmployeeById</span><span class="params">(Integer empId)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mapper.xml文件中sql语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName, emp_salary empSalary from</span><br><span class="line">        t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="实体类型参数"><a href="#实体类型参数" class="headerlink" title="实体类型参数"></a>实体类型参数</h3><p><strong>传入实体类型 (#{key1},#{key2}),key填对应实体类的属性名即可</strong></p><p>实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mapper接口中抽象方法声明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*  插入入员工数据【实体对象】</span></span><br><span class="line"><span class="comment">        Employee employee = new Employee();</span></span><br><span class="line"><span class="comment">        employee.setEmpName(&quot;张三&quot;);</span></span><br><span class="line"><span class="comment">        employee.setEmpSalary(10000.0);</span></span><br><span class="line"><span class="comment">        int i = employeeMapper.insertEmployee(employee);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;i = &quot; + i);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mapper.xml文件中sql语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> &gt;</span></span><br><span class="line">        insert into t_emp(emp_name,emp_salary)</span><br><span class="line">        values (#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="零散-多个-的简单类型数据"><a href="#零散-多个-的简单类型数据" class="headerlink" title="零散(多个)的简单类型数据"></a>零散(多个)的简单类型数据</h3><p><strong>传入多个简单类型 列名1=#{key1} and 列名2=#{key2}</strong></p><ul><li>key的值不能随便写，也不是按参入的形参名写</li><li>方案一：注解指定，使用<code>@Param</code>注解 指定多个简单参数的key <strong>[推荐]</strong><ul><li><code>@Param(&quot;value值&quot;)</code> </li><li>sql中：<code>key=value值</code></li></ul></li><li>方案二：mybatis默认机制<ul><li><code>arg0 arg1...</code>形参从左到右依次对应arg0,arg1…</li><li>(name,salary) name-&gt; key=arg0  salary-&gt;key=arg1</li><li><code>param1 param2...</code>形参从左到右依次对应param1 param2…</li><li>(name,salary) name-&gt; key=param1  salary-&gt;key=param2</li></ul></li></ul><p>Mapper接口中抽象方法声明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">//多个参数查找员工数据</span></span><br><span class="line">    Employee <span class="title function_">selectByEmpNameAndEmpSalary</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String empName,<span class="meta">@Param(&quot;salary&quot;)</span> Double empSalary)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mapper.xml文件中sql语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByEmpNameAndEmpSalary&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方案一 @Param(&quot;value值&quot;)--&gt;</span></span><br><span class="line">    select emp_id empId,emp_name empName, emp_salary empSalary from</span><br><span class="line">        t_emp where emp_name = #&#123;name&#125; and emp_salary = #&#123;salary&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方案二  arg0 arg1...--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select emp_id empId,emp_name empName, emp_salary empSalary from</span></span><br><span class="line"><span class="comment">        t_emp where emp_name = #&#123;arg0&#125; and emp_salary = #&#123;arg1&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--方案三  param1 param2...--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select emp_id empId,emp_name empName, emp_salary empSalary from</span></span><br><span class="line"><span class="comment">        t_emp where emp_name = #&#123;param1&#125; and emp_salary = #&#123;param2&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Map类型参数"><a href="#Map类型参数" class="headerlink" title="Map类型参数"></a>Map类型参数</h3><p><strong>传入map只需 key=map的key即可</strong></p><p>Mapper接口中抽象方法声明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">/* 传入Map数据来插入员工数据 map(name=&quot;员工名&quot;,salary=员工薪资)</span></span><br><span class="line"><span class="comment">        Map data = new HashMap();</span></span><br><span class="line"><span class="comment">        data.put(&quot;name&quot;,&quot;李四&quot;);</span></span><br><span class="line"><span class="comment">        data.put(&quot;salary&quot;,9000.0);</span></span><br><span class="line"><span class="comment">        int i = employeeMapper.insertEmployeeByMap(data);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertEmployeeByMap</span><span class="params">(Map data)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mapper.xml文件中sql语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployeeByMap&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp(emp_name,emp_salary)</span><br><span class="line">    values (#&#123;name&#125;,#&#123;salary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h2><p>数据输出总体上有两种形式：</p><ul><li><strong>增删改操</strong>作返回的受影响行数：直接使用 int 或 long 类型接收即可<ul><li>int insert(User user);//添加数据，返回添加的行数</li><li>int deleteById(Integer id);//通过id删除，返回删除的行数</li><li>int updateById(User user);//根据id修改数据，返回修改的行数</li></ul></li><li><strong>查询操作</strong>的查询结果<ul><li>String queryNameById(Integer id);//通过id查询名字</li><li>Double querySalaryByName(String name);//通过姓名查询薪水</li></ul></li></ul><p>我们需要做的是，指定查询的输出数据类型即可！<br>并且插入场景下，实现<strong>主键数据回显示</strong>！</p><h3 id="单个简单类型"><a href="#单个简单类型" class="headerlink" title="单个简单类型"></a>单个简单类型</h3><p><strong>细节：</strong></p><ul><li><strong>select标签，通过resultType指定查询返回值类型！</strong></li><li><strong>resultType = “全限定符 ｜ 别名 ｜ 如果是返回集合类型，写范型类型即可”</strong></li><li>基本数据类型 int double -&gt; _int _double</li><li>包装数据类型 Integer Double -&gt; int integer double</li><li>集合容器类型 Map List HsahMap -&gt; 小写即可 map list hashmap</li></ul><p><strong>别名：</strong></p><ul><li>官网上指定了：<a href="https://mybatis.net.cn/configuration.html#typeAliases">https://mybatis.net.cn/configuration.html#typeAliases</a></li><li>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定</li></ul><p>Mapper接口中抽象方法声明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    <span class="comment">//通过id查询名字</span></span><br><span class="line">    String <span class="title function_">queryNameById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过姓名查询薪水</span></span><br><span class="line">    Double <span class="title function_">querySalaryByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mapper.xml文件中sql语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultType=&quot;java.lang.String&quot; 全限定符写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;select id=&quot;queryNameById&quot; resultType=&quot;java.lang.String&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultType=&quot;String&quot;  别名写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryNameById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">    select emp_name empName</span><br><span class="line">    from t_emp where emp_id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;querySalaryByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_double&quot;</span>&gt;</span></span><br><span class="line">    select emp_salary empSalary</span><br><span class="line">    from t_emp where emp_name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="返回实体类对象"><a href="#返回实体类对象" class="headerlink" title="返回实体类对象"></a>返回实体类对象</h3><p>Mapper接口的抽象方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br></pre></td></tr></table></figure><br>Mapper.xml配置SQl语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary </span><br><span class="line">  from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><br>因为数据库表中的列的命名和实体类属性的命名规范不同，导致我们需要通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来，才能正确的接收返回结果。<br>我们可以在mybatis-config.xml全局配置文件中，做如下配置，这样就不用再给字段设置别名了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在全局范围内对Mybatis进行配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 具体配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="驼峰命名规范"><a href="#驼峰命名规范" class="headerlink" title="驼峰命名规范"></a>驼峰命名规范</h4><p>Java实体类属性名命名方式：首字母小写的驼峰式命名<br>实体类：Book </p><ul><li>属性：id,bookId,bookName,createTime，updateTime</li></ul><p>数据库表字段命名方式：单词_单词<br>数据库表：tb_book</p><ul><li>字段：id,boo_id,book_name,create_time,update_time</li></ul><h3 id="返回Map类型"><a href="#返回Map类型" class="headerlink" title="返回Map类型"></a>返回Map类型</h3><p>适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。<br>Mapper接口的抽象方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询薪水最高的员工的姓名和薪水</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectEmpNameAndMaxSalary</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><br>Mapper.xml的SQL语句:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpNameAndMaxSalary&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span><br><span class="line">        select emp_name 员工姓名, emp_salary  工资</span><br><span class="line">        from t_emp where emp_salary = (select max(emp_salary) from t_emp)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="返回List类型"><a href="#返回List类型" class="headerlink" title="返回List类型"></a>返回List类型</h3><p>查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可</p><p>Mapper接口中抽象方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><br>SQL语句<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectAll(); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 集合类型的返回值</span></span><br><span class="line"><span class="comment">        返回值是集合,resultType不需要指定集合类型</span></span><br><span class="line"><span class="comment">        只需指定泛型即可,如string,比如下面返回集合的泛型就是Employee</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id ,emp_name ,emp_salary </span><br><span class="line">  from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="返回主键值"><a href="#返回主键值" class="headerlink" title="返回主键值"></a>返回主键值</h3><ol><li><p>自增长类型主键<br>当sql表的id字段为自增长(auto_increment)时，执行插入操作时返回生成的主键id的值</p><ul><li><p>在sql标签设置<code>useGeneratedKeys=true keyColumn=&quot;主键列的值&quot; keyProperty=&quot;接收主键列值的属性&quot;</code></p><p>Mapper接口中抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入员工数据【实体对象】</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empId&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp(emp_name,emp_salary)</span><br><span class="line">        values (#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertEmployee</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入参数true 开启自动提交事务</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">    <span class="comment">//创建员工对象</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    employee.setEmpName(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">    employee.setEmpSalary(<span class="number">8888.88</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;插入操作前empID = &quot;</span> + employee.getEmpId());<span class="comment">//插入操作前empID = null</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> employeeMapper.insertEmployee(employee);</span><br><span class="line">    System.out.println(<span class="string">&quot;插入操作后empID = &quot;</span> + employee.getEmpId());<span class="comment">//插入操作后empID = 8</span></span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);<span class="comment">//i = 1</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//session.commit(); //提交事务</span></span><br><span class="line">    session.close(); <span class="comment">//关闭会话</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>非自增长类型主键<br>而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！</p><ul><li><code>order=&quot;before | after&quot;</code> sql语句是在插入语句之前还是之后执行</li><li><code>resultType = &quot;返回值类型&quot;</code></li><li><code>keyProperty = &quot;查询结果给哪个属性赋值&quot;</code></li></ul><p>使用 selectKey 帮助插入UUID作为字符串类型主键示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;tId&quot;</span>&gt;</span></span><br><span class="line">        select replace(UUID(),&#x27;-&#x27;,&#x27;&#x27;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into teacher(t_id,t_name)</span><br><span class="line">    values (#&#123;tId&#125;,#&#123;tName&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实体类属性和数据库字段对应关系"><a href="#实体类属性和数据库字段对应关系" class="headerlink" title="实体类属性和数据库字段对应关系"></a>实体类属性和数据库字段对应关系</h3><ol><li><p><strong>别名对应</strong><br>将字段的别名设置成和实体类属性一致<br>实体类属性约定：即getXxx()方法、setXxx()方法把方法名中的get或set去掉，首字母小写。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=# &#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>全局配置自动识别驼峰式命名规则</strong><br>在Mybatis全局配置文件(mybatis-config.xml)加入如下配置：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 之后xxxMapper.xml文件中的SQL语句可以不设置别名</p></li><li><p><strong>使用ResultMap</strong><br>使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmployeeResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_salary&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empSalary&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRM&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmployeeResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><p>lombok能帮我们自动生成无参和有参构造方法以及get，set方法等，只需在实体类上方加上对应注解即可</p><div class="table-container"><table><thead><tr><th>常用注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Data</code></td><td>包含get，set，toString等</td></tr><tr><td><code>@AllArgsConstructor</code></td><td>全参构造函数</td></tr><tr><td><code>@NoArgsConstructor</code></td><td>无参构造函数</td></tr><tr><td><code>@ToString</code></td><td>重写toString方法</td></tr></tbody></table></div><ol><li>导入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>安装插件<code>lombok</code>(图标封面是一个红辣椒🌶️)</li></ol><h1 id="MyBatis多表映射"><a href="#MyBatis多表映射" class="headerlink" title="MyBatis多表映射"></a>MyBatis多表映射</h1><p>大致分为3步</p><ol><li>使用多表查询语句</li><li>多表结果承接实体类设计<ul><li>一对一:属性中包含对方对象</li><li>一对多：属性中包含对方对象集合</li></ul></li><li>使用ResultMap完成多表结果映射</li></ol><h2 id="多表映射案例"><a href="#多表映射案例" class="headerlink" title="多表映射案例"></a>多表映射案例</h2><p>经典关系：<br>客户和订单，一对多关系，一个客户对应多个订单<br>订单和客户，一对一关系，一个订单对应一个客户</p><ol><li><p>数据准备</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_customer` (`customer_id` INT NOT NULL AUTO_INCREMENT, `customer_name` CHAR  (<span class="number">100</span>), PRIMARY <span class="title function_">KEY</span> <span class="params">(`customer_id`)</span> );</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_order` ( `order_id` INT NOT NULL AUTO_INCREMENT, `order_name` CHAR(<span class="number">100</span>),    `customer_id` INT, PRIMARY <span class="title function_">KEY</span> <span class="params">(`order_id`)</span> );</span><br><span class="line"></span><br><span class="line">INSERT INTO `t_customer` (`customer_name`) VALUES (<span class="string">&#x27;c01&#x27;</span>);</span><br><span class="line"></span><br><span class="line">INSERT INTO `t_order` (`order_name`, `customer_id`) VALUES (<span class="string">&#x27;o1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">INSERT INTO `t_order` (`order_name`, `customer_id`) VALUES (<span class="string">&#x27;o2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">INSERT INTO `t_order` (`order_name`, `customer_id`) VALUES (<span class="string">&#x27;o3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>实体类准备</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;<span class="comment">//客户实体类</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;<span class="comment">//订单实体类</span></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li></ol><h2 id="对一映射"><a href="#对一映射" class="headerlink" title="对一映射"></a>对一映射</h2><ol><li><p>需求说明<br>根据订单id查询订单，订单里关联客户的信息</p></li><li><p>OrderMapper接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询订单，</span></span><br><span class="line">    Order <span class="title function_">selectOrderById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OrderMapper.xml配置文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;OrderResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.xnj.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;cn.xnj.pojo.Customer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;OrderResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_order join t_customer</span><br><span class="line">        on t_order.customer_id = t_customer.customer_id</span><br><span class="line">        where order_id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build (inputStream);</span><br><span class="line">        sqlSession = sessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">OrderMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> mapper.selectOrderById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">        <span class="comment">//控制台输出</span></span><br><span class="line">        <span class="comment">//Order(orderId=1, orderName=o1, customerId=1, customer=Customer(customerId=1, customerName=c01, orderList=null))</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="对多映射"><a href="#对多映射" class="headerlink" title="对多映射"></a>对多映射</h2><ol><li><p>需求说明<br>根据客户id查询客户信息，客户信息包含其所有订单信息</p></li><li><p>CustomerMapper接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据客户id查询客户信息，客户信息包含用户信息</span></span><br><span class="line">    Customer <span class="title function_">selectCustomerById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CustomerMapper.xml配置文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.CustomerMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;CustomerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.xnj.pojo.Customer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--主键列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一对多关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;cn.xnj.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCustomerById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CustomerResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_customer join t_order</span><br><span class="line">        on t_order.customer_id = t_customer.customer_id</span><br><span class="line">        where t_customer.customer_id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_02</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">CustomerMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(CustomerMapper.class);</span><br><span class="line">    <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> mapper.selectCustomerById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//控制台输出</span></span><br><span class="line">    <span class="comment">//Customer(customerId=1, customerName=c01, orderList=[Order(orderId=1, orderName=o1, customerId=1, customer=null), Order(orderId=2, orderName=o2, customerId=1, customer=null), Order(orderId=3, orderName=o3, customerId=1, customer=null)])</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="MyBatis动态语句"><a href="#MyBatis动态语句" class="headerlink" title="MyBatis动态语句"></a>MyBatis动态语句</h1><h2 id="if和where标签"><a href="#if和where标签" class="headerlink" title="if和where标签"></a>if和where标签</h2><p>我们现在可以看到很多软件里查询时，筛选条件是可选可不选的，即sql语句是动态的，能根据你传递的值来动态的拼接执行sql</p><ul><li><code>if标签</code> 让我们可以有选择的加入SQL语句的片段。<ul><li>这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true </li><li>test属性 内部做比较运行，为true将标签内的sql语句进行拼接<ul><li>判断连接语句：<code>and | or</code> </li><li>大小比较： <code>&lt; &amp;lt;</code> <code>&gt; &amp;gt;</code> <code>&gt;= &amp;ge;</code> <code>&lt;=  &amp;le;</code></li><li><code>&lt;if test=&quot;salary!= null and salary &amp;gt; 10000.0&quot;&gt;&lt;/test&gt;</code></li></ul></li></ul></li><li><p><code>where标签</code>会自动去掉“标签体内前面多余的<code>and/or</code>,自适应添加<code>where关键字</code></p><ul><li>防止，当有多个条件时，随机的拼接导致sql语句错误</li><li>如第一个条件没拼接：<code>select * from t_emp where and salary=10000.0</code>的语法错误</li><li>没有一个条件拼接：<code>select * from t_emp where</code></li></ul></li><li><p><font color=red>对条件对象为Srting类型时，不仅要判空还需要判断是否为空值</font></p><ul><li><code>&lt;if test=&quot;name !=null and name !=&#39;&#39;&quot;&gt;&lt;/test&gt;</code></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    List&lt;Employee&gt; query(@Param(&quot;name&quot;) String name , @Param(&quot;salary&quot;) Double salary);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;query&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!= null &quot;</span>&gt;</span></span><br><span class="line">                emp_name=#&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;salary!= null&quot;</span>&gt;</span></span><br><span class="line">                and emp_salary=#&#123;salary&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">    List&lt;Employee&gt; employeeList = mapper.query(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(employeeList);</span><br><span class="line">    List&lt;Employee&gt; employeeList1 = mapper.query(<span class="literal">null</span>, <span class="number">10000.0</span>);</span><br><span class="line">    System.out.println(employeeList1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h2><p><code>set标签</code>和where标签类似，set标签能动态管理set语句，并切动态去掉两端多余的<code>逗号</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    void updateEmployeeDynamic(Employee employee) </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    <span class="comment">&lt;!-- set emp_name=#&#123;empName&#125;,emp_salary=#&#123;empSalary&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 SET emp_salary=?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 update t_emp where emp_id=?</span></span><br><span class="line"><span class="comment">            没有set子句的update语句会导致SQL语法错误</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_02</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">    <span class="comment">//使用builder模式创建对象，引入lombok依赖，实体类要加上@Builder注解</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span>  Employee.builder()</span><br><span class="line">            .empId(<span class="number">4</span>)</span><br><span class="line">            .empName(<span class="string">&quot;xnj&quot;</span>)</span><br><span class="line">            .empSalary(<span class="number">15000.0</span>)</span><br><span class="line">            .build();</span><br><span class="line">    mapper.updateEmployeeDynamic(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h2><p>使用trim标签控制条件部分两端是否包含某些字符</p><ul><li>prefix属性：指定要动态添加的前缀</li><li>suffix属性：指定要动态添加的后缀</li><li>prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值</li><li>suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  trim 代替 where--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender</span><br><span class="line">    from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary&gt;#&#123;empSalary&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empAge <span class="symbol">&amp;lt;</span>= 20&quot;</span>&gt;</span></span><br><span class="line">            emp_age=#&#123;empAge&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empGender==&#x27;male&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_gender=#&#123;empGender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  trim 代替 set--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary &quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="choose-when-otherwise标签"><a href="#choose-when-otherwise标签" class="headerlink" title="choose/when/otherwise标签"></a>choose/when/otherwise标签</h2><p>在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支</li><li><strong>即：必会执行一个条件，也只会执行一个条件</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary != null&quot;</span>&gt;</span>emp_salary=#&#123;empSalary&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary=?</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise,即查询全部</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a><strong><em>foreach标签</em></strong></h2><p><strong>collection</strong>属性：要遍历的集合</p><ul><li><strong>item</strong>属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</li><li><strong>separator</strong>属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</li><li><strong>open</strong>属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</li><li><strong>close</strong>属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</li><li>index属性：这里起一个名字，便于后面引用<ul><li>遍历List集合，这里能够得到List集合的索引值</li><li>遍历Map集合，这里能够得到Map集合的key </li></ul></li></ul><ol><li><p><strong>EmployeeMapper接口</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量查询</span></span><br><span class="line">    List&lt;Employee&gt; <span class="title function_">queryBatch</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Integer&gt; ids)</span>;</span><br><span class="line">    <span class="comment">// 批量插入</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;employees&quot;)</span> List&lt;Employee&gt; employees)</span>;</span><br><span class="line">    <span class="comment">// 批量删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatch</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Integer&gt; ids)</span>;</span><br><span class="line">    <span class="comment">// 批量更新</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBatch</span><span class="params">(<span class="meta">@Param(&quot;employees&quot;)</span> List&lt;Employee&gt; employees)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>EmployeeMapper.xml配置文件SQL语句</strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace=接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.xnj.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量查询 List&lt;Employee&gt; queryBatch(List&lt;Integer&gt; ids) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBatch&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where emp_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量插入 void insertBatch(List&lt;Employee&gt; employees) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp(emp_name,emp_salary)values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;employees&quot;</span> <span class="attr">item</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;employee.empName&#125;,#&#123;employee.empSalary&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量更新 void updateBatch(List&lt;Employee&gt; employees) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBatch&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;employees&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">            update t_emp set emp_name=#&#123;emp.empName&#125;,emp_salary=#&#123;emp.empSalary&#125; where  emp_id=#&#123;emp.empId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量删除 void deleteBatch(List&lt;Integer&gt; ids) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where emp_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>junit功能测试</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build (inputStream);</span><br><span class="line">        sqlSession = sessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//批量查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_03</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        <span class="comment">//List&lt;Employee&gt; employeeList = mapper.queryBatch(List.of(1, 2, 3, 4, 5));</span></span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line">        ids.add(<span class="number">4</span>);</span><br><span class="line">        ids.add(<span class="number">5</span>);</span><br><span class="line">        System.out.println(ids);</span><br><span class="line">        List&lt;Employee&gt; employeeList = mapper.queryBatch(ids);</span><br><span class="line">        System.out.println(employeeList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 批量添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_04</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xx1&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xx2&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xx3&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xx4&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;xx5&quot;</span>,<span class="number">1000.0</span>));</span><br><span class="line">        mapper.insertBatch(employees);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 批量修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_05</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">10</span>,<span class="string">&quot;xx1&quot;</span>,<span class="number">1500.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">11</span>,<span class="string">&quot;xx2&quot;</span>,<span class="number">1500.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">12</span>,<span class="string">&quot;xx3&quot;</span>,<span class="number">1500.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">13</span>,<span class="string">&quot;xx4&quot;</span>,<span class="number">1500.0</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">14</span>,<span class="string">&quot;xx5&quot;</span>,<span class="number">1500.0</span>));</span><br><span class="line">        mapper.updateBatch(employees);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 批量删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_06</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">        List&lt;Integer&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>));</span><br><span class="line">        mapper.deleteBatch(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>批量更新时需要注意</strong>：</p><ul><li>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</li><li><code>jdbc.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true</code></li></ul></li><li><p><strong>mapper接口方法定义参数时注意</strong>：</p><ul><li>如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用<code>collection</code>或<code>list</code>来引用这个list集合。这一点可以通过异常信息看出来：</li><li><code>Parameter &#39;empList&#39; not found. Available parameters are [arg0, collection, list]</code></li></ul></li></ol><h1 id="Sql片段"><a href="#Sql片段" class="headerlink" title="Sql片段"></a>Sql片段</h1><p><strong>抽取重复的SQL片段</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><br>引用已抽取的SQL片段<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Mapper批量映射优化"><a href="#Mapper批量映射优化" class="headerlink" title="Mapper批量映射优化"></a>Mapper批量映射优化</h1><p>前面提过一嘴，当你创建<code>XxxMapper.xml</code>配置文件时，建议目录应该和<code>XxxMapper</code>一样，如：</p><ul><li>src/main/java/<code>cn.xnj.mapper.XxxMapper.java</code><ul><li>在此处创建时，用<code>.</code>，idea能自动识别并创建包对应的文件目录结构</li></ul></li><li>src/main/resource<code>cn/xnj/mapper/XxxMapper.xml</code><ul><li>在此处创建时，用<code>.</code>idea不能识别为多层目录结构，要用<code>/</code></li></ul></li><li>这样在打包后能看到，<code>XxxMapper.java</code>和<code>XxxMapper.xml</code>存放在一个同一个位置</li></ul><p>这么做不仅仅是口头规范，在配置批量映射时也是要求目录的格式<br>在<code>mybatis-config.xml</code>配置文件中，Mapper 配置文件很多时，需要在全局配置文件中一个一个注册，这样太麻烦：<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/xnj/mapper/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/xnj/mapper/UserMapper.xml&quot;</span>/&gt;</span> </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在我们可以直接在<code>mybatis-config.xml</code>配置文件指定 Mapper 映射文件时，只指定其所在的包：<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn/xnj/mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="分页插件PageHelper"><a href="#分页插件PageHelper" class="headerlink" title="分页插件PageHelper"></a>分页插件PageHelper</h1><ol><li>pom.xml引入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在mybatis-config.xml全局配置文件中添加分页插件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>页插件使用<br>sql语句中不需要写<code>limit</code>，结尾不要写<code>;</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--分页查询  List&lt;Employee&gt; queryByPage();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.xnj.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在查询方法中使用分页</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="comment">// 分页查询</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_07</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> sqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line">    <span class="comment">//调用之前，先设置分页数据(当前页码，每页显示多少数据)</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Employee&gt; list = employeeMapper.queryByPage();</span><br><span class="line">    <span class="comment">//将查询到的数据封装到一个pageInfo的分页实体类当中</span></span><br><span class="line">    PageInfo&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;pageInfo = &quot;</span> + pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal(); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数:total = &quot;</span> + total);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> pageInfo.getPages();  <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;总页数:pages = &quot;</span> + pages);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageInfo.getPageNum(); <span class="comment">// 获取当前页码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前页码:pageNum = &quot;</span> + pageNum);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageInfo.getPageSize(); <span class="comment">// 获取每页显示记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示记录数:pageSize = &quot;</span> + pageSize);</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = pageInfo.getList(); <span class="comment">//获取查询页的数据集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询页的数据集合:employees = &quot;</span> + employees);</span><br><span class="line">    <span class="comment">// 遍历集合</span></span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="MyBatisX插件"><a href="#MyBatisX插件" class="headerlink" title="MyBatisX插件"></a>MyBatisX插件</h1><p>一个实用的插件，当你书写正确时，能自动定位你的mapper接口方法到mapper.xml配置文件中的sql语句<br>搜索 MyBatisX 并安装(小鸟图标🐦)。</p><div class="note info flat"><p>笔记：<a href="https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF">https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF</a></p></div>]]></content>
    
    
    <summary type="html">MyBatis框架复习</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="mybatis" scheme="https://xusir.fun/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring-AOP</title>
    <link href="https://xusir.fun/posts/2409211427.html"/>
    <id>https://xusir.fun/posts/2409211427.html</id>
    <published>2024-09-21T14:27:00.000Z</published>
    <updated>2025-03-18T08:04:27.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringAOP框架介绍"><a href="#SpringAOP框架介绍" class="headerlink" title="SpringAOP框架介绍"></a>SpringAOP框架介绍</h1><ol><li>AOP一种区别于OOP的编程思维，用来完善和解决OOP的非核心代码冗余和不方便统一维护问题！</li><li>代理技术（动态代理|静态代理）是实现AOP思维编程的具体技术，但是自己使用动态代理实现代码比较繁琐！</li><li>Spring AOP框架，基于AOP编程思维，封装动态代理技术，简化动态代理技术实现的框架！SpringAOP内部帮助我们实现动态代理，我们只需写少量的配置，指定生效范围即可,即可完成面向切面思维编程的实现！</li></ol><div class="table-container"><table><thead><tr><th>涉及的注解</th><th>含义</th><th>位置</th><th>值</th></tr></thead><tbody><tr><td>@Before()</td><td>目标方法执行前</td><td>增强方法</td><td>切点或方法</td></tr><tr><td>@AfterReturning()</td><td>目标方法正常执行后</td><td>增强方法</td><td>切点或方法,返回值</td></tr><tr><td>@AfterThrowing()</td><td>目标方法出异常</td><td>增强方法</td><td>切点或方法,异常</td></tr><tr><td>@After()</td><td>目标方法执行后</td><td>增强方法</td><td>切点或方法</td></tr><tr><td>@Around()</td><td>自定义目标方法执行时机</td><td>增强方法</td><td>切点或方法</td></tr><tr><td>@Pointcut</td><td>定义切点</td><td>切点空方法</td><td>切点(“execution(<em> cn..</em>.*(..))”)</td></tr><tr><td>@Aspect</td><td>定义切面</td><td>类</td><td></td></tr><tr><td>@EnableAspectJAutoProxy</td><td>开启aspect的注解</td><td>配置类</td><td></td></tr><tr><td>@Order()</td><td>定义切面优先级</td><td>切面类</td><td>值越小优先级越高</td></tr></tbody></table></div><hr><h1 id="基于注解的方式实现SpringAOP"><a href="#基于注解的方式实现SpringAOP" class="headerlink" title="基于注解的方式实现SpringAOP"></a>基于注解的方式实现SpringAOP</h1><h1 id="快速实现"><a href="#快速实现" class="headerlink" title="快速实现"></a>快速实现</h1><ol><li><strong>引入依赖</strong> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring-context会帮我们传递过来spring-aop</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;6.0.6&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>引入接口</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cn.xnj.service</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>引入实现类</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cn.xnj.service.impl</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能!</span></span><br><span class="line"><span class="comment">// aop - 只针对ioc容器对象，所以要注册ioc容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>配置类</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cn.xnj.config</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>测试类</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">test/java/cn.xnj.test</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(classes = MyConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(result);<span class="comment">//控制台输出： 2</span></span><br><span class="line">        <span class="comment">//能运行成功说明环境搭建成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>切面类实现</strong>(cn.xnj.advice)<pre><code>步骤/** public class LogAdvice      * 此类为增强类，增强类的内部要存储增强代码     *  1. 定义方法存储增强代码     *     具体定义几个方法，根据插入的的位置决定     *          *  2. 使用注解配置指定插入目标方法的位置     *     前置  @Before     *     后置  @AfterReturning     *     异常  @AfterThrowing     *     最后  @After     *     环绕  @Around     *          *     可以形象理解为如下     *     try&#123;     *          前置     *          目标方法执行     *          后置     *     &#125;catch()&#123;     *         异常     *     &#125;finally()&#123;     *          最后     *     &#125;     *     *  3. 配置切点表达式 [ 选中插入的方法  切点 ]     *     &quot;execution(* cn.xnj.service.*.*(..))&quot;   切点表达式  固定格式     *     *  4. 补全注解     *     加入ioc容器  @Component     *     配置切面  @Aspect = 切点 + 增强     *     *  5. 开启aop注解驱动     *    在配置类上开启aop注解驱动的注解 @EnableAspectJAutoProxy     *    等同于 xml配置文件 &lt;aop:aspectj-autoproxy/&gt;  开启aop注解驱动     *     */</code></pre> a.增强类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册到ioc容器中</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 声明当前类为增强类-切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* cn.xnj.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* cn.xnj.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* cn.xnj.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法出现异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> b.配置类开启aspect的注解(<code>@EnableAspectJAutoProxy</code>) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj&quot;)</span>    <span class="comment">//请确保aop增强也在扫描的范围内</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>     <span class="comment">// 开启aspect的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>输出结果</strong><br> 回到前面的测试，再次运行即可看到输出：<pre><code>     方法开始了       方法结束了       2</code></pre></li></ol><hr><h1 id="获取通知细节信息"><a href="#获取通知细节信息" class="headerlink" title="获取通知细节信息"></a>获取通知细节信息</h1><p>下面演示用的组件如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cn.xnj.servcie</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cn.xnj.service.impl</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;<span class="comment">//两数相加</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;<span class="comment">//两数相除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试用的组件如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(classes = MyConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_02</span><span class="params">()</span>&#123;</span><br><span class="line">        calculator.div(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JointPoint接口"><a href="#JointPoint接口" class="headerlink" title="JointPoint接口"></a>JointPoint接口</h2><p>需要获取<strong>方法签名</strong>、<strong>传入的实参等信息</strong>时，可以在通知方法声明JoinPoint类型的形参。</p><ul><li>要点1：JoinPoint 接口通过 getSignature() 方法获取目标方法的签名（方法声明时的完整信息）</li><li>要点2：通过目标方法签名对象获取方法名</li><li>要点3：通过 JoinPoint 对象获取外界调用目标方法时传入的实参列表组成的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int cn.xnj.service.Calculator.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.通过JoinPoint对象获取目标方法签名对象</span></span><br><span class="line">        <span class="comment">// 方法的签名：一个方法的全部声明信息</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.通过方法的签名对象获取目标方法的详细信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);<span class="comment">//方法名</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> signature.getModifiers();<span class="comment">// 方法的修饰符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;modifiers = &quot;</span> + modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">        System.out.println(<span class="string">&quot;declaringTypeName = &quot;</span> + declaringTypeName);<span class="comment">// 目标方法所在类的全限定类名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.通过JoinPoint对象获取外界调用目标方法时传入的实参列表</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.由于数组直接打印看不到具体数据，所以转换为List集合</span></span><br><span class="line">        List&lt;Object&gt; argList = Arrays.asList(args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP前置通知] &quot;</span> + methodName + <span class="string">&quot;方法开始了，参数列表：&quot;</span> + argList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methodName = <span class="type">add</span></span><br><span class="line"><span class="variable">modifiers</span> <span class="operator">=</span> <span class="number">1025</span></span><br><span class="line">declaringTypeName = cn.xnj.service.Calculator</span><br><span class="line">[AOP前置通知] add方法开始了，参数列表：[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h2><p>在返回通知中，通过<code>@AfterReturning</code>注解的<code>returning</code>属性获取目标方法的返回值！</p><ul><li>在方法形参上加：<code>(Object result)</code> result表示接收返回结果</li><li>在注解里添加：<code>(returning = &quot;接收返回结果的形参名&quot;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(</span></span><br><span class="line"><span class="meta">            value = &quot;execution(public int cn.xnj.service.Calculator.add(int,int)))</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">            returning = &quot;</span>result<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public void afterThrowing(JoinPoint joinPoint, Object result)&#123;</span></span><br><span class="line"><span class="string">        String name = joinPoint.getSignature().getName();</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>方法的名字是: <span class="string">&quot; + name);</span></span><br><span class="line"><span class="string">        System.out.println(&quot;</span>方法的返回值是: <span class="string">&quot; + result);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>控制台输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法的名字是: add</span><br><span class="line">方法的返回值是: <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="异常对象捕捉"><a href="#异常对象捕捉" class="headerlink" title="异常对象捕捉"></a>异常对象捕捉</h2><p>在异常通知中，通过<code>@AfterThrowing</code>注解的<code>throwing</code>属性获取目标方法抛出的异常对象</p><ul><li>在方法的形参上添加<code>(Throwable e)</code> e表示接收方法返回的异常</li><li>在注解上添加<code>throwing = &quot;接收异常的形参名&quot;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(</span></span><br><span class="line"><span class="meta">            value = &quot;execution(public int cn.xnj.service.Calculator.div(int,int))&quot;,</span></span><br><span class="line"><span class="meta">            throwing = &quot;e&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">(JoinPoint joinPoint, Throwable e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法的名字是: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法的异常是: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法的名字是: div</span><br><span class="line">方法的异常是: java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></table></figure></p><h1 id="切点表达式语法"><a href="#切点表达式语法" class="headerlink" title="切点表达式语法"></a>切点表达式语法</h1><p><img src="https://secure2.wostatic.cn/static/u3zGFYMEQBEc9aXovEQo1R/apoimg011.png?auth_key=1726909473-h3AAaozYJfrywi36cEQJzP-0-3dc1c03e3ed5a915110e4b250a4a9dac&amp;image_process=resize,w_1458/format,webp/quality,Q_100&amp;file_size=88902" alt=""></p><p><strong>语法是固定格式的：execution(1 2 3.4.5.(6))</strong></p><ul><li>括号里面一共6个部分</li><li>1：访问修饰符 2：方法的返回参数类型 3：包的位置 4：类名 5：方法名 6：方法参数</li><li>如：<code>execution(public int cn.xnj.service.Calculator.div(int,int))</code></li></ul><ol><li><p>访问修饰符</p><ul><li>public / private</li></ul></li><li><p>方法的返回参数类型</p><ul><li>String int void</li><li>如果不考虑访问修饰符和返回值! 这两位整合在一起写作<code>*</code></li><li>不考虑的时候必须两个都不考虑！不能出现 <code>* String</code></li></ul></li><li><p>包的位置</p><ul><li>具体包：<code>cn.xnj.service.impl</code></li><li>单层模糊：<code>cn.xnj.service.*</code> * 单层模糊</li><li>多层模糊：<code>cn..impl</code> ..任意层的模糊</li><li>注意： ..不能放开头</li></ul></li><li><p>类的名称</p><ul><li>具体：<code>CalculatorPureImpl</code></li><li>模糊：<code>*</code></li><li>部分模糊：<code>*Impl</code> 表示以Impl结尾的类</li></ul></li><li><p>方法名 语法和类名一致</p></li><li><p>(6)形参参数列表</p><ul><li>没有参数：<code>()</code></li><li>有具体参数：<code>(String)</code>、<code>(String,int)</code></li><li>模糊参数：<code>(..)</code></li><li>部分模糊：<ul><li><code>(String..)</code> String后面还有没有参数无所谓</li><li><code>(..int)</code> 最后一个参数为int</li><li><code>(String..int)</code> 第一个参数为String、最后一个参数为int</li></ul></li></ul></li></ol><p><strong>场景示例</strong></p><ol><li>查询某包某类下，访问修饰符是公有，返回值是int的全部方法<br><code>execution(public int xx.xx.jj.*(..))</code></li><li>查询某包下类中第一个参数是String的方法<br><code>execution(* xx.xx.jj.*(String..))</code></li><li>查询全部包下，无参数的方法！<br><code>execution(* *..*.*())</code></li><li>查询com包下，以int参数类型结尾的方法<br><code>execution(* com..*.*(..int))</code></li><li>查询指定包下，Service开头类的私有返回值int的无参数方法<br><code>execution(private int xx.xx.Service*.*())</code></li></ol><hr><h1 id="切点表达式的提取-重用"><a href="#切点表达式的提取-重用" class="headerlink" title="切点表达式的提取(重用)"></a>切点表达式的提取(重用)</h1><ol><li><p><strong>当前类中提取切点</strong></p><ul><li>定义一个空方法并加上注解<code>@pointcut()</code></li><li>在该注解里写切点表达式</li><li>在增强注解中引用切点表达式的方法即可 直接调用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn..impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mp</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;mp()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;mp()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>切点统一管理</strong></p><ul><li>创建一个存储切点的类</li><li>创建空方法单独维护切点表达式</li><li>引用方式：类的全限定符合.方法名()</li></ul><p>统一管理切点的类(cn.xnj.pointcut)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 注册到ioc容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPointCut</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.xnj.service.*.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.xnj.service.*.div(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引用(cn.xnj.advice)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;cn.xnj.pointcut.MyPointCut.log()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;cn.xnj.pointcut.MyPointCut.log()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h1><p>环绕通知对应整个 try…catch…finally 结构，包括前面四种通知的所有功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxAdvice</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public int  cn.xnj.service.Calculator.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;p()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transatcion</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//保证目标方法被执行</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();<span class="comment">// 外界传入的实参</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开启事务&quot;</span>);<span class="comment">// 相当于前置通知：@Before</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result1</span> <span class="operator">=</span> joinPoint.proceed(args);<span class="comment">// 执行目标方法，并获取返回结果。</span></span><br><span class="line">            System.out.println(<span class="string">&quot;提交事务&quot;</span>);<span class="comment">// 相当于后置通知: @AfterReturning</span></span><br><span class="line"></span><br><span class="line">            result = result1;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常，回滚事务&quot;</span>);<span class="comment">// 相当于异常通知: @AfterThrowing</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;释放资源&quot;</span>);<span class="comment">// 相当于最终通知: @After</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>测试类控制台输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">结束提交事务</span><br><span class="line">释放资源</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><hr><h1 id="切面优先级"><a href="#切面优先级" class="headerlink" title="切面优先级"></a>切面优先级</h1><p>相同的目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序<br>想象一个<strong>树的年轮图</strong>：</p><ul><li>目标方法就是最里面的圈，每一个圈代表一个切面</li><li>优先级越高的切面，越是靠外边(优先级越低靠内侧，离目标方法近)</li><li>执行的顺序相当于砍树，先是外侧，再是内侧,再是外侧<ul><li><strong>优先级高的前置先执行，后置后执行</strong> </li></ul></li></ul><p>使用<code>@Order</code>注解可以控制切面的优先级</p><ul><li>@Order(较小的数): 优先级高</li><li>@Order(较大的数): 优先级低</li></ul><p><img src="https://secure2.wostatic.cn/static/iEnKQ8R7ApCSeaF4x3wuYa/aopimg012.png?auth_key=1726983804-m8zdLPACfMQy3aM3CZok6k-0-8cb59f2142f5e043bf50227b6064abbd&image_process=resize,w_648/format,webp/quality,Q_100&file_size=34616" width="50%;"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(10)</span><span class="comment">// 优先级 优先级高的前置先执行，后置后执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxAdvice</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="使用XML方式实现SpringAOP"><a href="#使用XML方式实现SpringAOP" class="headerlink" title="使用XML方式实现SpringAOP"></a>使用XML方式实现SpringAOP</h1><ol><li>准备组件 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cn.xnj.service</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span><span class="comment">//注入ioc容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServcie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cn.xnj.advice</span><br><span class="line"><span class="comment">//切面类</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//注入ioc容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开启事务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;提交事务&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(JoinPoint joinPoint,Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;回滚事务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>Xml配置文件</strong><br>spring-01.xml <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xnj&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用标签进行aop的配置 ：切面配置，声明切点，位置指定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 声明切点标签  @Point--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn..service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;mypc&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn..service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 声明切面 @Aspect</span></span><br><span class="line"><span class="comment">            ref= 增强对象  order= 切面的优先级 值越小 优先级越高 在外圈</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span>  <span class="attr">ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">order</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 声明通知 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- begin -&gt; @Before(&quot;pc()&quot;) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;begin&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- commit-&gt; @After(value=&quot;pc()&quot;,returing=&quot;result&quot;)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- rollback-&gt; @AfterThrowing(value=&quot;pc()&quot;,throwing=&quot;e&quot;)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;rollback&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;e&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>测试</strong> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test/java/cn.xnj.test</span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:spring-01.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAopXmlTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServcie userServcie;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> userServcie.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>输出</strong> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启事务</span><br><span class="line">提交事务</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果使用AOP技术，目标类有接口，必须使用接口类型接收IoC容器中的代理组件</p></blockquote><hr><h1 id="Spring声明式事务"><a href="#Spring声明式事务" class="headerlink" title="Spring声明式事务"></a>Spring声明式事务</h1><h2 id="准备演示项目"><a href="#准备演示项目" class="headerlink" title="准备演示项目"></a>准备演示项目</h2><ol><li>导入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 和 连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>数据库准备 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">create database studb;</span><br><span class="line"></span><br><span class="line">use studb;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">students</span> <span class="params">(</span></span><br><span class="line"><span class="params">  id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  name VARCHAR(<span class="number">50</span>)</span> NOT NULL,</span><br><span class="line">  gender <span class="title function_">VARCHAR</span><span class="params">(<span class="number">10</span>)</span> NOT NULL,</span><br><span class="line">  age INT,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO <span class="title function_">students</span> <span class="params">(id, name, gender, age, class)</span></span><br><span class="line">VALUES</span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;刘七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">6</span>, <span class="string">&#x27;陈八&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">7</span>, <span class="string">&#x27;杨九&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">8</span>, <span class="string">&#x27;吴十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>外部配置文件 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure></li><li>spring配置类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//druid连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//jdbcTemplate</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>准备dao/service层<br>dao</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNameById</span><span class="params">(String name,Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update students set name = ? where id = ? ;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> jdbcTemplate.update(sql, name, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAgeById</span><span class="params">(Integer age,Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update students set age = ? where id = ? ;&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,age,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>service</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>搭建测试环境 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: cn.xnj.test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(JavaConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基本事务控制"><a href="#基本事务控制" class="headerlink" title="基本事务控制"></a>基本事务控制</h2><ol><li><p>配置事务管理器</p><ul><li>在配置类里配置装配事务管理实现对象<code>TransactionManager</code></li><li>在配置类上添加<code>@EnableTransactionManagement</code>注解，来支持事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务注解的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//druid连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//jdbcTemplate</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//装配事务管理实现对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="comment">//内部要进行事务的操作，基于durid连接池</span></span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>  ();</span><br><span class="line">        <span class="comment">//设置连接池</span></span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用声明事务注解<code>@Transactional</code></p><ul><li>加在类上：该类下的所有方法都有事务</li><li>加在方法上：该方法有事务</li></ul><p>在原本的方法上添加注解，并加入一条错误语句模拟异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>/<span class="number">0</span>;<span class="comment">//模拟出现异常，验证事务回滚</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试<br>没有加<code>@Transactional</code>时</p><ul><li>观察数据库发现：错误代码之前的sql执行成功了，修改了对应数据，而错误代码后的没有执行。</li><li>控制台输出报错信息</li><li>这会导致<strong>数据不一致</strong>的问题(比如说转账，转账者扣了钱，收款者未收到款)</li></ul><p>加了<code>@Transactional</code>后</p><ul><li>观察数据库发现：数据库中的数据没有被修改，事务回滚了</li><li>控制台输出报错信息</li></ul></li></ol><h2 id="事务属性—只读"><a href="#事务属性—只读" class="headerlink" title="事务属性—只读"></a>事务属性—只读</h2><ol><li>只读介绍：当这个操作不涉及写操作。将其设置为只读，这样数据库就能够针对查询操作来进行优化。</li><li><p>语法：</p><ul><li>在注解中添加属性：<code>readOnly</code></li><li><code>@Transactional(readOnly = true)</code>//只读事务 </li></ul></li><li><p>说明：如果我们给某个类上添加了<code>@Transactional</code>注解时，其下所有方法都会有事务，当其中的一些方法不涉及写操作时，我们就可以给这些方法上添加<code>@Transactional(readOnly = true)</code>注解</p></li></ol><h2 id="事务属性—超时"><a href="#事务属性—超时" class="headerlink" title="事务属性—超时"></a>事务属性—超时</h2><ol><li><p>超时介绍：事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。概括即：<code>超时回滚，释放资源</code></p></li><li><p>语法：</p><ul><li>在注解中添加属性：<code>timeout</code></li><li><code>timeout</code>的值：单位为秒,默认值为-1，表示永不超时</li><li><code>@Transactional(timeout = 3)</code></li></ul></li><li><p>说明：当<code>@Transactional(timeout = 3)</code>加在了类上，而类下的方法也声明了<code>@Transactional</code>注解，但没有声明超时时，这时方法上的注解会覆盖类上的注解，该方法不会生效超时。</p></li></ol><h2 id="事务属性—事务异常"><a href="#事务属性—事务异常" class="headerlink" title="事务属性—事务异常"></a>事务属性—事务异常</h2><ol><li><p>事务异常介绍：当我们加了<code>@Transactional</code>注解后，默认只针对运行时异常回滚，编译时异常不回滚。我们可以设置事务回滚的异常，也可以指定在发送某异常时不回滚</p></li><li><p>指定异常回滚<br>语法：</p><ul><li>在注解中添加属性：<ul><li><code>rollbackFor</code>属性：指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</li><li><code>@Transactional(rollbackFor = Exception.class)</code></li><li>指定为<code>Exception.class</code>,表示所有异常都回滚</li></ul></li></ul></li><li><p>指定异常不回滚<br>在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。<br>语法：</p><ul><li>在注解中添加属性：</li><li><code>noRollbackFor</code>属性：指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</li><li><code>@Transactional(rollbackFor = Exception.class,noRollbackFor = FileLockInterruptionException.class)</code></li><li>指定为<code>FileLockInterruptionException.class</code>,在io操作找不到文件时回滚</li></ul></li></ol><h2 id="事务属性—隔离级别"><a href="#事务属性—隔离级别" class="headerlink" title="事务属性—隔离级别"></a>事务属性—隔离级别</h2><ol><li><p>事务隔离级别<br>数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。常见的隔离级别包括：</p><ol><li>读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。</li><li>读已提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。</li><li>可重复读（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。</li><li>串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。</li></ol><p>不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。一般推荐第二个级别</p></li><li><p>事务隔离级别设置<br>语法：</p><ul><li>在注解中添加属性：<code>isolation</code></li><li><code>@Transactional(isolation = Isolation.READ_COMMITTED)</code>,级别：读已提交</li></ul></li></ol><h2 id="事务属性—传播行为"><a href="#事务属性—传播行为" class="headerlink" title="事务属性—传播行为"></a>事务属性—传播行为</h2><ol><li>propagation属性<br>propagation 属性的可选值由 org.springframework.transaction.annotation.Propagation 枚举类提供：</li></ol><div class="table-container"><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED  默认值</td><td>如果父方法有事务，就加入，如果没有就新建自己独立！</td></tr><tr><td>REQUIRES_NEW</td><td>不管父方法是否有事务，我都新建事务，都是独立的！</td></tr></tbody></table></div><ol><li><p>语法</p><ul><li>在注解中添加属性：<code>propagation</code></li><li><code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code></li></ul></li><li><p>举例代码<br>声明两个业务方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><span class="comment">//自己独立为新事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo1</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span><span class="comment">//默认，加入到外部事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo2</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">21</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;张老三&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 整合到外部事务</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//外部事务整合两个事物</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo1();</span><br><span class="line">        studentService.changeInfo2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>如何理解？</p><ul><li>如果两个事务设置的<code>默认值</code>，则都加入外部的事务，当其中一个事务发生回滚，则另一个事务也会执行回滚</li><li>如果其中一个事务设置的<code>REQUIRES_NEW</code>,则该事务视为一个独立的事务，不加入外部事物中，即使另一个事务发生了回滚，该事务不受干扰，继续正常执行</li></ul><ol><li>注意<br>在同一个类中，对于@Transactional注解的方法调用，事务传播行为不会生效。这是因为Spring框架中使用代理模式实现了事务机制，在同一个类中的方法调用并不经过代理，而是通过对象的方法调用，因此@Transactional注解的设置不会被代理捕获，也就不会产生任何事务传播行为的效果</li></ol><div class="note info flat"><p>笔记：<a href="https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF">https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF</a></p></div>]]></content>
    
    
    <summary type="html">SpringAop面向切面编程复习</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="spring" scheme="https://xusir.fun/tags/spring/"/>
    
    <category term="springAop" scheme="https://xusir.fun/tags/springAop/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IOC</title>
    <link href="https://xusir.fun/posts/2409181918.html"/>
    <id>https://xusir.fun/posts/2409181918.html</id>
    <published>2024-09-18T19:18:00.000Z</published>
    <updated>2025-03-18T08:04:27.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>IoC 容器：</strong><br>Spring IoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p><p><strong>IoC（Inversion of Control）控制反转</strong><br>IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。</p><p><strong>DI (Dependency Injection) 依赖注入</strong><br>DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p><h1 id="基于XML配置方式组件管理"><a href="#基于XML配置方式组件管理" class="headerlink" title="基于XML配置方式组件管理"></a>基于XML配置方式组件管理</h1><h2 id="组件（Bean）信息声明配置（IoC）"><a href="#组件（Bean）信息声明配置（IoC）" class="headerlink" title="组件（Bean）信息声明配置（IoC）"></a>组件（Bean）信息声明配置（IoC）</h2><ol><li><strong>准备项目</strong><br>a.创建maven工程(ssm-spring-part)作为父工程<br>设置打包方式为<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>，删除src目录<br>b.导入SpringIoC相关依赖(pom.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>基于无参构造函数</strong><br>a.创建子模块(spring-ioc-xml-01)<br>b.准备组件类(HappyComponent)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.ioc_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//默认包含无参数构造函数</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>c.在resource目录下创建携带spring约束的xml配置文件(spring-01.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.使用无参数构造函数实例化的组件</span></span><br><span class="line"><span class="comment">         &lt;bean -一个组件信息  -一个组件对象</span></span><br><span class="line"><span class="comment">         id  -组件的标识  -唯一 -方便后期读取</span></span><br><span class="line"><span class="comment">         class - 组件类的权限定服 - 包名+类名</span></span><br><span class="line"><span class="comment">         /&gt;</span></span><br><span class="line"><span class="comment">         将一个组件类 - 声明两个组件信息 -【默认是单例模式】 -会实例化两个组件对象 new new</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_01.HappyComponent&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_01.HappyComponent&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span> </span><br></pre></td></tr></table></figure><ul><li>bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件信息</li><li>id属性：bean的唯一标识,方便后期获取Bean！</li><li>class属性：组件类的全限定符！</li><li>注意：要求当前组件类必须包含无参数构造函数！ </li></ul></li><li><strong>基于静态工厂方法实例化</strong><br>a.准备组件类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ClientService</span> <span class="variable">clientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientService</span>();</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">ClientService</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title function_">createInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clientService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.编写xml配置文件(spring-01.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.基于静态工厂方法进行ioc的配置</span></span><br><span class="line"><span class="comment">    &lt;bean -一个组件信息  -一个组件对象</span></span><br><span class="line"><span class="comment">    id  -组件的标识  -唯一 -方便后期读取</span></span><br><span class="line"><span class="comment">    class - 工厂类的权限定服 - 包名+类名</span></span><br><span class="line"><span class="comment">    factory-method - 工厂类中的静态方法名</span></span><br><span class="line"><span class="comment">    /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_01.CilentService&quot;</span>    <span class="attr">factory-method</span>=<span class="string">&quot;createInstance&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>class属性：指定工厂类的全限定符！</li><li>factory-method: 指定静态工厂方法，注意，该方法必须是static方法。</li></ul></li><li><strong>基于实例工厂方法实例化</strong><br>a.准备组建类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientServiceImpl</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.xnj.ioc_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultServiceLocator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ClientServiceImpl</span> <span class="variable">clientService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClientServiceImpl <span class="title function_">createClientServiceInstance</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.编写xml配置文件(spring-01.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.基于非静态工厂方法进行ioc的配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3.1配置工厂类的组件信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;defaultServiceLocator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_01.DefaultServiceLocator&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3.2通过指定非静态工厂对象和方法名 来配置生成的ioc信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clientServiceImp&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;defaultServiceLocator&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createClientServiceInstance&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>factory-bean属性：指定当前容器中工厂Bean 的名称。</li><li>factory-method:  指定实例工厂方法名。注意，实例方法必须是非static的！</li></ul></li></ol><h2 id="组件（Bean）依赖注入配置（DI）"><a href="#组件（Bean）依赖注入配置（DI）" class="headerlink" title="组件（Bean）依赖注入配置（DI）"></a>组件（Bean）依赖注入配置（DI）</h2><ol><li><strong>基于构造函数的依赖注入(单个构造参数)</strong><br>a.准备组件类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xnj.ioc_02;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.xnj.ioc_02;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.准备配置文件(spring-02.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.单个构造参数注入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用类bean声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构造参数传值di的配置</span></span><br><span class="line"><span class="comment">         &lt;constructor-arg 构造参数传值的id配置</span></span><br><span class="line"><span class="comment">         value= 直接属性值  String name =&quot;张三&quot;  int age=23</span></span><br><span class="line"><span class="comment">         ref = 引用其他的bean beanId的值</span></span><br><span class="line"><span class="comment">         /&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>基于构造函数的依赖注入(多个构造参数)</strong><br>a.准备组件类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(<span class="type">int</span> age , String name ,UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.编写配置文件(spring-02.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2.多个构造参数注入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 场景1: 多参数，可以按照相应构造函数的顺序注入数据 </span></span><br><span class="line"><span class="comment">    UserService(int age , String name ,UserDao userDao)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 场景2: 多参数，可以按照相应构造函数的名称注入数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 场景2: 多参数，可以按照相应构造函数的角标注入数据</span></span><br><span class="line"><span class="comment">           index从0开始 构造函数(0,1,2....)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value直接注入基本类型值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵伟风&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 被引用类bean声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.UserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>constructor-arg标签：指定构造参数和对应的值</li><li>constructor-arg标签：name属性指定参数名、index属性指定参数角标、value属性指定普通属性值</li></ul></li><li><strong>基于Setter方法依赖注入</strong><br>a.准备组件类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class MovieFinder&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMovieLister</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">private</span> String movieName;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.movieFinder = movieFinder;</span><br><span class="line">     &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieName</span><span class="params">(String movieName)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.movieName = movieName;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.编写配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.触发setter方法进行注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.MovieFinder&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleMovieLister&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_02.SimpleMovieLister&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- setter方法，注入movieFinder对象的标识id</span></span><br><span class="line"><span class="comment">         name = 属性名  setter方法的名去掉set和首字母小写的值 setMovieFinder -&gt; movieFinder</span></span><br><span class="line"><span class="comment">         value | ref 二选一 value=&quot;直接属性值&quot; ref= 引用bean的id值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieFinder&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;movieFinder&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;movieName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;消失的她&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="IoC容器创建和使用"><a href="#IoC容器创建和使用" class="headerlink" title="IoC容器创建和使用"></a>IoC容器创建和使用</h2><ol><li><strong>介绍</strong><br>想要配置文件中声明组件类信息真正的进行实例化成Bean对象和形成Bean之间的引用关系，我们需要声明IoC容器对象，读取配置文件，实例化组件和关系维护的过程都是在IoC容器中实现的！</li><li><strong>容器实例化</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建ioc容器并且读取配置文件</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIoC</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//创建容器，选择合适的容器实现</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 接口</span></span><br><span class="line"><span class="comment">      *   BeanFactory</span></span><br><span class="line"><span class="comment">      *   ApplicationContext</span></span><br><span class="line"><span class="comment">      * 实现类</span></span><br><span class="line"><span class="comment">      *   可以直接通过构造函数实例化</span></span><br><span class="line"><span class="comment">      *   ClassPathXmlApplicationContext 读取类路径下的xml配置方式 classes</span></span><br><span class="line"><span class="comment">      *   FileSystemXmlApplicationContext   读取指定文件位置的xml配置方式</span></span><br><span class="line"><span class="comment">      *   AnnotationConfigApplicationContext 读取配置类方式的ioc容器</span></span><br><span class="line"><span class="comment">      *   WebApplicationContent       web项目专属的配置的ioc容器</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//方式1：直接创建容器并且指定配置文件【推荐】</span></span><br><span class="line">     <span class="comment">//构造函数(String...配置文件) 可以写一个或多个</span></span><br><span class="line">     <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-03.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//方式2：先创建ioc容器，再指定配置文件，再刷新</span></span><br><span class="line">     <span class="comment">//源码的配置过程：先创建容器【spring】 和配置文件指定分开【自己指定】</span></span><br><span class="line">     <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">     applicationContext1.setConfigLocation(<span class="string">&quot;spring-03.xml&quot;</span>);<span class="comment">//设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置</span></span><br><span class="line">     applicationContext1.refresh();<span class="comment">//后配置的文件,需要调用refresh方法,触发刷新配置</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><strong>bean对象读取</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//在Ioc容器中获取组件bean</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanFromIoC</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建容器对象</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">    applicationContext.setConfigLocation(<span class="string">&quot;spring-03.xml&quot;</span>);</span><br><span class="line">    applicationContext.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.读取ioc容器组件</span></span><br><span class="line">    <span class="comment">//方式1：直接根据beanId获取即可  返回值类型是Object 需要强转【不推荐】</span></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> (HappyComponent) applicationContext.getBean(<span class="string">&quot;happyComponent&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2：根据beanID,同时指定bean的类型Class</span></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;happyComponent&quot;</span>, HappyComponent.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方案3：直接根据类型获取</span></span><br><span class="line">    <span class="comment">//如果容器中存在多个类型相同的组件，那么会报错：NoUniqueBeanDefinitionException(无唯一 Bean 定义异常)</span></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent2</span> <span class="operator">=</span> applicationContext.getBean(HappyComponent.class);</span><br><span class="line"></span><br><span class="line">    happyComponent2.doWork();<span class="comment">//输出：HappyComponent.doWork</span></span><br><span class="line"></span><br><span class="line">    System.out.println(happyComponent==happyComponent1);<span class="comment">//输出：true</span></span><br><span class="line">    System.out.println(happyComponent1==happyComponent2);<span class="comment">//输出：true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ioc的配置一定是实现类，但是可以根据接口类型获取值:</span></span><br><span class="line"><span class="comment">     * 如B为A接口的实现类 ,B配置了ioc容器：&lt;bean id=b class=xx.xx.B/&gt;     </span></span><br><span class="line"><span class="comment">     * A b = applicationContext.getBean(A.class);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据bean类型获取，同一个类型，在ioc容器中只能有一个bean!</li><li>如果ioc容器存在多个同类型的bean，会出现：<code>NoUniqueBeanDefinitionException</code></li><li>ioc的配置一定是实现类，但是可以根据接口类型获取值</li></ul></li></ol><h2 id="组件-Bean-作用域和周期方法配置"><a href="#组件-Bean-作用域和周期方法配置" class="headerlink" title="组件(Bean)作用域和周期方法配置"></a>组件(Bean)作用域和周期方法配置</h2><ol><li><strong>周期方法配置</strong><br>a.周期方法概念<br>我们可以在组件类中定义方法，然后当IoC容器实例化和销毁组件对象的时候进行调用！这两个方法我们称为生命周期方法！类似于Servlet的init/destroy方法,我们可以在周期方法完成初始化和释放资源等工作。<br>b.周期方法声明<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBean</span> &#123;</span><br><span class="line">    <span class="comment">//周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//初始化方法，在对象创建完成之后，并且属性赋值完成之后，会自动调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JavaBean.init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//销毁方法，在对象销毁之前，会自动调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JavaBean.destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>c.周期方法配置(spring-04.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    init-method=&quot;初始化方法名&quot;</span></span><br><span class="line"><span class="comment">    destroy-method=&quot;销毁方法名&quot;</span></span><br><span class="line"><span class="comment">    spring ioc容器会在对应的时间节点调用对应的方法，在对应的方法中写对应的业务逻辑即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;javaBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_04.JavaBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>b.测试类展示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="comment">//测试生命周期方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ioc容器 就会进行组件对象的实例化 -&gt; init</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-04.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//控制台打印：  JavaBean.init</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果不正常结束ioc容器，ioc会立即释放，不会调用destory方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.正常结束ioc容器</span></span><br><span class="line">    applicationContext.close();</span><br><span class="line">    <span class="comment">//控制台打印：  JavaBean.destroy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>组件作用域配置</strong><br>a.Bean作用域概念<br><code>&lt;bean</code> 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！在IoC容器中，这些<code>&lt;bean</code>标签对应的信息转成Spring内部 <code>BeanDefinition</code> 对象，<code>BeanDefinition</code> 对象内，包含定义的信息（id,class,属性等等）！这意味着，<code>BeanDefinition</code>与<code>类</code>概念一样，SpringIoC容器可以可以根据<code>BeanDefinition</code>对象反射创建多个Bean对象实例。<br>b.作用域可选值</p><pre><code> |取值|含义|创建对象的时机|默认值| |-|-|-|-| |singleton|在 IOC 容器中，这个 bean 的对象始终为单实例|IOC 容器初始化时|是| |prototype|这个 bean 在 IOC 容器中有多个实例|获取 bean 时|否|</code></pre><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><pre><code> |取值|含义|创建对象的时机|默认值| |---|---|---|---| |request|请求范围内有效的实例|每次请求|否| |session|会话范围内有效的实例|每次会话|否|</code></pre><p> c.作用域配置(配置scope范围)</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--bean的作用域</span></span><br><span class="line"><span class="comment">准备两个引用组件类:SingletonBean、PrototypeBean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()一次就会创建一个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;singletonBean&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_04.SingletonBean&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;prototypeBean&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_04.PrototypeBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> d.作用域测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-04.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单例：singleton</span></span><br><span class="line">    <span class="type">SingletonBean</span> <span class="variable">singletonBean1</span> <span class="operator">=</span> applicationContext.getBean(SingletonBean.class);</span><br><span class="line">    <span class="type">SingletonBean</span> <span class="variable">singletonBean2</span> <span class="operator">=</span> applicationContext.getBean(SingletonBean.class);</span><br><span class="line">    System.out.println(singletonBean2==singletonBean1);<span class="comment">//输出：true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多例：prototype</span></span><br><span class="line">    <span class="type">PrototypeBean</span> <span class="variable">prototypeBean1</span> <span class="operator">=</span> applicationContext.getBean(PrototypeBean.class);</span><br><span class="line">    <span class="type">PrototypeBean</span> <span class="variable">prototypeBean2</span> <span class="operator">=</span> applicationContext.getBean(PrototypeBean.class);</span><br><span class="line">    System.out.println(prototypeBean1==prototypeBean2);<span class="comment">//输出：false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="FactoryBean特性和使用"><a href="#FactoryBean特性和使用" class="headerlink" title="FactoryBean特性和使用"></a>FactoryBean特性和使用</h2><ol><li><strong>FactoryBean 简介</strong><br><code>FactoryBean</code> 接口是Spring IoC容器实例化逻辑的可插拔性点。用于配置复杂的Bean对象，可以将创建过程存储在<code>FactoryBean</code> 的getObject方法！<br><code>FactoryBean&lt;T&gt;</code> 接口提供三种方法：<ul><li><code>T getObject()</code>:<br>返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！</li><li><code>boolean isSingleton()</code>:<br>如果此 <code>FactoryBean</code> 返回单例，则返回 <code>true</code> ，否则返回 <code>false</code> 。此方法的默认实现返回 <code>true</code> （注意，lombok插件使用，可能影响效果）。</li><li><code>Class&lt;?&gt; getObjectType()</code>: 返回 <code>getObject()</code> 方法返回的对象类型，如果事先不知道类型，则返回 <code>null</code> 。</li></ul></li><li><strong>FactoryBean使用场景</strong><ol><li>代理类的创建</li><li>第三方框架整合</li><li>复杂对象实例化等</li></ol></li><li><strong>FactoryBean应用</strong><br>a. 准备组件类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBean</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.准备FactoryBean实现类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;JavaBean&gt; &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.value = value;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> JavaBean <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="comment">// 方法内部模拟创建、设置一个对象的复杂过程</span></span><br><span class="line">         <span class="type">JavaBean</span> <span class="variable">javaBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaBean</span>();</span><br><span class="line">         javaBean.setName(value);</span><br><span class="line">         <span class="keyword">return</span> javaBean;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">         <span class="comment">// 返回要生产的对象的类型</span></span><br><span class="line">         <span class="keyword">return</span> JavaBean.class;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>c.配置FactoryBean实现类(spring-05.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id -&gt; getObject方法返回的对象的标识</span></span><br><span class="line"><span class="comment">          工厂bean的标识  &amp;id值</span></span><br><span class="line"><span class="comment">    class -&gt; factoryBean标准化工厂类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;javaBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.ioc_05.JavaBeanFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--此位置的属性：JavaBean工厂类配置，而不是getObject方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>d.测试读取FactoryBean和FactoryBean.getObject对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_05</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ioc容器</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-05.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//2.读取组件</span></span><br><span class="line">    <span class="type">JavaBean</span> <span class="variable">javaBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;javaBean&quot;</span>, JavaBean.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;javaBean=&quot;</span>+javaBean);<span class="comment">//javaBean=cn.xnj.ioc_05.JavaBean@446293d</span></span><br><span class="line">    <span class="comment">//重写toString方法能看到：javaBean=JavaBean&#123;name=&#x27;张三&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//FactoryBean工厂也会加载到ioc容器！ 名字  &amp;id</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;&amp;javaBean&quot;</span>);</span><br><span class="line">    System.out.println(bean);<span class="comment">//cn.xnj.ioc_05.JavaBeanFactoryBean@69997e9d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>FactoryBean和BeanFactory区别</strong><br> <strong>FactoryBean</strong>是 Spring 中一种特殊的 bean，可以在 getObject() 工厂方法自定义的逻辑创建Bean！是一种能够生产其他 Bean 的 Bean。FactoryBean 在容器启动时被创建，而在实际使用时则是通过调用 getObject() 方法来得到其所生产的 Bean。因此，FactoryBean 可以自定义任何所需的初始化逻辑，生产出一些定制化的 bean。<br> 一般情况下，整合第三方框架，都是通过定义FactoryBean实现！！！<br> <strong>BeanFactory</strong> 是 Spring 框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理 bean 的生命周期、配置文件的加载和解析、bean 的装配和依赖注入等。BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源（例如 Mysql 数据库、XML 文件、Java 配置类等）获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类（例如，ApplicationContext 接口）提供了额外的强大功能。<br> <strong><em>总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建 bean 的接口，它提供了更加灵活的初始化定制功能，而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。</em></strong></li></ol><h2 id="基于-XML-方式整合三层架构组件"><a href="#基于-XML-方式整合三层架构组件" class="headerlink" title="基于 XML 方式整合三层架构组件"></a>基于 XML 方式整合三层架构组件</h2><ol><li><strong>需求分析</strong><br>搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML方式进行组件管理！</li><li><strong>数据库准备</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">create database studb;</span><br><span class="line"></span><br><span class="line">use studb;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">students</span> <span class="params">(</span></span><br><span class="line"><span class="params">  id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  name VARCHAR(<span class="number">50</span>)</span> NOT NULL,</span><br><span class="line">  gender <span class="title function_">VARCHAR</span><span class="params">(<span class="number">10</span>)</span> NOT NULL,</span><br><span class="line">  age INT,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO <span class="title function_">students</span> <span class="params">(id, name, gender, age, class)</span></span><br><span class="line">VALUES</span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;刘七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">6</span>, <span class="string">&#x27;陈八&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">7</span>, <span class="string">&#x27;杨九&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">8</span>, <span class="string">&#x27;吴十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><strong>项目准备</strong><br>a.项目创建<br>  spring-xml-practice-02<br>b.依赖导入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据库驱动和连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>c.实体类准备(cn.xnj.pojo.Student)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> Integer id;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> String gender;</span><br><span class="line">     <span class="keyword">private</span> Integer age;</span><br><span class="line">     <span class="keyword">private</span> String classes;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> id;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.id = id;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> name;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> gender;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.gender = gender;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.age = age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">getClasses</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> classes;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClasses</span><span class="params">(String classes)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.classes = classes;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                 <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                 <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                 <span class="string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                 <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>jdbcTemplate</strong><br>创建配置文件resources/jdbc.properties提取数据库连接信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>spring-ioc.xml配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>基于jdbcTemplate的CRUD使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用jdbcTemplate进行DML动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 执行插入一条学员数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into students (id,name,gender,age,class) values    (?,?,?,?,?);&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        参数1: sql语句</span></span><br><span class="line"><span class="comment">        参数2: 可变参数,占位符的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">9</span>,<span class="string">&quot;十一&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>, <span class="string">&quot;二年三班&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询单条实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForPojo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from   students where id = ? ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id查询</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,  (rs, rowNum) -&gt; &#123;</span><br><span class="line">            <span class="comment">//自己处理结果映射</span></span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            stu.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            stu.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            stu.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">            stu.setGender(rs.getString(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            stu.setClasses(rs.getString(<span class="string">&quot;classes&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> stu;</span><br><span class="line">        &#125;, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;student = &quot;</span> + student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询实体类集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForListPojo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from   students  ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> applicationContext.getBean(JdbcTemplate.class);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        query可以返回集合!</span></span><br><span class="line"><span class="comment">        BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span>     <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><strong>三层架构搭建和实现</strong><br>a.持久层(cn.xnj.dao.StudentDao)(cn.xnj.dao.impl.StudentDaoImpl)  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from    students ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          query可以返回集合!</span></span><br><span class="line"><span class="comment">          BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span>      <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> b.业务层(cn.xnj.service.StudentService)(cn.xnj.service..impl.StudentServiceImpl)   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentDao</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学员业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">        List&lt;Student&gt; studentList =  studentDao.queryAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> c.表述层(cn.xnj.controller.StudentController)   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentService</span><span class="params">(StudentService studentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; studentList =  studentService.findAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>三层架构IoC配置(spring-ioc.xml)</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.dao.impl.StudentDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xnj.controller.StudentController&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>运行测试(test/java/cn.xnj.test.ControllerTest)</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testRun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-ioc.xml&quot;</span>);</span><br><span class="line">        <span class="type">StudentController</span> <span class="variable">studentController</span> <span class="operator">=</span> applicationContext.getBean    (StudentController.class);</span><br><span class="line">        studentController.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>XMLIoC方式问题总结</strong><ol><li>注入的属性必须添加setter方法、代码结构乱！</li><li>配置文件和Java代码分离、编写不是很方便！</li><li>XML配置文件解析效率低</li></ol></li></ol><h1 id="基于注解方式管理Bean"><a href="#基于注解方式管理Bean" class="headerlink" title="基于注解方式管理Bean"></a>基于注解方式管理Bean</h1><h2 id="Bean注解标记和扫描-IoC"><a href="#Bean注解标记和扫描-IoC" class="headerlink" title="Bean注解标记和扫描(IoC)"></a>Bean注解标记和扫描(IoC)</h2><ol><li><strong>准备Spring项目和组件</strong><br> a.创建项目<br> spring-ioc-annoaction-03<br> b.准备项目pom.xml <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure> c.准备组件类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XxxService</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">XxxService</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dao组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span>  &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><strong>组件添加标记注解</strong><br>a.组件标记注解和区别<br>Spring提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。<pre><code>|注解|说明||@Component|该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。||@Repository|该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。||@Service|该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。||@Controller|该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。|</code></pre> @Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。对于Spring使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。但严格使用@Controller、@Service、@Repository这三个注解，能让我们能够便于分辨组件的作用。<br> b.使用注解标记<br> 直接将注解添加到类名上方即可 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通组件</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//&lt;bean id=&quot;commonComponent&quot; class=&quot;CommonComponent&quot;&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//controller类型组件</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service类型组件</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">XxxService</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dao类型组件</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>配置文件确定扫描范围</strong><br>情况1：基本扫描配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.  springframework.org/schema/beans/spring-beans.xsd http://www.springframework. org/schema/context https://www.springframework.org/schema/context/   spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.普通配置包扫描</span></span><br><span class="line"><span class="comment">          base-package 指定ioc容器去哪些包下查找注解类 -&gt;ioc容器</span></span><br><span class="line"><span class="comment">          一个包或多个包 cn.xnj,ioc_01,cn.xnj.ioc_02 包，包</span></span><br><span class="line"><span class="comment">          指定包，相当于指定了子包内所有类</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xnj.ioc_01&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>情况2：指定排除组件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.指定包，但是排除注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xnj.ioc_01&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除包下的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>情况3：指定扫描组件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.指定包，指定包含注解--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--base-package包下的注解都生效!  use-default-filters=&quot;false&quot; 指定包下所有的注解先不生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xnj.ioc_01&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只扫描包下的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>组件BeanName问题</strong><br>在我们使用 XML 方式管理 bean 的时候，每个 bean 都有一个唯一标识——id 属性的值，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。<br>默认情况：<br>类名首字母小写就是 bean 的 id。例如：SoldierController 类对应的 bean 的 id 就是 soldierController。<br>使用value属性指定：(当注解中只设置一个属性时，value属性的属性名可以省略)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller(&quot;tianDog&quot;)</span></span><br><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>测试类(cn.xnj.test.springIocTest)</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">springIoCTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建ioc容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span> (<span class="string">&quot;spring-01.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取组件</span></span><br><span class="line">        <span class="type">CommonComponent</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(CommonComponent.class);</span><br><span class="line">        System.out.println(bean);<span class="comment">// cn.xnj.ioc_01.CommonComponent@60db1c0e</span></span><br><span class="line">        <span class="comment">//添加ioc注解，默认组件的名为 类的首字母小写</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;commonComponent&quot;</span>);</span><br><span class="line">        System.out.println(bean==bean1);<span class="comment">//  true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//当该注解被排除，运行报错；.NoSuchBeanDefinitionException</span></span><br><span class="line">        <span class="type">XxxService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(XxxService.class);</span><br><span class="line">        System.out.println(service);<span class="comment">//cn.xnj.ioc_01.service.XxxServiceImpl@769a1df5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>总结</strong><ol><li>注解方式IoC只是标记哪些类要被Spring管理</li><li>最终，我们还需要XML方式或者后面讲解Java配置类方式指定注解生效的包</li><li><strong><em>现阶段配置方式为 注解 （标记）+ XML（扫描）</em></strong></li></ol></li></ol><h2 id="组件-Bean-作用域和周期方法注解"><a href="#组件-Bean-作用域和周期方法注解" class="headerlink" title="组件(Bean)作用域和周期方法注解"></a>组件(Bean)作用域和周期方法注解</h2><ol><li>组件周期方法配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册到ioc容器中，默认组件的名为 类的首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line">    <span class="comment">//周期方法要求： 方法命名随意，但是要求方法必须是 public void 无形参列表</span></span><br><span class="line">    <span class="meta">@PostConstruct</span>  <span class="comment">//注解制指定初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;BeanOne 初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span> <span class="comment">//注解指定销毁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 释放资源逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;BeanOne 销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>组件作用域配置</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON)</span> <span class="comment">//单例,默认值</span></span><br><span class="line"><span class="meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span> <span class="comment">//多例  二选一</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>扫描配置(创建配置文件spring-02.xml)</strong><br><code>&lt;context:component-scan base-package=&quot;cn.xnj.ioc_02&quot;/&gt;</code></li><li><strong>测试类</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_02</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">//1.创建ioc容器</span></span><br><span class="line">     <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-02.xml&quot;</span>);</span><br><span class="line">     <span class="comment">//获取组件</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;beanOne&quot;</span>);</span><br><span class="line">     System.out.println(bean);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//测试单例(这里测试时设置的单例：@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON))</span></span><br><span class="line">     <span class="type">Object</span> <span class="variable">bean1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;beanOne&quot;</span>);</span><br><span class="line">     System.out.println(bean == bean1);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//2.关闭容器</span></span><br><span class="line">     context.close();</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*控制台打印结果：</span></span><br><span class="line"><span class="comment">         BeanOne 初始化</span></span><br><span class="line"><span class="comment">         cn.xnj.ioc_02.BeanOne@3e2055d6</span></span><br><span class="line"><span class="comment">         true</span></span><br><span class="line"><span class="comment">         BeanOne 销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Bean属性赋值：引用类型自动装配-DI"><a href="#Bean属性赋值：引用类型自动装配-DI" class="headerlink" title="Bean属性赋值：引用类型自动装配(DI)"></a>Bean属性赋值：引用类型自动装配(DI)</h2><ol><li><strong>设定场景</strong><ul><li>UserController 需要 UserService</li><li>UserServcie 需要 UserDao</li></ul></li><li><strong>自动装配实现</strong><br>a.前提<pre><code>参与自动装配的组件（需要装配、被装配）全部都必须在IoC容器中。注意：不区分IoC的方式！XML和注解都可以！</code></pre>b.@Autowired注解<br>在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。<br>c.给Controller装配Service<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//&lt;property userService -&gt;  对应的bean装配</span></span><br><span class="line">    <span class="comment">//自动装配注解&lt;DI&gt; :1.ioc容器中查找符合类型的组件对象，2.设置给当前属性(di)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 调用业务层方法</span></span><br><span class="line">        userService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>d.给Service装配Dao<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;System.out.println(<span class="string">&quot;UserDao show&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><em>与xml进行bean ref引用不同，他不需要有set方法！</em></strong><br>e.测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建ioc容器</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-03.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取组件</span></span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(UserController.class);</span><br><span class="line">    <span class="comment">//场景1： ioc容器中有一个UserService接口对应的实现类对象</span></span><br><span class="line">    userController.show();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*控制台输出</span></span><br><span class="line"><span class="comment">    UserDao show*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//场景2： ioc容器中没有UserService接口对应的实现类对象</span></span><br><span class="line">    <span class="comment">//@Autowired 使用它进行装配 【默认】情况下至少要求有一个bean，否则会报错！可以指定佛系装配</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//场景3：同一个类型有多个对应的组件@Autowired也会报错! 无法选择</span></span><br><span class="line">    <span class="comment">//解决1： 成员属性指定@Autowired 多个组件的时候，默认会根据成员属性名查找</span></span><br><span class="line">    <span class="comment">//解决2：使用@Qualifier(value=&quot;userServiceImpl&quot;)  明确指定装配的组件的id,必须配合@Autowired一起使用</span></span><br><span class="line">    <span class="comment">//解决3：使用@Resource(name=&quot;userServiceImpl&quot;)=@Autowired+@Qualifier(value=&quot;userServiceImpl&quot;)</span></span><br><span class="line">    <span class="comment">//使用解决3需要引入相关依赖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>f.同一个类型有多个对应的组件(UserServiceImpl和UserServiceImpl1)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userServiceImpl1&quot;)</span><span class="comment">//指定使用UserServiceImpl1</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 调用业务层方法</span></span><br><span class="line">        userService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>d.@Autowired的工作流程<br>首先根据所需要的组件类型到 IOC 容器中查找：<ul><li>能够找到唯一的 bean：直接执行装配，如果完全找不到匹配这个类型的 bean：装配失败。</li><li>如果和所需类型匹配的 bean 不止一个：<ul><li>没有 @Qualifier 注解：根据 @Autowired 标记位置成员变量的变量名作为 bean 的 id 进行匹配，</li><li>有 @Qualifier 注解：根据 @Qualifier 注解中指定的名称作为 bean 的id进行匹配</li></ul></li></ul></li></ul></li><li><strong>佛系装配</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span> <span class="comment">//佛系装配 boolean required() default false;</span></span><br><span class="line">            <span class="comment">// 佛系装配，不要求有对应的bean对象 </span></span><br><span class="line">            <span class="comment">// 不推荐使用佛系装配，因为如果没有对应的bean对象，会出现空指针异常！</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure></li><li><strong>扩展JSR-250注解@Resource</strong><ul><li><strong>@Resource注解默认根据Bean名称装配，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型装配。</strong></li><li><strong>@Autowired注解默认根据类型装配，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong><br>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【高于JDK11或低于JDK8需要引入以下依赖】<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jsr-250注解 Java提供的注解，spring提供了一个@Resource--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>@Resource使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//@Qualifier(value = &quot;userServiceImpl1&quot;)</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userServiceImpl1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 调用业务层方法</span></span><br><span class="line">        userService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Resource别导错包：<code>import jakarta.annotation.Resource;</code></li></ul></li></ul></li></ol><h2 id="Bean属性赋值：基本类型属性赋值-DI"><a href="#Bean属性赋值：基本类型属性赋值-DI" class="headerlink" title="Bean属性赋值：基本类型属性赋值(DI)"></a>Bean属性赋值：基本类型属性赋值(DI)</h2><ol><li><strong>@Value直接给属性赋值</strong><br>a.准备演示的组件类(cn.xnj.ioc_04/User)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//直接赋值 ，不推荐，这种建议直接private int age=18;即可</span></span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.配置文件扫描注解(resource/spring-04.xml)<br><code>&lt;context:component-scan base-package=&quot;cn.xnj.ioc_04&quot;/&gt;</code><ul><li>这种使用不推荐，一般使用@Value注解是为了读取外部配置</li></ul></li><li><strong>@Value读取外部配置</strong><br>a.声明外部配置(resource/user.properties)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.username=&quot;admin&quot;</span><br><span class="line">user.password=&quot;123456&quot;</span><br></pre></td></tr></table></figure>b.配置文件(spring-04.xml)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xnj.ioc_04&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:user.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;&quot; value=&quot;$&#123;&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>c.使用@Value<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;user.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>d.测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-04.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*控制台输出</span></span><br><span class="line"><span class="comment">        User&#123;age=18, username=&#x27;&quot;admin&quot;&#x27;, password=&#x27;&quot;123456&quot;&#x27;&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>默认值写法</strong><br>当你使用@Value来引用外部配置但外部配置的属性可能不存在时，可以使用默认值写法<ul><li><code>@Value($&#123;key:value默认值&#125;)</code></li><li>如：<code>@Value(&quot;$&#123;user.username:张三&#125;&quot;)</code></li><li>当配置文件没有user.username属性时，会被赋予默认值张三</li></ul></li></ol><h2 id="基于注解-XML方式整合三层架构组件"><a href="#基于注解-XML方式整合三层架构组件" class="headerlink" title="基于注解+XML方式整合三层架构组件"></a>基于注解+XML方式整合三层架构组件</h2><p>和前面基于XMl方式整合三层架构组件没有区别，只是在配置的时候，不需要再在spring.xml配置文件中来注入service，controller等的bean了，只需要扫描项目的包，然后在相应的类上加上<code>@Controller，@Service，@Repository</code>注解即可，装配就使用<code>@Autowired</code>,但第三方的<code>jdbcTemplate</code>和<code>druidDataSource</code>仍然按配置文件的方式配置。这样也就能看出来<strong><em>注解+XMLIOC</em></strong>方法的问题：</p><ul><li>自定义类可以使用注解方式，但是第三方依赖的类依然使用XML方式！</li><li>XML格式解析效率低！</li></ul><h1 id="基于配置类方式管理Bean"><a href="#基于配置类方式管理Bean" class="headerlink" title="基于配置类方式管理Bean"></a>基于配置类方式管理Bean</h1><blockquote><p>使用配置类方式管理Bean就可以摆脱xml配置文件，实现全注解开发</p></blockquote><h2 id="配置类和扫描注解"><a href="#配置类和扫描注解" class="headerlink" title="配置类和扫描注解"></a>配置类和扫描注解</h2><p>原本我们使用注解，需要在xml配置文件中扫描包<br>引入外部配置文件，需要在xml配置文件中配置外部文件</p><ol><li><strong>创建基本模块</strong>(cn.xnj.ioc_01)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;studnetService show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>创建配置类</strong>(cn.xnj.config)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.<span class="doctag">@Configuration</span> java配置类注解，代替xml配置文件</span></span><br><span class="line"><span class="comment"> * 2.<span class="doctag">@ComponentScan</span> 包扫描注解，可扫描多个包<span class="doctag">@ComponentScan</span>(&#123;&quot;com.xx.xx&quot;, &quot;com.xx.xx&quot;&#125;)</span></span><br><span class="line"><span class="comment"> * 3.<span class="doctag">@PropertySource</span> 加载外部配置文件 <span class="doctag">@PropertySource</span>(value=&quot;classpath:jdbc.    properties&quot;)</span></span><br><span class="line"><span class="comment"> * 4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj.ioc_01&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>测试创建容器</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext 根据配置类创建 IOC 容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfiguration.class);</span><br></pre></td></tr></table></figure>可以使用 no-arg 构造函数实例化 <code>AnnotationConfigApplicationContext</code> ，然后使用 <code>register()</code>方法对其进行配置。此方法在以编程方式生成 <code>AnnotationConfigApplicationContext</code> 时特别有用。以下示例演示如何执行此操作：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext-IOC容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line"><span class="comment">//外部设置配置类</span></span><br><span class="line">iocContainerAnnotation.register(MyConfiguration.class);</span><br><span class="line"><span class="comment">//刷新后方可生效！！</span></span><br><span class="line">iocContainerAnnotation.refresh();</span><br></pre></td></tr></table></figure></li><li><strong>测试类</strong>(test/java/cn.xnj.test.SpringIoCTest)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIoCTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.创建容器</span></span><br><span class="line">        <span class="comment">//ApplicationContext applicationContext = new   AnnotationConfigApplicationContext(MyConfiguration.class);</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span>     <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        applicationContext.register(MyConfiguration.class);</span><br><span class="line">        applicationContext.refresh();</span><br><span class="line">        <span class="comment">//2.获取bean</span></span><br><span class="line">        <span class="type">StudentController</span> <span class="variable">studentController</span> <span class="operator">=</span> applicationContext.getBean    (StudentController.class);</span><br><span class="line">        studentController.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Bean定义组件"><a href="#Bean定义组件" class="headerlink" title="@Bean定义组件"></a>@Bean定义组件</h2><p><font color=red>注：@Bean注解只能用在配置类里面定义bean</font><br><strong>场景需求</strong>：将Druid连接池对象存储到IoC容器<br><strong>需求分析</strong>：第三方jar包的类，添加到ioc容器，无法使用@Component等相关注解！因为源码jar包内容为只读模式！<br>jdbc.properties<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><br><strong>使用xml方式实现</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 给bean的属性赋值：引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>使用配置类的方式实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj.ioc_01&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * bean 一个方法</span></span><br><span class="line"><span class="comment">     * 方法的返回值 == bean组件的类型或者他的接口和父类</span></span><br><span class="line"><span class="comment">     * 方法的名字 = bean id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 方法体可以自定义实现的过程即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span> 会真正让配置类的方法创建的组件存储到ioc容器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Bean注解的细节"><a href="#Bean注解的细节" class="headerlink" title="@Bean注解的细节"></a>@Bean注解的细节</h2><ol><li><strong>BeanName</strong><br>bean的名字默认为方法名，也可以在注解中指定名字,value | name<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Bean(name=&quot;dataSource1&quot;)</span></span><br><span class="line"><span class="meta">@Bean(value = &quot;dataSource1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setUrl(url);</span><br><span class="line">    dataSource.setDriverClassName(driver);</span><br><span class="line">    dataSource.setUsername(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>指定周期方法</strong><br>在注解中指定<code>initMethod,destroyMethod</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(value = &quot;dataSource&quot; ,initMethod=&quot;&quot;,destroyMethod = &quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>作用域</strong><br>方法上添加<code>@Scope</code>注解</p><ul><li>@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON)//单例</li><li>@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE)//多例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON)</span><span class="comment">//单例</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setUrl(url);</span><br><span class="line">    dataSource.setDriverClassName(driver);</span><br><span class="line">    dataSource.setUsername(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Bean方法依赖</strong></p><ul><li>直接调用(不推荐)</li><li>形参列表引用(推荐)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;zuzubase&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setUrl(url);</span><br><span class="line">    dataSource.setDriverClassName(driver);</span><br><span class="line">    dataSource.setUsername(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;wangwangbase&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现具体的实例化过程</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.setUrl(url);</span><br><span class="line">    dataSource.setDriverClassName(driver);</span><br><span class="line">    dataSource.setUsername(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">    <span class="comment">//需要DataSource 需要ioc容器的其他组件</span></span><br><span class="line">    <span class="comment">//方式一：直接调用 需要其他组件也是@Bean方法</span></span><br><span class="line">    jdbcTemplate.setDataSource(dataSource1());</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate1</span><span class="params">(DataSource zuzubase,DataSource wangwangbase )</span>&#123;</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">    <span class="comment">//需要DataSource 需要ioc容器的其他组件</span></span><br><span class="line">    <span class="comment">//方式二：形参列表声明想要的组件类型，可以是一个也可以是多个！ioc容器也会注入</span></span><br><span class="line">    <span class="comment">//如果没有：形参变量注入，要求必须有对应的类型组件，如果没有会报异常！</span></span><br><span class="line">    <span class="comment">//如果有多个：可以使用形参名称等同域对应的beanid标识即可</span></span><br><span class="line">    jdbcTemplate.setDataSource(zuzubase);</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="Import注解的扩展"><a href="#Import注解的扩展" class="headerlink" title="@Import注解的扩展"></a>@Import注解的扩展</h2><p><code>@Import</code> 注释允许从另一个配置类加载 <code>@Bean</code> 定义.如以下示例所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationA</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigurationA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationB</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在，在实例化上下文时不需要同时指定 ConfigurationA.class 和 ConfigurationB.class ，只需显式提供 ConfigurationB ，如以下示例所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ConfigB.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>此方法简化了容器实例化，因为只需要处理一个类，而不是要求在构造期间记住可能大量的 <code>@Configuration</code> 类。也可以不同的配置类管理不同种类的配置，最后交由一个配置类，既方便管理配置，也方便构造。</p><h2 id="基于注解和配置类方式整合三层架构组件"><a href="#基于注解和配置类方式整合三层架构组件" class="headerlink" title="基于注解和配置类方式整合三层架构组件"></a>基于注解和配置类方式整合三层架构组件</h2><ol><li><strong>需求分析</strong><br>搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用注解+配置类方式进行组件管理！</li><li><strong>数据库准备</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">create database studb;</span><br><span class="line"></span><br><span class="line">use studb;</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">students</span> <span class="params">(</span></span><br><span class="line"><span class="params">  id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  name VARCHAR(<span class="number">50</span>)</span> NOT NULL,</span><br><span class="line">  gender <span class="title function_">VARCHAR</span><span class="params">(<span class="number">10</span>)</span> NOT NULL,</span><br><span class="line">  age INT,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO <span class="title function_">students</span> <span class="params">(id, name, gender, age, class)</span></span><br><span class="line">VALUES</span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;刘七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">6</span>, <span class="string">&#x27;陈八&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">7</span>, <span class="string">&#x27;杨九&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">8</span>, <span class="string">&#x27;吴十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><strong>项目准备</strong><br>a.项目创建<br> spring-java-partice-05<br>b.导入依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 数据库驱动和连接池--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br></pre></td></tr></table></figure>c.实体类准备(cn.xnj.pojo) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String classes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClasses</span><span class="params">(String classes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classes = classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>d.配置文件(jdbc.properties) <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql://localhost:3306/studb?useUnicode=true&amp;characterEncoding=utf8&amp;  useSSL=false</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456  </span><br></pre></td></tr></table></figure></li><li><strong>三层架构实现</strong><br>a.表述层(cn.xnj.controller) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; studentList =  studentService.findAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>b.业务层(cn.xnj.service) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>c.持久层(cn.xnj.dao) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部学生数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from   students ;&quot;</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          query可以返回集合!</span></span><br><span class="line"><span class="comment">          BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span>     <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>三层架构IoC配置类</strong>(cn.xnj.config) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span> String url,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span> String driver,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span>String username,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span> String password)</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DruidDataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>运行测试</strong>(test/java/cn.xnj.test) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIoCTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span> (MyConfiguration.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">StudentController</span> <span class="variable">studentController</span> <span class="operator">=</span> context.getBean(StudentController.    class);</span><br><span class="line">        studentController.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注解+配置类 IoC方式总结<ol><li>完全摒弃了XML配置文件</li><li>自定义类使用IoC和DI注解标记</li><li>第三方类使用配置类声明方法+@Bean方式处理</li><li>完全注解方式（配置类+注解）是现在主流配置方式</li></ol></li></ol><h1 id="三种配置方式总结"><a href="#三种配置方式总结" class="headerlink" title="三种配置方式总结"></a>三种配置方式总结</h1><h2 id="基于XML配置方式总结"><a href="#基于XML配置方式总结" class="headerlink" title="基于XML配置方式总结"></a>基于XML配置方式总结</h2><ol><li>所有内容写到xml格式配置文件中</li><li>声明bean通过&lt;bean 标签</li><li>&lt;bean标签包含基本信息（id,class）和属性信息 &lt;property name value / ref</li><li>引入外部的properties文件可以通过&lt;context:property-placeholder</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><h2 id="基于XML配置文件和注解方式总结"><a href="#基于XML配置文件和注解方式总结" class="headerlink" title="基于XML配置文件和注解方式总结"></a>基于XML配置文件和注解方式总结</h2><ol><li>注解负责标记IoC的类和进行属性装配</li><li>xml文件依然需要，需要通过&lt;context:component-scan标签指定注解范围</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository </li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><h2 id="基于配置类的完全注解方式总结"><a href="#基于配置类的完全注解方式总结" class="headerlink" title="基于配置类的完全注解方式总结"></a>基于配置类的完全注解方式总结</h2><ol><li>完全注解方式指的是去掉xml文件，使用配置类 + 注解实现</li><li>xml文件替换成使用@Configuration注解标记的类</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository </li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>&lt;context:component-scan标签指定注解范围使用<code>@ComponentScan(basePackages = &#123;&quot;com.atguigu.components&quot;&#125;)替代</code></li><li>&lt;context:property-placeholder引入外部配置文件使用<code>@PropertySource(&#123;&quot;classpath:application.properties&quot;,&quot;classpath:jdbc.properties&quot;&#125;)</code>替代</li><li>&lt;bean 标签使用@Bean注解和方法实现</li><li>IoC具体容器实现选择AnnotationConfigApplicationContext对象</li></ol><h1 id="整合Spring5-Test5搭建测试环境"><a href="#整合Spring5-Test5搭建测试环境" class="headerlink" title="整合Spring5-Test5搭建测试环境"></a>整合Spring5-Test5搭建测试环境</h1><ol><li><strong>整合测试环境的作用</strong><ul><li>不再需要自己每次创建IoC容器</li><li>任何需要的bean都可以在测试类中直接享受自动装配</li></ul></li><li><strong>导入相关依赖</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>创建演示项目</strong><br>a.项目创建<br>spring-ioc-test5-06<br>b.创建演示 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置类(cn.xnj.config)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xnj&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件(cn.xnj.ioc)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello JavaBeanA!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBeanB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello JavaBeanB!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>整合测试注解使用</strong><br>创建测试类(test/java/cn.xnj.test.SpringIoCTest)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &#123;&quot;classpath:spring-context.xml&quot;&#125;)  //指定配置文件xml</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(value = &#123;MyConfiguration.class&#125;)</span>  <span class="comment">//指定配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIoCTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaBeanA javaBeanA;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaBeanB javaBeanB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(javaBeanA);</span><br><span class="line">        javaBeanA.sayHello();</span><br><span class="line">        System.out.println(javaBeanB);</span><br><span class="line">        javaBeanB.sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*  控制台输出</span></span><br><span class="line"><span class="comment">            cn.xnj.ioc.JavaBeanA@934b6cb</span></span><br><span class="line"><span class="comment">            Hello JavaBeanA!</span></span><br><span class="line"><span class="comment">            cn.xnj.ioc.JavaBeanB@55cf0d14</span></span><br><span class="line"><span class="comment">            Hello JavaBeanB!</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>拓展测试注解用法—@BeforeEach,@AfterEach</strong></p></li></ol><ul><li><code>@BeforeEach</code> 可以让每个测试方法在执行之前，先执行这个方法，</li><li><code>@AfterEach</code> 可以让每次执行测试方法后执行该方法</li></ul><p>当每个测试方法都有同样的开始和结束时，可以使用上面的注解来减少冗余代码。使用场景举例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span><span class="comment">// 每次执行测试方法前执行该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">         session = sessionFactory.openSession(<span class="literal">true</span>);<span class="comment">// 自动提交事务</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span> <span class="comment">// 每次执行测试方法后执行该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">        session.close(); <span class="comment">//关闭会话</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 测试方法:根据id查询员工数据方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_01</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只需写核心测试的逻辑了</span></span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectEmployeeById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info flat"><p>笔记：<a href="https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF">https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF</a></p></div>]]></content>
    
    
    <summary type="html">SpringIoc容器复习</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="spring" scheme="https://xusir.fun/tags/spring/"/>
    
    <category term="springioc" scheme="https://xusir.fun/tags/springioc/"/>
    
  </entry>
  
  <entry>
    <title>微服务</title>
    <link href="https://xusir.fun/posts/2409121641.html"/>
    <id>https://xusir.fun/posts/2409121641.html</id>
    <published>2024-09-12T16:41:22.000Z</published>
    <updated>2025-03-18T08:04:27.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springcloud-RestTemplate"><a href="#springcloud-RestTemplate" class="headerlink" title="springcloud-RestTemplate"></a>springcloud-RestTemplate</h1><ol><li><p>说明<br>微服务中分消费者(调用服务的)和提供者(被调用的服务)，角色是相对的，一个服务既可以是提供者也可以是消费者<br>要注意版本的问题<br>微服务项目中，当一个模块需要向另一个模块数据和操作时，<strong>微服务远程调用</strong><br>spring中提供了一个工具<code>restTemplate</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<br>在配置类中(启动类也属于配置类)注册bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<br>在需要发送请求的服务中，使用RestTemplate对象发送请求即可，列如：<br>如下场景中，购物车服务<code>cart-service</code>需要向商品服务<code>item-service</code>查询商品信息，此时需要远程调用商品服务，使用RestTemplate:<code>2.1~2.3</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CartMapper, Cart&gt; <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="comment">// 1.注入restTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="comment">// 2.查询我的购物车列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CartVO&gt; <span class="title function_">queryMyCarts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询我的购物车列表</span></span><br><span class="line">        List&lt;Cart&gt; carts = lambdaQuery().eq(Cart::getUserId, <span class="number">1L</span><span class="comment">/*TODO UserContext.getUser()*/</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(carts)) &#123;</span><br><span class="line">            <span class="keyword">return</span> CollUtils.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.转换VO</span></span><br><span class="line">        List&lt;CartVO&gt; vos = BeanUtils.copyList(carts, CartVO.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.处理VO中的商品信息</span></span><br><span class="line">        handleCartItems(vos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> vos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.远程调用商品服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 1.获取商品id</span></span><br><span class="line">        Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* // 2.查询商品 ,为单体项目时，直接调用商品查询即可，现在拆分为微服务模块</span></span><br><span class="line"><span class="comment">        List&lt;ItemDTO&gt; items = itemService.queryItemByIds(itemIds);</span></span><br><span class="line"><span class="comment">        if (CollUtils.isEmpty(items)) &#123;</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//2.查询商品</span></span><br><span class="line">        <span class="comment">//2.1 发送商品管理服务(item-service)远端请求</span></span><br><span class="line">        ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">                <span class="string">&quot;http://localhost:8081/items?ids=&#123;ids&#125;&quot;</span>,    <span class="comment">// url 根据商品id查询商品列表</span></span><br><span class="line">                HttpMethod.GET,                                 <span class="comment">// 请求方式</span></span><br><span class="line">                <span class="literal">null</span>,                                           <span class="comment">// 请求实体</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;&#125;, <span class="comment">// 返回值类型</span></span><br><span class="line">                Map.of(<span class="string">&quot;ids&quot;</span>, CollUtil.join(itemIds, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//2.2 解析响应，判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (!response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.3 解析响应，获取数据</span></span><br><span class="line">        List&lt;ItemDTO&gt; items = response.getBody();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.转为 id 到 item的map</span></span><br><span class="line">        Map&lt;Long, ItemDTO&gt; itemMap = items.stream().collect(Collectors.toMap(ItemDTO::getId, Function.identity()));</span><br><span class="line">        <span class="comment">// 4.写入vo</span></span><br><span class="line">        <span class="keyword">for</span> (CartVO v : vos) &#123;</span><br><span class="line">            <span class="type">ItemDTO</span> <span class="variable">item</span> <span class="operator">=</span> itemMap.get(v.getItemId());</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v.setNewPrice(item.getPrice());</span><br><span class="line">            v.setStatus(item.getStatus());</span><br><span class="line">            v.setStock(item.getStock());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结<br>在这个过程中，<code>item-service</code>提供了查询接口，<code>cart-service</code>利用Http请求调用该接口。因此item-service可以称为服务的提供者，而cart-service则称为服务的消费者或服务调用者</p></li></ol><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p>eureka的作用</p><p>消费者该如何获取服务提供者具体信息?</p><ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>消费者根据服务名称向eureka拉取提供者信息</li></ul><p>如果有多个服务提供者，消费者该如何选择?</p><ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul><p>消费者如何感知服务提供者健康状态?</p><ul><li>服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>消费者就可以拉取到最新的信息</li></ul><h2 id="搭建EurekaServer"><a href="#搭建EurekaServer" class="headerlink" title="搭建EurekaServer"></a>搭建EurekaServer</h2><p>eureka也是个微服务，eureka在启动的时候也会把自己注册到eureka上</p><p>1.创建maven项目，引入spring-cloud-starter-netflix-eureka-server的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka服务端依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>2.编写启动类，添加@EnableEurekaServer注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.添加application.yml文件，编写下面的配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span> <span class="comment">#服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#eurek的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span> <span class="comment">#注册中心地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="服务注册：注册user-service"><a href="#服务注册：注册user-service" class="headerlink" title="服务注册：注册user-service"></a>服务注册：注册user-service</h2><p>1.在user-service项目下引入spring-cloud-starter-netflix-eureka-client的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka客户端端依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.在application.yml文件，编写下面的配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment">#服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#eurek的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span> <span class="comment">#注册中心地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>我们还可以将一个服务多次启动，来模拟多实例部署，但为了避免端口冲突，需要修改端口设置：</p><ul><li>在idea下方Services(服务)窗口中</li><li>右键目标服务，选择CopConfiguration(复制配置)</li><li>旧版idea，就在Environment项下的VM options里输入:<code>-Dserver.port=端口号</code></li><li>新版idea中，选择修改配置，在修改选项中勾选允许多个实例即可，按alter+p 覆盖配置属性 server.port 8082</li></ul><blockquote><p>前面发送http请求时，远程调用的url地址是写死了的，现在就可以用eureka完解决该问题</p></blockquote><h2 id="服务发现-拉取"><a href="#服务发现-拉取" class="headerlink" title="服务发现(拉取)"></a>服务发现(拉取)</h2><p>前面orderService中，因为需要获取完整的订单的信息，所以通过resrtemplate发送http请求来获取对应的user信息</p><p>服务拉取是基于服务名称获取服务列表，然后在对服务列表做负载均衡<br>1.修改OrderService的代码，修改访问的url路径，用服务名代替ip、端口：<br><code>String url=&quot;http://userservice/user/&quot;+order.getUserId()</code></p><ol><li>在order-service项目的启动类OrderApplication中的RestTemplate添加<strong>负载均衡</strong>注解：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>oderservice需要调用userservice,而userservice有多个实例时，可以通过定义IRule实现来修改负载均衡规则，有两种方式<br>1.代码方式：在消费者的启动类中，定义一个新的IRule(作用于全体)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2.配置文件方式：在消费者的applicatiuon.yml文件中，添加新的配置也可以修改规则(针对某个微服务)：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#负载均衡规则</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>饥饿加载</p><p>ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient,请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，可以通过下面的配置开启饥饿加载<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">userservice</span> <span class="comment">#指定饥饿加载的服务</span></span><br></pre></td></tr></table></figure></p><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>官网：nacos.io<br>启动：在bin目录进入cmd，执行<code>startup.cmd -m standalone</code><br>浏览器输入运行成功的 <code>Console</code>的值即可看到nacos控制台界面<br>默认为8848端口：<code>localhost:88848/nacos</code>  可以在conf下的application.properties下修改</p><h2 id="服务注册到Nacos"><a href="#服务注册到Nacos" class="headerlink" title="服务注册到Nacos"></a>服务注册到Nacos</h2><p>1.在cloud-demo父工程中添加spring-cloud-alilbaba的管理依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos的管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.注释之前的服务中的eureka依赖</p><p>3.添加Nacos的客户端依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>4.修改application.yml文件(并注释掉eureka的配置)<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务地址</span></span><br></pre></td></tr></table></figure></p><h2 id="Nacos服务分级模型"><a href="#Nacos服务分级模型" class="headerlink" title="Nacos服务分级模型"></a>Nacos服务分级模型</h2><ol><li>Nacos服务分级存储模型<br>① 一级是服务，例如userservice<br>②二级是集群，例如杭州或上海<br>③三级是实例，例如杭州机房的某台部署了userservice的服务器</li><li>如何设置实例的集群属性<br>① 修改application.yml文件，添加<code>spring.cloud.nacos.discovery.cluster-name</code>属性即可，如：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HN</span> <span class="comment">#集群名称 HN代指湖南</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Nacos负载均衡"><a href="#Nacos负载均衡" class="headerlink" title="Nacos负载均衡"></a>Nacos负载均衡</h2><p>使服务优先访问集群内的服务<br>举例现在基于上面的配置，现在有一个order服务，，一个实例，属于集群HN，一个user服务，3个实例，2个属于HN集群，1个属于HZ集群。现在用order服务向user服务发送多次请求，发现三个实例均被调用到(能观察到都有日志输出)</p><p>现在对order服务中application.yml，添加如下负载均衡策略<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment">#要做配置的微服务名称</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure><br>重启order服务，再次发送请求，可以看到，只有属于同一个集群的两个user服务响应了。即：优先选择本地集群，再在本地集群的多个服务当中随机访问(<strong>注意：不是轮询访问</strong>)。如果本地服务没有，或者本地服务挂了，才会跨集群访问(<strong>注意：不是跨集群就不能访问了</strong>)</p><p><strong><em>总结Nacos负载均衡策略</em></strong><br>1.优先选择同集群服务实例列表<br>2.本地集群找不到提供者，才去其它集群寻找，并且会报警告<br>3.确定了可用实例列表后，再采用随机负载均衡挑选实例</p><h2 id="根据权重负载均衡"><a href="#根据权重负载均衡" class="headerlink" title="根据权重负载均衡"></a>根据权重负载均衡</h2><p>1.在nacos控制台可以点击实例后的编辑按钮即可修改权重<br>2.权重值为0~1，将权重配置为0.1即可大大降低被访问的频率<br>3.如果权重调成0，将不会被访问到</p><h2 id="环境隔离-namespace-命名空间"><a href="#环境隔离-namespace-命名空间" class="headerlink" title="环境隔离-namespace(命名空间)"></a>环境隔离-namespace(命名空间)</h2><p>1.在Nacos控制台可以创建namespace，用来隔离不同的环境</p><ul><li>在左侧菜单栏点击命名空间，再点击新建命名空间</li><li>填写命名空间名和描述信息</li></ul><p>2.在application.yml配置文件中添加命名空间，值为命名空间id<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="comment">#dev环境</span></span><br></pre></td></tr></table></figure></p><blockquote><p>每个namespace都有唯一id，不同namespace下的服务不可见</p></blockquote><p>nacos中的实例默认为临时实例，当实例状态为不健康时会直接在服务列表里干掉，设置为非临时实例，nacos则会每隔一段时间会查询服务的健康状态。<br>设置如下配置即可将配置该为非临时实例。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">#是否是临时实例</span></span><br></pre></td></tr></table></figure></p><h2 id="Nacos于Eureka对比"><a href="#Nacos于Eureka对比" class="headerlink" title="Nacos于Eureka对比"></a>Nacos于Eureka对比</h2><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式<ul><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时<br>实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h2 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h2><p>配置更改热更新</p><blockquote><p>将配置交给nacos管理</p></blockquote><p>在nacos的<strong>配置管理的配置列表</strong>中点击<strong>创建配置</strong></p><ul><li>Data ID: 唯一，服务名称-profile(运行环境).yaml,如、shared-test.yaml</li><li>Group: 一般默认即可</li><li>描述：写配置文件作用,如、userservice的开发配置文件</li><li>配置格式: yaml</li><li>配置内容: 一般写那些需要更改的配置,</li><li>再点击发布即可</li></ul><p>配置如下信息便于下面验证：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dateformat:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure></p><blockquote><p>让微服务读取nacos中配置文件</p></blockquote><p>配置获取的步骤如下：<br>项目启动-&gt;读取nacos中配置文件-&gt;读取本地配置文件application.yml-&gt;创建spring容器-&gt;加载bean</p><p>1.引入Nacos的配置管理客户端依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos的配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--读取bootstrap.yml文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.在userservice中的resource目录添加一个<code>bootstrap.yml</code>文件，这个文件是引导文件，优先级高于application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span>  <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span><span class="string">:8848</span> <span class="comment"># nacos 地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">shared-configs:</span> <span class="comment">#共享配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-jdbc.yaml</span> <span class="comment">#共享mybatis配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">shared-test.yaml</span> <span class="comment">#服务 配置</span></span><br></pre></td></tr></table></figure></p><p>在user服务里读取配置来验证是否成功<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/now&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h2><p>微服务会从nacos中读取配置文件：<br>1.[服务名]-[spring.profile.active].yaml，环境配置<br>2.[服务名].yaml，默认配置，多环境共享</p><p>我们需要了解配置文件的优先级：<br>[服务名]-[环境].yaml&gt;[服务名].yaml&gt;本地配置</p><p>如：userservice-dev.yaml&gt;userservice.yaml&gt;本地的application.yaml</p><p>所以我们可以在nacos中新建一个<code>服务名.yaml</code>的配置文件，在里面填写我们的多环境共享配置。</p><blockquote><p>统一服务在不同环境下能访问到公共环境配置，但如果当配置属性相同时，按优先级来</p></blockquote><h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>有很多的业务相关参数，将来可能会根据实际情况临时调整。例如购物车业务，购物车数量有一个上限，默认是10，对应代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查购物车是否已满</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkCartsFull</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="comment">//  查询当前用户购物车数量 </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> lambdaQuery().eq(Cart::getUserId, userId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(StrUtil.format(<span class="string">&quot;用户购物车课程不能超过&#123;&#125;&quot;</span>, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在这里购物车是写死的固定值，我们应该将其配置在配置文件中，方便后期修改。解决办法如下：</p><ol><li><p>添加配置到nacos中：<br>在nacos中新建一个配置文件，将购物车上限数量添加到配置当中</p><ul><li>在naocs管理界面:配置管理-&gt;配置列表-&gt;右上角+新建配置</li><li>DataID: <code>cart-service</code> ，这里没有写dev或local等后缀，表示所有环境都适用</li><li>配置格式：<code>YAML</code></li><li>配置内容：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">cart:</span></span><br><span class="line">    <span class="attr">maxAmount:</span> <span class="number">2</span> <span class="comment">#购物车商品上限</span></span><br></pre></td></tr></table></figure></li><li>点击发布即可</li></ul></li><li><p>在微服务中读取配置，实现配置热更新<br>在cart-service中新建一个属性读取类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hm.cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer maxAmount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在业务中使用该属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CartProperties cartProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查购物车是否已满</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkCartsFull</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> lambdaQuery().eq(Cart::getUserId, userId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= cartProperties.getMaxAmount()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizIllegalException</span>(StrUtil.format(<span class="string">&quot;用户购物车课程不能超过&#123;&#125;&quot;</span>, cartProperties.getMaxAmount()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试:<br>重启服务，选择商品加入购物车，发现数量已经最大为2<br>修改nacos中的配置，将maxAmount的值改为3，点击发布，发现数量已经最大为3<br>至此实现了配置热更新</p></li></ol><h1 id="Nacos简化理解"><a href="#Nacos简化理解" class="headerlink" title="Nacos简化理解"></a>Nacos简化理解</h1><p>在微服务远程调用的过程中，包括两个角色：</p><ul><li>服务提供者：提供接口供其它微服务访问，比如item-service</li><li>服务消费者：调用其它微服务提供的接口，比如cart-service</li></ul><p>在大型微服务项目中，服务提供者的数量会非常多，为了管理这些服务就引入了注册中心的概念。注册中心、服务提供者、服务消费者三者间关系如下：<br><img src="https://picbed.xusir.fun/post_img/java/nacos.png" alt="nacos"></p><p>目前开源的注册中心框架有很多，国内比较常见的有：</p><ul><li>Eureka：Netflix公司出品，目前被集成在SpringCloud当中，一般用于Java应用</li><li>Nacos：Alibaba公司出品，目前被集成在SpringCloudAlibaba中，一般用于Java应用</li><li>Consul：HashiCorp公司出品，目前集成在SpringCloud中，不限制微服务语言</li></ul><p>nacos官网如下</p><ul><li><a href="https://nacos.io/">https://nacos.io/</a></li></ul><p>如果在虚拟机上安装并启动好nacos，访问 <a href="http://192.168.40.101:8848/nacos/">http://192.168.40.101:8848/nacos/</a> ，注意将192.168.40.101替换为你自己的虚拟机IP地址。</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos 服务注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注册nacos</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span> <span class="comment"># 服务名称这里为商品管理</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br></pre></td></tr></table></figure><p>访问nacos控制台，在nacos控制台的<strong>服务管理/服务列表</strong>中可以看到</p></li></ol><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><ol><li><p>服务的消费者要去nacos订阅服务，这个过程就是服务发现，步骤如下：</p><ul><li>引入依赖</li><li>配置Nacos地址</li><li>发现并调用服务</li></ul></li><li><p>服务发现除了要引入nacos依赖以外，由于还需要负载均衡，因此要引入SpringCloud提供的LoadBalancer依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos 服务注册发现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cart-service</span> <span class="comment">#消费者，购物车服务</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br></pre></td></tr></table></figure></li><li><p>调用服务<br>上面的RestTemplate中，发送请求的地址为硬编码，而我们现在使用了nacos,就可以从naocs中获取服务地址，从而实现负载均衡。<br>步骤：根据服务名获取实例列表，设置负载均衡策略，获取实例，再发送请求。<br>服务发现需要用到一个工具，<code>DiscoveryClient</code>，SpringCloud已经帮我们自动装配，我们可以直接注入使用：<br>见下方示例代码<code>36~42行</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CartMapper, Cart&gt; <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="comment">// 1.注入restTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注入DiscoveryClient</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.查询我的购物车列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CartVO&gt; <span class="title function_">queryMyCarts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询我的购物车列表</span></span><br><span class="line">        List&lt;Cart&gt; carts = lambdaQuery().eq(Cart::getUserId, <span class="number">1L</span><span class="comment">/*TODO UserContext.getUser()*/</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(carts)) &#123;</span><br><span class="line">            <span class="keyword">return</span> CollUtils.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.转换VO</span></span><br><span class="line">        List&lt;CartVO&gt; vos = BeanUtils.copyList(carts, CartVO.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.处理VO中的商品信息</span></span><br><span class="line">        handleCartItems(vos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> vos;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.远程调用商品服务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 1.获取商品id</span></span><br><span class="line">        Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet())</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据服务名称发现实例列表</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;item-service&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(CollUtil.isEmpty(instances))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置负均衡,随机获取一个实例</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> instances.get(RandomUtil.randomInt(instances.size()));</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//2.查询商品</span></span><br><span class="line">        <span class="comment">//2.1 发送商品管理服务(item-service)远端请求</span></span><br><span class="line">        ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">                serviceInstance.getUri()+<span class="string">&quot;/items?ids=&#123;ids&#125;&quot;</span>,    <span class="comment">// url 根据商品id查询商品列表</span></span><br><span class="line">                HttpMethod.GET,                                 <span class="comment">// 请求方式</span></span><br><span class="line">                <span class="literal">null</span>,                                           <span class="comment">// 请求实体</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;&#125;, <span class="comment">// 返回值类型</span></span><br><span class="line">                Map.of(<span class="string">&quot;ids&quot;</span>, CollUtil.join(itemIds, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 解析响应，判断是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (!response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.3 解析响应，获取数据</span></span><br><span class="line">        List&lt;ItemDTO&gt; items = response.getBody();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(items)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.转为 id 到 item的map</span></span><br><span class="line">        Map&lt;Long, ItemDTO&gt; itemMap = items.stream().collect(Collectors.toMap(ItemDTO::getId, Function.identity()));</span><br><span class="line">        <span class="comment">// 4.写入vo</span></span><br><span class="line">        <span class="keyword">for</span> (CartVO v : vos) &#123;</span><br><span class="line">            <span class="type">ItemDTO</span> <span class="variable">item</span> <span class="operator">=</span> itemMap.get(v.getItemId());</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v.setNewPrice(item.getPrice());</span><br><span class="line">            v.setStatus(item.getStatus());</span><br><span class="line">            v.setStock(item.getStock());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="http客户端Feign-OpenFeign"><a href="#http客户端Feign-OpenFeign" class="headerlink" title="http客户端Feign-OpenFeign"></a>http客户端Feign-OpenFeign</h1><p>在上面，我们利用Nacos实现了服务的治理，利用RestTemplate实现了服务的远程调用。但是远程调用的代码太复杂了<br>而且这种调用方式，与原本的本地方法调用差异太大，编程时的体验也不统一，一会儿远程调用，一会儿本地调用。<br>因此，我们必须想办法改变远程调用的开发模式，让远程调用像本地方法调用一样简单。而这就要用到OpenFeign组件了。<br>其实远程调用的关键点就在于四个：</p><ul><li>请求方式</li><li>请求路径</li><li>请求参数</li><li>返回值类型<br>所以，OpenFeign就利用SpringMVC的相关注解来声明上述4个参数，然后基于动态代理帮我们生成远程调用的代码，而无需我们手动再编写，非常方便。</li></ul><h2 id="定义和使用Feign客户端"><a href="#定义和使用Feign客户端" class="headerlink" title="定义和使用Feign客户端"></a>定义和使用Feign客户端</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--openFeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--负载均衡器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在cart-service的<strong>启动类</strong>上添加注解开启Feign的功能</p><ul><li><code>@EnableFeignClients// 开启feign</code></li></ul></li><li><p>编写Feign客户端：<br>主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：item-service</li><li>请求方式：GET</li><li>请求路径：/items</li><li>请求参数：Collection<Long> ids</li><li>返回值类型：List<ItemDTO><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;item-service&quot;)</span>  <span class="comment">// 调用的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/items&quot;)</span>   <span class="comment">// 调用的服务地址</span></span><br><span class="line">    List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> Collection&lt;Long&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>对比下面两个<br><div class="tabs" id="feign"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="feign-1">cart-service中使用feign后</button><button type="button" class="tab " data-href="feign-2">item-service中的对应接口</button></ul><div class="tab-contents"><div class="tab-item-content active" id="feign-1"><p>不再需要<code>RestTemplate</code>和<code>DiscoveryClient</code>了，原本的复杂的代码也删掉了，只需要调用Feign客户端即可。并且代码更简洁，更易读。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CartMapper, Cart&gt; <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemClient itemClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CartVO&gt; <span class="title function_">queryMyCarts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询我的购物车列表</span></span><br><span class="line">        List&lt;Cart&gt; carts = lambdaQuery().eq(Cart::getUserId, <span class="number">1L</span><span class="comment">/*TODO UserContext.getUser()*/</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (CollUtils.isEmpty(carts)) &#123;</span><br><span class="line">            <span class="keyword">return</span> CollUtils.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.转换VO</span></span><br><span class="line">        List&lt;CartVO&gt; vos = BeanUtils.copyList(carts, CartVO.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.处理VO中的商品信息</span></span><br><span class="line">        handleCartItems(vos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> vos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleCartItems</span><span class="params">(List&lt;CartVO&gt; vos)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 1.获取商品id</span></span><br><span class="line">        Set&lt;Long&gt; itemIds = vos.stream().map(CartVO::getItemId).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.查询商品</span></span><br><span class="line">        List&lt;ItemDTO&gt; items = itemClient.queryItemByIds(itemIds);</span><br><span class="line">        <span class="keyword">if</span>(CollUtil.isEmpty(items))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.转为 id 到 item的map</span></span><br><span class="line">        Map&lt;Long, ItemDTO&gt; itemMap = items.stream().collect(Collectors.toMap(ItemDTO::getId, Function.identity()));</span><br><span class="line">        <span class="comment">// 4.写入vo</span></span><br><span class="line">        <span class="keyword">for</span> (CartVO v : vos) &#123;</span><br><span class="line">            <span class="type">ItemDTO</span> <span class="variable">item</span> <span class="operator">=</span> itemMap.get(v.getItemId());</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v.setNewPrice(item.getPrice());</span><br><span class="line">            v.setStatus(item.getStatus());</span><br><span class="line">            v.setStock(item.getStock());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="feign-2"><p>可以看到接口和我们在cart-service中使用<code>FeignClient</code>声明的接口是一致的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;商品管理相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/items&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id批量查询商品&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemService.queryItemByIds(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></p><h2 id="自定义Feign的配置"><a href="#自定义Feign的配置" class="headerlink" title="自定义Feign的配置"></a>自定义Feign的配置</h2><p>Feign运行自定义配置来覆盖默认配置，可以修改的配置如下：</p><div class="table-container"><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>feign.Logger.Level</td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign.Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign.Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table></div><p>一般我们需要配置的就是日志级别。配置Feign日志有两种方式：<br><div class="tabs" id="feign"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="feign-1">方式一:配置文件方式</button><button type="button" class="tab " data-href="feign-2">方式二:java代码方式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="feign-1"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment">#这里是default就是全局配置，如果写服务名称如userservice，那么就是对指定服务进行配置</span></span><br><span class="line">        <span class="attr">logger-level:</span> <span class="string">FULL</span> <span class="comment">#feign日志级别</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="feign-2"><p>首先声明一个Bean:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC;<span class="comment">// 日志级别</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>该配置类暂时不会生效，使它生效的话<br>如果要<strong>全局配置</strong>，则把它放到<code>@EnableFeignClients</code>注解里<br>如：<code>@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)// 开启feign</code></p><p>如果要<strong>局部配置</strong>，则把它放到<code>@FeignClient</code>注解里<br>如：<code>@FeignClient(value = &quot;userservice&quot;,configuration = DefaultFeignConfiguration.class)// 调用userservice服务</code><br>那么该日志就只针对userservice服务</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></p><h2 id="Feign的性能优化-连接池和日志"><a href="#Feign的性能优化-连接池和日志" class="headerlink" title="Feign的性能优化-连接池和日志"></a>Feign的性能优化-连接池和日志</h2><ol><li><p>优化feign的性能主要包括:<br>1.默认底层实现的每次访问都需要去创建一个新的请求,使用连接池代替默认的URLConnection,依赖于其他框架,主要有下面三种</p><ul><li>HttpURLConnection: 默认实现,不支持连接池</li><li>Apache HttpClient: 支持连接池</li><li>OKHttp: 支持连接池</li></ul><p>2.OpenFeign只会在FeignClient所在包的日志级别为DEBUG时，才会输出日志。而且其日志级别有4级：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。<br>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。</li></ul></li><li><p><strong>feign性能优化-连接池配置</strong></p><ul><li>引入<code>okhttp</code>依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--OK http 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>开启连接池<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启OKHttp功能</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>feign性能优化-日志级别配置</strong></p><ul><li>定义一个Feign配置类，定义Feign的日志级别:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">logLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接下来，要让日志级别生效，还需要配置这个类。有两种方式：<ul><li><strong>局部生效</strong>：在某个FeignClient中配置，只对当前FeignClient生效<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure></li><li><strong>全局生效</strong>：在<code>@EnableFeignClients</code>注解中配置，对所有FeignClient生效<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="OpenFeign传递登录用户信息"><a href="#OpenFeign传递登录用户信息" class="headerlink" title="OpenFeign传递登录用户信息"></a>OpenFeign传递登录用户信息</h2><ol><li><p>情景<br>前端发起的请求都会经过网关再到微服务，如果在网关中编写过过滤器和拦截器功能，微服务可以轻松获取登录用户信息。<br>但有些业务是比较复杂的，请求到达微服务后还需要调用其它多个微服务。<br>由于微服务获取用户信息是通过拦截器在请求头中读取，因此要想实现微服务之间的用户信息传递，就<strong>必须在微服务发起调用时把用户信息存入请求头</strong>。</p></li><li><p>解决方案<br>微服务之间调用是基于OpenFeign来实现的，并不是我们自己发送的请求。我们如何才能让每一个由OpenFeign发起的请求自动携带登录用户信息呢？<br>这里要借助Feign中提供的一个拦截器接口：<code>feign.RequestInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Called for every request. </span></span><br><span class="line"><span class="comment">   * Add data using methods on the supplied &#123;<span class="doctag">@link</span> RequestTemplate&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate template)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要实现这个接口，然后实现apply方法，利用RequestTemplate类来添加请求头，将用户信息保存到请求头中。这样以来，每次OpenFeign发起请求的时候都会调用该方法，传递用户信息。</p></li><li><p>实现<br>由于FeignClient全部都是在hm-api模块，因此我们在hm-api模块的com.hmall.api.config.DefaultFeignConfig中编写这个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置拦截器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">requestInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class="line">                <span class="type">Long</span> <span class="variable">userID</span> <span class="operator">=</span> UserContext.getUser();</span><br><span class="line">                <span class="keyword">if</span>(userID!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    requestTemplate.header(<span class="string">&quot;userinfo&quot;</span>, userID.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，要让其生效，需要在使用FeignClient的微服务启动类上加<code>@EnableFeignClients</code>注解中配置，对所有FeignClient生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.hmall.api.clients&quot;,defaultConfiguration = DefaultFeignConfig.class)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="OpenFeign整合Sentinel"><a href="#OpenFeign整合Sentinel" class="headerlink" title="OpenFeign整合Sentinel"></a>OpenFeign整合Sentinel</h2><p>当我们使用Sentinel对线程进行了隔离,通过限流来降低服务器压力，尽量减少因并发流量引起的服务故障的概率，但并不能完全避免服务故障。<br>一旦某个服务出现故障，我们必须隔离对这个服务的调用，避免发生雪崩。<br>比如，查询购物车的时候需要查询商品，为了避免因商品服务出现故障导致购物车服务级联失败，我们可以把购物车业务中查询商品的部分隔离起来，限制可用的线程资源:<br>这样，即便商品服务出现故障，最多导致查询购物车业务故障，并且可用的线程资源也被限定在一定范围，不会导致整个购物车服务崩溃。<br>这时就可以使用fallback机制来解决业务故障异常。</p><ol><li><p>修改cart-service模块的application.yml文件，开启Feign的sentinel功能</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对sentinel的支持</span></span><br></pre></td></tr></table></figure></li><li><p>在api调用模块中，创建一个类实现<code>FallbackFactory&lt;&gt;</code>接口,并注册为bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;ItemClient&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ItemClient <span class="title function_">create</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ItemClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List&lt;ItemDTO&gt; <span class="title function_">queryItemByIds</span><span class="params">(Collection&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;查询购物车商品信息失败!&quot;</span>,cause);</span><br><span class="line">                <span class="keyword">return</span> CollUtils.emptyList();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductStock</span><span class="params">(List&lt;OrderDetailDTO&gt; items)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;扣减库存数量失败!&quot;</span>,cause);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;扣减库存数量失败异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在调用方，使用OpenFeign的fallback机制，指定fallback类，当调用失败时，会调用指定的fallback类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;item-service&quot;,fallbackFactory  = ItemClientFallbackFactory.class)</span>  <span class="comment">// 调用的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemClient</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="统一网关Gateway"><a href="#统一网关Gateway" class="headerlink" title="统一网关Gateway"></a>统一网关Gateway</h1><p><strong>网关功能有：身份认证和权限校验、服务路由、负载均衡、请求限流…</strong><br>在SpringCloud中网关的实现包括两种：<code>gateway</code> 和 <code>zuul</code><br>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。<br>由于网关本身也是一个独立的微服务，因此也需要创建一个模块开发功能。</p><h2 id="搭建网关服务"><a href="#搭建网关服务" class="headerlink" title="搭建网关服务"></a>搭建网关服务</h2><ol><li><p>创建新的module，引入SpringCloudGateway的依赖和nacos的服务发现依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos discovery--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--负载均衡--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>application.yml</code>编辑路由配置以及nacos地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称 网关本身也是一个服务将注册进naocs</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span><span class="string">:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span> <span class="comment"># 路由规则id，自定义,唯一</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># 路由的目标地址，支持lb和http两种格式,lb代表负载均衡，会从注册中心拉取服务列表</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断请求是否符合规范,符合则路由到目标服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 路径断言，判断路径是否以/user开头，符合则转发到目标地址</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">item</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://item-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/items/**,/search/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/users/**,/addresses/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">trade</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://trade-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/orders/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pay</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://pay-service</span></span><br></pre></td></tr></table></figure></li><li><p>启动测试<br>启动UserApplication、GatewayApplication<br>启动网关，访问<code>localhost:8080/items/page?pageNo=1&amp;pageSize=1</code>即被转发为<code>locahost:8081/items/page?pageNo=1&amp;pageSize=1</code></p></li></ol><h2 id="路由过滤器GatewayFilter"><a href="#路由过滤器GatewayFilter" class="headerlink" title="路由过滤器GatewayFilter"></a>路由过滤器GatewayFilter</h2><p>GatewayFilter是网关提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理:<br>官网：<a href="https://docs.spring.io/spring-cloud-gateway/reference/4.1-SNAPSHOT/spring-cloud-gateway.html">https://docs.spring.io/spring-cloud-gateway/reference/4.1-SNAPSHOT/spring-cloud-gateway.html</a> ,现在已有近37种过滤配置<br>下面只做几个演示</p><h3 id="案例-给所有进入xx服务的请求添加一个请求头"><a href="#案例-给所有进入xx服务的请求添加一个请求头" class="headerlink" title="案例-给所有进入xx服务的请求添加一个请求头"></a>案例-给所有进入xx服务的请求添加一个请求头</h3><ol><li><p><strong>局部服务添加</strong>：<br>在网关的user-service中添加过滤器</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由标识，必须唯一</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment"># 路由的目标地址</span></span><br><span class="line">      <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断请求是否符合规范</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 路径断言，判断路径是否以/user开头，符合则转发到目标地址</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,Facts</span> <span class="string">are</span> <span class="string">the</span> <span class="string">only</span> <span class="string">test</span> <span class="string">of</span> <span class="string">truth!</span> <span class="comment"># 添加请求头，key为Truth，value为Facts are the only test of truth!</span></span><br></pre></td></tr></table></figure></li><li><p><strong>验证</strong><br>在userservice的服务中获取请求头并打印中控制台来验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,</span></span><br><span class="line"><span class="params">                      <span class="meta">@RequestHeader(value = &quot;Truth&quot;,required = false)</span>  String truth)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Truth : &quot;</span>+truth);</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用到该服务时可以看到<code>Truth : Facts are the only test of truth!</code>被输出在控制台</p></li><li><p><strong>全局配置给所有微服务添加</strong>:<br>在于<code>routers</code>的平级位置下方添加<code>default-filters</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user</span> <span class="comment"># 路由标识，必须唯一</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址</span></span><br><span class="line">      <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断请求是否符合规范</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 路径断言，判断路径是否以/user开头，符合则转发到目标地址</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cart</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://cart-service</span></span><br><span class="line">      <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/cart/**</span></span><br><span class="line">  <span class="attr">default-filters:</span> <span class="comment"># 全局过滤器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,Facts</span> <span class="string">are</span> <span class="string">the</span> <span class="string">only</span> <span class="string">test</span> <span class="string">of</span> <span class="string">truth!</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="全局过滤器-GlobalFilter"><a href="#全局过滤器-GlobalFilter" class="headerlink" title="全局过滤器 GlobalFilter"></a>全局过滤器 GlobalFilter</h2><p>全局过滤器的作用是处理一切进入网关的请求和微服务响应，于GatewayFilter的作用一样，区别在于GatewayFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现</p><ol><li>实现<br>实现方式为实现<code>GlobalFilter</code>接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125;返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="案例-GlobalFilter实现登录验证拦截"><a href="#案例-GlobalFilter实现登录验证拦截" class="headerlink" title="案例-GlobalFilter实现登录验证拦截"></a>案例-GlobalFilter实现登录验证拦截</h3><ol><li><p>情景模拟</p><ul><li>通过一个模拟需求来演示如何实现：定义全局过滤器，拦截并判断用户身份</li><li>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足以下条件：</li><li>判断是否需要拦截，部分请求路径不需要拦截</li><li>需要拦截就进行token解析验证</li><li>如果满足条件就放行，否则则拦截<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hm:</span> <span class="comment">#application,yml配置的不需要拦截的路径</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">excludePaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/search/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/users/login</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/items/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/hi</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于读取配置文件的类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hm.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; includePaths;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; excludePaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现<br>在gateway网关模块中新建一个类<code>AuthGlobalFilter</code></p><ul><li>1.实现GlobalFilter接口</li><li>2.添加@Order注解或实现Ordered接口</li><li>3.编写处理逻辑<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Order(-1)//值越小，优先级越高，也可以实现Ordered接口来实现优先级</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AuthProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="comment">// 注入jwt工具类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtTool jwtTool;</span><br><span class="line">    <span class="comment">// 注入配置类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthProperties authProperties;</span><br><span class="line">    <span class="comment">// 使用ant匹配器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 获取request</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断需不需要进行拦截</span></span><br><span class="line">        <span class="keyword">if</span>(isExclude(request.getPath().toString()))&#123;</span><br><span class="line">            <span class="comment">//请求的路径在排除路径中，无需拦截，放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;String&gt; headers = request.getHeaders().get(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!CollUtil.isEmpty(headers))&#123;</span><br><span class="line">            token = headers.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.校验并解析token</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userID</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userID = jwtTool.parseToken(token);<span class="comment">//工具类中已经包含了对token的校验和解析逻辑，出现问题则抛出对应异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// token无效,返回401</span></span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> response.setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 5.token有效则传递用户信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;userID&quot;</span>+userID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现判断是否需要拦截逻辑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isExclude</span><span class="params">(String antPath)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(String pathPattern : authProperties.getExcludePaths())&#123;</span><br><span class="line">            <span class="keyword">if</span>(antPathMatcher.match(pathPattern,antPath))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置优先级，越小优先级越高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>访问拦截范围中的业务如<code>http://localhost:8080/carts/list</code>即可验证，出现401错误</li></ul></li></ol><h3 id="网关传递信息"><a href="#网关传递信息" class="headerlink" title="网关传递信息"></a>网关传递信息</h3><p>上面的登录验证拦截中，网关已经可以完成登录校验并获取登录用户身份信息。但是当网关将请求转发到微服务时，微服务又该如何获取用户身份呢？<br>由于网关发送请求到微服务依然采用的是Http请求，因此我们可以将用户信息以请求头的方式传递到下游微服务。<br>然后微服务可以从请求头中获取登录用户信息。考虑到微服务内部可能很多地方都需要用到登录用户信息，因此我们可以利用SpringMVC的拦截器来实现登录用户信息获取，并存入ThreadLocal，方便后续使用。</p><ol><li><p>改造网关过滤器,保存用户信息到请求头<br>在获取用户信息后保存到请求头，转发到下游微服务<br><code>mutate()</code>方法可以对下游请求做更改，<code>.request</code>表示对请求做处理，利用<code>builder</code>可以对请求中各种信息做修改<br>将上面<code>6.3.1中的过滤逻辑代码的41~45行的代码</code>修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存用户信息到请求头中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> userID.toString();</span><br><span class="line"><span class="type">ServerWebExchange</span> <span class="variable">webExchange</span> <span class="operator">=</span> exchange.mutate()</span><br><span class="line">        .request(b -&gt; b.header(<span class="string">&quot;userinfo&quot;</span>, userInfo))</span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">//5.放行, 携带用户信息</span></span><br><span class="line"><span class="keyword">return</span> chain.filter(webExchange);</span><br></pre></td></tr></table></figure></li><li><p>拦截器获取用户</p><ul><li>如所有微服务模块引用了一个common模块，那么只需要在common模块中添加拦截器即可</li><li>下面演示的common模块中已经有一个用于保存登录用户的ThreadLocal工具,其中已经提供了保存和获取用户的方法: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存当前登录用户信息到ThreadLocal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        tl.set(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前登录用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除当前登录用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现拦截器并注册,但在网关这已经实现了拦截逻辑，所以这里只需要放行即可 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userinfo</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;userinfo&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isNotBlank(userinfo))&#123;</span><br><span class="line">            <span class="comment">//2.设置用户信息</span></span><br><span class="line">            UserContext.setUser(Long.valueOf(userinfo));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//清理用户</span></span><br><span class="line">        UserContext.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 注册拦截器 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer属于WebMvc包下的,而网关是非阻塞基于响应式的,没有WebMvc包，因此需要判断</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span><span class="comment">// 判断DispatcherServlet类是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">UserInfoInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 不过，需要注意的是，这个配置类默认是不会生效的，因为它所在的包是<code>com.hmall.common.config</code>，与其它微服务的扫描包不一致，无法被扫描到，因此无法生效。<br> 基于SpringBoot的自动装配原理，我们要将其添加到resources目录下的<code>META-INF/spring.factories</code>文件中： <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.hmall.common.config.MyBatisConfig,\</span></span><br><span class="line"><span class="string">com.hmall.common.config.JsonConfig,\</span></span><br><span class="line"><span class="string">com.hmall.common.config.MvcConfig</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>路由过滤器，defaultFilter，全局过滤器的执行顺序：</p><ul><li>1.order值越小，优先级越高</li><li>2.当order值一样时，顺序是defaultFilter最先，然后是局部路由过滤器，最后是全局过滤器</li></ul><h2 id="跨域问题处理"><a href="#跨域问题处理" class="headerlink" title="跨域问题处理"></a>跨域问题处理</h2><p>跨域：域名不一致就是跨域，主要包括：<br>域名不同：www.taobao.com 和www.taobao.org 和www.jd.com 和miaosha.jd.com<br>域名相同，端口不同：localhost:8080和localhost8081<br>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题<br>解决方案：CORS</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment">#...</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://www.leyou.com&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许跨域的ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowedCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><h2 id="路由断言工厂Route-Predicate-Factory"><a href="#路由断言工厂Route-Predicate-Factory" class="headerlink" title="路由断言工厂Route Predicate Factory"></a>路由断言工厂Route Predicate Factory</h2><p>上面的配置文件中了解到<code>predicates</code>是路由断言，是判断规则。而配置文件中写的断言规则只是字符串，这些字符串会被<code>Predicate Factory</code>读取并处理，转变为路由判断的条件。<br>Spring提供了11种基本的Predicate工厂：</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-ld, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org, </strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>-Method=GET, POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/(segment),/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者-Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>-RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td></tr></tbody></table></div><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><strong>镜像</strong>：Docker将应用程序及其所需的依赖，函数库，环境，配置文件等打包在一起，称为镜像。<br><strong>容器</strong>：镜像中的应用程序运行后形成的进程就是容器，只是Docker会做容器做隔离，对外不可见。</p><p><strong>docker架构</strong><br>Docker是一个CS架构的程序，由两部分组成：<br>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像，容器等<br>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p><p><strong>DockerHub</strong><br>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</p><h2 id="在CentOS上安装Docker"><a href="#在CentOS上安装Docker" class="headerlink" title="在CentOS上安装Docker"></a>在CentOS上安装Docker</h2><p>关于centos，可以看我往期linux的文章：</p><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine \</span><br><span class="line">    docker-selinux </span><br></pre></td></tr></table></figure><p>然后更新本地镜像源（阿里）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>更新yum，建立缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><p>最后，执行命令，安装Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><blockquote><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>通过命令启动docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker <span class="comment"># 查看docker服务状态</span></span><br><span class="line"></span><br><span class="line">docker -v  <span class="comment"># 查看docker版本</span></span><br></pre></td></tr></table></figure><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>最新请参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p>通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker <span class="comment">#创建文件夹</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://这里为阿里给你的镜像加速地址]&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF  <span class="comment"># 配置写入daemon.json文件中</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload <span class="comment">#重新加载文件</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker <span class="comment">#重启docker</span></span><br></pre></td></tr></table></figure><h2 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h2><p><img src="https://picbed.xusir.fun/post_img/java/docker.png" alt="docker命令导航图"></p><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><p>镜像名称一般由两部分组成：<code>[repository]:[tag]</code>。如mysql:5.7和mysql:5.6就是两个不同的镜像<br><strong><em>如果不写tag，则默认拉取最新版本的，tag即为latest</em></strong></p><div class="table-container"><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>Dockerfile构建镜像到本地:</td><td><code>docker build</code></td></tr><tr><td>local(本地)查看镜像:</td><td><code>docker images</code></td></tr><tr><td>local(本地)删除镜像:</td><td><code>docker rmi</code> 后面接镜像名</td></tr><tr><td>从Docker Registry镜像服务器拉取镜像到本地:</td><td><code>docker pull</code> 后接<code>[repository]:[tag]</code></td></tr><tr><td>本地保存镜像为一个压缩包:</td><td><code>docker save</code> 后接 <code>-o 压缩包名 镜像名</code></td></tr><tr><td>加载压缩包为镜像:</td><td><code>docker load</code> 后面接 压缩包名</td></tr><tr><td>更多命令请查看帮助文档：</td><td><code>docker --helper</code></td></tr><tr><td>查看具体命令:</td><td><code>docker command --helpe</code></td></tr></tbody></table></div><p>例：拉取nignx的镜像:<code>docker pull nginx</code></p><p>更多请前往：<a href="https://hub.docker.com/">https://hub.docker.com/</a><br>嘘！更多有关docker镜像:</p><ul><li><a href="https://dockerpull.org/">https://dockerpull.org/</a></li><li><a href="https://www.aabcc.top/archives/m7NPfx1D">https://www.aabcc.top/archives/m7NPfx1D</a></li></ul><p>操作示例：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis  <span class="comment"># 拉取最新的redis镜像</span></span><br><span class="line">docker images   <span class="comment"># 查看本地镜像</span></span><br><span class="line">docker save -o redis.tar redis:latest <span class="comment"># 将redis:latest镜像保存为redis.tar压缩包</span></span><br><span class="line">docker rmi redis:latest <span class="comment"># 删除redis:latest镜像</span></span><br><span class="line">docker load -i redis.tar <span class="comment"># 将reids.tar压缩包加载为镜像</span></span><br></pre></td></tr></table></figure></p><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>镜像运行为容器:<code>docker run</code><br>当不知道运行某个容器时，建议去dockerHub官网上查看:<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><div class="table-container"><table><thead><tr><th>容器常用操作</th><th>命令</th></tr></thead><tbody><tr><td>运行到暂停</td><td><code>docker pause</code></td></tr><tr><td>暂停到运行</td><td><code>docker unpasue</code></td></tr><tr><td>运行到停止</td><td><code>docker stop</code></td></tr><tr><td>停止到运行</td><td><code>docker start</code></td></tr><tr><td>查看容器运行日志</td><td><code>docker logs</code></td></tr><tr><td>查看所有运行的容器及状态</td><td><code>docker ps</code></td></tr><tr><td>进入容器执行命令</td><td><code>docker exec</code></td></tr><tr><td>删除指定容器</td><td><code>docker rm</code></td></tr></tbody></table></div><p>容器操作示例：拉取nginx镜像，创建一个nginx容器，运行nginx容器，进入nginx容器，修改html内容，添加”阿徐到此一游“<br><details class="folding-tag" blue><summary> 查看容器操作示例 </summary>              <div class='content'>              <p>运行一个名nginx的容器，取名为mn<br><code>docker pull nginx</code>:拉取最新的nginx镜像</p><p>去docker hub 查看Nginx的容器运行命令<br><code>docker run --name mn -p 80:80 -d nginx</code><br>命令解读：</p><ul><li><code>docker run</code>: 创建并运行一个容器</li><li><code>--name</code>: 给容器取一个名字，这里叫mn</li><li><code>-p</code>：将宿主机端口与容器端口映射，冒号左侧是宿主端口，右侧是容器端口</li><li><code>-d</code>：后台运行容器</li><li><code>nginx</code>：镜像名称，列如nginx</li></ul><p>运行完返回的一长串字符是容器id(CONTAINER ID)<br>如，我的虚拟机的ip为<code>192.168.255.128</code>，运行完后访问<code>192.168.255.128:80</code>即可看到nginx的运行界面</p><p><code>docker logs mn</code>：查看日志</p><p>进入容器:<code>docker exec -it mn bash</code><br>命令解读：</p><ul><li><code>docker exec</code>：进入容器内部，执行一个命令</li><li><code>-it</code>：给当前容器创建一个标准输入，输出终端，允许我们与容器交互</li><li><code>mn</code>：要进入的容器的名称，这里前面我们创建的nginx容器叫mn</li><li><code>bash</code>：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><p>可以看到界面左侧变成了：<code>容器id:/#</code>的格式<br>输入<code>pwd</code>发现在根目录<code>/</code>，输入<code>ls</code>可以看到熟悉的<code>home lib64 bin media root sys usr var</code>等目录，这就是一个阉割的<code>linux</code>系统,我们需要找到<code>nginx</code>在哪个目录，访问<code>https://hub.docker.com/_/nginx</code>:官网可知静态资源应该放在<code>/usr/share/nginx/html</code>目录下。</p><p>切换路径：<code>cd  /usr/share/nginx/html</code>,ls可看到<code>50x.html</code>和<code>index.html</code></p><p>替代原有的内容：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s#Welcome to nginx#阿徐到此一游#g&#x27;</span> index.html</span><br><span class="line">sed -i <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure><br>刷新网页即可看到改动。</p><p>输入<code>exit</code>退出容器，停止容器：<code>docker stop mn</code></p><p>输入<code>docker ps -a</code>即可查看所有容器状态，包括<strong>已经停止</strong>的容器</p>              </div>            </details></p><h3 id="数据卷-容器数据管理"><a href="#数据卷-容器数据管理" class="headerlink" title="数据卷(容器数据管理)"></a>数据卷(容器数据管理)</h3><p>容器现在与数据十分耦合，导致不便于修改，数据不可复用，升级维护困难<br><strong>数据卷(volume)</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录</p><p>数据操作的基本语法为：<code>docker volume [COMMAND]</code><br>docker volume命令是数据卷操作,根据命令后跟随的command来确定下一步操作:</p><ul><li>create   创建一个volume</li><li>inspect  显示一个或多个volume的信息</li><li>ls       列出所有的的volume</li><li>prune    删除未使用的volume</li><li>rm       删除一个或多个指定的volume</li></ul><p>操作示例：创建一个数据卷，并查看数据卷在宿主机的目录位置<br><details class="folding-tag" red><summary> 查看操作示例 </summary>              <div class='content'>              <p>创建数据卷：<code>docker volume create html</code></p><p>查看所有数据：<code>docker volume ls</code></p><p>查看数据卷详细信息卷：<code>docker volume inspect html</code></p>              </div>            </details></p><p><strong>挂载数据卷</strong><br>我们在创建容器时，可以通过<code>-v</code>参数来挂载一个数据卷到某个容器目录  </p><p>操作示例：创建一个nginx容器，修改容器内的html目录内的index.html内容<br><details class="folding-tag" red><summary> 查看操作示例挂载数据卷 </summary>              <div class='content'>              <p>1.创建一个叫mn的nginx容器并运行它，同时挂载html数据卷到容器内的/usr/share/nginx/html目录上，并把nginx的80端口暴露在虚拟机80端口。<br><code>docker run --name mn -p 80:80 -v html:/usr/share/nginx/html -d nginx</code></p><blockquote><p>注：如果挂载时数据卷不存在，docker会自动创建该数据卷</p></blockquote><p>2.查看数据卷html信息<code>docker inspect html</code><br><code>&quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/html/_data&quot;,</code>，得知挂载点在这个目录里<code>/var/lib/docker/volumes/html/_data</code></p><p>3.进入数据卷所在位置，并修改html内容<br><code>cd /var/lib/docker/volumes/html/_data</code><br><code>ls</code>发现里面存在了50x.html和index.html证明我们已经将容器的/usr/share/nginx/html目录挂载到了html数据卷的真实目录下</p><p>现在我们可以直接在<code>/var/lib/docker/volumes/html/_data</code>这个目录下对文件进行修改</p><blockquote><p>注：如果用finashell在目录栏输入这个地址一直在加载的话，在finashell连接编辑中，把用户名改为<strong>root</strong></p></blockquote><p>右键index.html文件，用系统相关打开(如用vscode),用vscode直接编辑即可，保存刷新网页即可看到效果</p>              </div>            </details></p><p>我们也可以直接将宿主机的目录挂载到容器内的目录：<code>-v [宿主机目录]:[容器内目录]</code><br>也可以将宿主机文件挂载到容器内文件：<code>-v [宿主机文件]:[容器内文件]</code></p><h2 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h2><ol><li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</li></ol><h3 id="docker-network网段"><a href="#docker-network网段" class="headerlink" title="docker-network网段"></a>docker-network网段</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network create hm-net # 创建一个叫hm-net的网络</span><br><span class="line">docker network inspect hm-net # 查看网络信息</span><br><span class="line">docker network rm hm-net # 删除网络</span><br><span class="line">docker network connect hm-net [容器名] # 将容器连接到网络</span><br><span class="line">docker network disconnect hm-net [容器名] # 将容器从网络断开</span><br></pre></td></tr></table></figure><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a><br>DockerCompose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器。<br>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。</p><p>作用：帮助我们快速部署分布式应用，无需一个个微服务去构建镜像和部署。<br>下面为示例文件<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span> <span class="comment"># 指定镜像名</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span> <span class="comment"># 指定容器名</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span> <span class="comment"># 映射端口</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 设置环境变量</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span> </span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 挂载数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/cnf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 指定网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span> </span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span> <span class="comment"># 指定构建上下文,当前目录构建镜像</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment"># 指定构建文件</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 指定网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment"># 依赖,可不写，写了会先创建依赖的容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">images:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depend_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span> <span class="comment"># 创建网络</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><br>运行dockercompose命令：<code>docker compose up -d</code>创建并后台运行所有service容器</p><h1 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h1><h2 id="搭建私有镜像厂库"><a href="#搭建私有镜像厂库" class="headerlink" title="搭建私有镜像厂库"></a>搭建私有镜像厂库</h2><h3 id="配置Docker信任地址"><a href="#配置Docker信任地址" class="headerlink" title="配置Docker信任地址"></a>配置Docker信任地址</h3><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：<br>ip地址记得换成自己虚拟机的ip。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.255.128:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></p><h3 id="带有图形化界面版本"><a href="#带有图形化界面版本" class="headerlink" title="带有图形化界面版本"></a>带有图形化界面版本</h3><p>1.创建一个docker镜像仓库存放的文件夹如：<code>mkdir registry-ui</code>(在哪个目录创建都差不多，这里是/tmp/)<br>2.进入该文件夹：<code>cd registry-ui/</code><br>3.创建一个docker-compose文件：<code>touch docker-compose.yml</code><br>4.将下面命令粘贴到文件内：<br>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=阿杰学习私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure><br>5.执行<code>docker-compose up -d</code>。之后查看日志<code>docker-compose logs -f</code>可以看到已经启动了,访问<code>http://192.168.255.128:8080/</code>即可看到我们部署的私有仓库</p><h3 id="向私有仓库推送或拉取镜像"><a href="#向私有仓库推送或拉取镜像" class="headerlink" title="向私有仓库推送或拉取镜像"></a>向私有仓库推送或拉取镜像</h3><p>推送镜像到私有镜像服务前必须先tag，步骤如下：</p><ol><li><p>本地有一个<strong>nginx:latest</strong>镜像,重新tag镜像,名称前缀为私有仓库的地址:<code>192.168.255.128:8080/</code><br><code>docker tag nginx:latest 192.168.255.128:8080/nginx:1.0</code></p></li><li><p>推送镜像<br><code>docker push 192.168.255.128:8080/nginx:1.0</code><br>刷新仓库界面，可以看到镜像上传到成功私有仓库</p></li><li><p>拉取镜像<br><code>docker pull 192.168.255.128:8080/nginx:1.0</code></p></li></ol><h1 id="服务异步通讯-RabbitMQ"><a href="#服务异步通讯-RabbitMQ" class="headerlink" title="服务异步通讯-RabbitMQ"></a>服务异步通讯-RabbitMQ</h1><p>MQ，中文是消息队列，字面来看就是存放消息的队列。也就是事件驱动架构中的Broker<br>RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a><br>我们在Centos7虚拟机中使用Docker来安装。</p><ol><li><p>安装<br>执行下面的命令来基于Docker来安装RabbitMQ(3.8版本)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=xnj \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=123321 \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> --network hm-net\</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><ul><li>其中<code>--network hm-net</code>是指定网络，需提前创建该网络，或直接不写，不写默认是bridge模式</li><li>其中<code>15672</code>是控制台端口，<code>5672</code>是收发消息端口,</li></ul></li><li><p>访问mq控制台<br>访问：<a href="http://192.168.40.101:15672">http://192.168.40.101:15672</a><br>首次访问需要登录，默认的用户名和密码在配置文件中已经指定了。<br>控制台中包含几个概念：</p><ul><li>publisher：生产者，也就是发送消息的一方</li><li>consumer：消费者，也就是消费消息的一方</li><li>queue：队列，存储消息。生产者投递的消息会暂存在消息队列中，等待消费者处理</li><li>exchange：交换机，负责消息路由。生产者发送的消息由交换机决定投递到哪个队列。</li><li>virtual host：虚拟主机，起到数据隔离的作用。每个虚拟主机相互独立，有各自的exchange、queue</li></ul></li></ol><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><ol><li><p>交换机<br>打开Exchanges选项卡，可以看到已经存在很多交换机<br>点击任意交换机，即可进入交换机详情页面。利用控制台中的publish message 发送一条消息</p><ul><li>点开<code>publish message</code>,在<code>Payload</code>处填写消息体,点击<code>publish message</code></li><li>如：<code>hello everyone</code></li><li>这里是由控制台模拟了生产者发送的消息。由于没有消费者存在，最终消息丢失了，这样说明交换机没有存储消息的能力。<br><strong>交换机没有存储信息的能力, 只负责将信息转发到对应的队列中</strong></li></ul></li><li><p>队列<br>打开Queues选项卡，新建一个队列：</p><ul><li>点开<code>Add a new queue</code></li><li>在<code>Name</code>处填写队列名称如：<code>hello.queue1</code>，点击<code>Add queue</code>添加队列</li><li>重复上面操作，再新建一个队列：<code>hello.queue2</code><br>现在如果再次发送消息依然会丢失,因为还需要将队列与交换机绑定。 </li></ul></li><li><p>绑定</p><ul><li>点击<code>Exchanges</code>选项卡，点击<code>amq.fanout</code>交换机，进入交换机详情页</li><li>然后点击<code>Bindings</code>菜单，在表单中填写要绑定的队列名称,在点击<code>Bind</code>进行绑定</li><li>依次重复步骤绑定步骤2创建的hello.queue1，hello.queue2队列</li></ul></li><li><p>发送消息</p><ul><li>再次回到<code>exchange</code>页面，找到刚刚绑定的amq.fanout，点击进入详情页，再次发送一条消息</li><li>回到<code>Queues</code>页面，可以发现hello.queue中已经有一条消息了  </li><li>点击队列名称，进入详情页，查看队列详情，这次我们点击<code>get message</code></li><li>可以看到消息到达队列了。</li></ul></li></ol><h2 id="数据隔离"><a href="#数据隔离" class="headerlink" title="数据隔离"></a>数据隔离</h2><ol><li><p>用户管理<br>点击<code>Admin</code>选项卡，首先会看到RabbitMQ控制台的用户管理界面：<br>这里的用户都是RabbitMQ的管理或运维人员。目前只有安装RabbitMQ时添加的itheima这个用户。仔细观察用户表格中的字段，如下：</p><ul><li><code>Name</code>：<code>xnj</code>，也就是用户名</li><li><code>Tags</code>：<code>administrator</code>，说明itheima用户是超级管理员，拥有所有权限</li><li><code>Can access virtual host</code>： <code>/</code>，可以访问的<code>virtual host</code>，这里的/是默认的virtual host<br>搭建一套MQ集群，公司内的多个不同项目同时使用。这个时候为了避免互相干扰， 我们会利用virtual host的隔离特性，将不同项目隔离。一般会做两件事情：</li><li>给每个项目创建独立的运维账号，将管理权限分离。</li><li>给每个项目创建不同的virtual host，将每个项目的数据隔离。<br>现在我们创建一个新用户如hmall，会发现此时hmall用户没有任何virtual host的访问权限:<code>No access</code></li></ul></li><li><p>虚拟主机<br>退出登录,切换为hmall用户登录,点击<code>Admin</code>选项卡,然后点击<code>Virtual Hosts</code>菜单，进入virtual host管理页<br>看到目前只有一个默认的virtual host，名字为 /。<br>给项目创建一个单独的virtual host，而不是使用默认的/。如<code>/hmall</code><br>由于是登录hmall账户后创建的virtual host，因此回到users菜单，发现当前用户已经具备了对/hmall这个virtual host的访问权限了<br>此时，点击页面右上角的virtual host下拉菜单，切换virtual host为 /hmall<br>然后再次查看queues选项卡，会发现之前在xnj用户创建的helllo.queue1的队列已经看不到了<br>这就是基于virtual host 的隔离效果。</p></li></ol><h2 id="JAVA客户端-SpringAMQP"><a href="#JAVA客户端-SpringAMQP" class="headerlink" title="JAVA客户端-SpringAMQP"></a>JAVA客户端-SpringAMQP</h2><blockquote><p>spring-amqp官方文档：<a href="https://spring.io/projects/spring-amqp/">https://spring.io/projects/spring-amqp/</a></p></blockquote><h3 id="快速入门-BasicQuenue"><a href="#快速入门-BasicQuenue" class="headerlink" title="快速入门(BasicQuenue)"></a>快速入门(BasicQuenue)</h3><p>创建一个mq-demo父工程,管理consumer和publisher两个子模块，后面以该项目来演示</p><ul><li>利用控制台创建队列simple.queue</li><li>在publisher服务中，利用springAMQP直接向simple.queue发送消息</li><li>在consumer服务中，利用springAMQP编辑消费者，监听simple.queue队列</li></ul><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    publisher --&gt; simple.queue --&gt; consumer  </pre></div><ol><li><p>项目引入</p><ul><li>父工程<code>mq-demo</code> pom.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>publisher<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- springboot版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Lombok依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>子工程<code>publisher</code>和<code>consumer</code>仅<code>artifactId</code>不同，如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- &lt;artifactId&gt;consumer&lt;/artifactId&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>publisher<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动类</p><ul><li>Consumer模块<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Publisher模块<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PublisherApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>引入依赖并配置rabbitmq服务端信息<br>在两个modules中引入<code>spring-boot-starter-amqp</code>依赖,上面父工程已经引入，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在publisher和consumer中创建application.yml配置文件，如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.40</span><span class="number">.101</span> <span class="comment"># 你的虚拟机IP</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/hmall</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hmall</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>其中虚拟主机和用户已经前面用户隔离中创建完成</p></li><li><p>发送消息<br>在publisher模块中，创建测试类，如下<br>spring已经提供了一个模板类<code>RabbitTemplate</code>，可以直接发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_publisher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.队列名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">//2.消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello rabbitmq&quot;</span>;</span><br><span class="line">        <span class="comment">//3.发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，打开控制台，可以看到消息已经发送到队列中</p></li><li><p>接收消息<br>在consumer模块中，创建<mark><strong>监听类</strong></mark>，如下<br>利用<code>@RabbitListener</code>来声明要监听的队列信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span></span><br><span class="line">    <span class="comment">// 可以看到方法体中接收的就是消息体的内容</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息。最终consumer收到消息,queue中消息被消费掉</p></li></ol><details class="folding-tag" green><summary> rabbitmq官方写法比较繁琐，展开查看 </summary>              <div class='content'>              <p>consumer中创建测试类ConsumerTest<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.40.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;hmall&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>publisher中创建测试类PublisherTest<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.40.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;hmall&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>基本消息队列的消息发送流程<br>建立connection，建立channel，利用channel声明队列，使用channel向队列发送消息<br>debug运行PublisherTest，可以在rabbitMq看到，依次建立了连接，然后建立通道，有了通道后就可以向队列中发送消息，之后创建了一个<code>simple.queue</code>的队列，点开该队列，再点GetMessage(s)，可以看到发送的消息内容：<code>hello, rabbitmq!</code>，并且可以注意到，发送了消息之后，发送者就已经关闭了通道和连接。</p>              </div>            </details><blockquote><p>入门案例属于<code>BasicQueue</code>基本消息队列，消息一旦消费就会从队列中删除，RabbitMQ没有消息回溯功能</p></blockquote><h2 id="任务模型-WorkQueues"><a href="#任务模型-WorkQueues" class="headerlink" title="任务模型(WorkQueues)"></a>任务模型(WorkQueues)</h2><p>WorkQueues,任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    publisher --&gt; queue --&gt; consumer1    queue --&gt; consumer2  </pre></div><p>工作队列可以提高消息处理速度，避免队列消息堆积</p><ol><li><p>演示如下<br>在控制台中创建一个work.queue队列</p><ul><li>publisher的测试类中定义方法，发送50条消息到work.queue<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_workqueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.队列名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;work.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.发送消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//2.消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello rabbitmq_&quot;</span>+i;</span><br><span class="line">            rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在consumer的监听类中，定义两个消费者，分别监听work.queue队列,并打印消息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span></span><br><span class="line">    <span class="comment">// 可以看到方法体中接收的就是消息体的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueMessage1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>+ LocalTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueMessage2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;消费者2接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>+ LocalTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试结果<br>重启consumer服务，启动publisher的测试方法，在consumer服务控制台可以看到，消费者1和消费者2一共消费了50条消息，并且消息是轮询的。<br>一个消费者打印的全是奇数索引消息，一个消费者打印的全是偶数索引消息，消费速度提高了。<br>即workqueue把消息分给了下面的两个消费者 但是 两个消费者不会拿到同一个消息 也就是消息不是给a就是给b 不是既给了a又给了b<br><strong>即使现在给这两个方法加上不同的休眠时间如<code>Thread.sleep(25)</code>,消息依然是平均分配，只是休眠时间短结束的快</strong></p><ul><li>用一句话形容就是：速度快的早早休息了，速度慢的忙不过来。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_0】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.010530200</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_2】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_4】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_6】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_8】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_10】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_12】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011537400</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_14】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011537400</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_16】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011537400</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_18】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012041700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_20】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012041700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_22】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012041700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_24】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_26】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_28】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_30】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013054300</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_32】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013054300</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_34】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_36】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_38】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_40】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014064100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_42】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014064100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_44】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014618100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_46】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014618100</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_48】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014618100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_1】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.010530200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_3】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_5】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_7】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_9】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011033600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_11】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011537400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_13】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011537400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_15】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.011537400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_17】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012041700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_19】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012041700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_21】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012041700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_23】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_25】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_27】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_29】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.012545700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_31】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013054300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_33】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013054300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_35】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_37】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_39】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_41】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.013559100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_43】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014064100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_45】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014064100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_47】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014064100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_49】<span class="number">17</span>:<span class="number">30</span>:<span class="number">09.014064100</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>能者多劳<br>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><p>让两消费者每次处理一条消息就休眠，消费者1休眠25毫秒<code>Thread.sleep(25)</code>，消费者2休眠50毫秒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_0】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.115775600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_1】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.115775600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_2】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.143309</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_3】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.167719300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_4】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.169238600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_5】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.195012300</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_6】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.219174800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_7】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.222468900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_8】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.249097</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_9】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.271034400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_10】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.275575100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_11】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.301446900</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_12】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.323094</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_13】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.328148800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_14】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.354941600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_15】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.375228700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_16】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.381401600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_17】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.408785</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_18】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.427534900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_19】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.435342800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_20】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.461886800</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_21】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.479071900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_22】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.488710900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_23】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.515153700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_24】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.530444</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_25】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.541684300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_26】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.567682900</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_27】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.581791500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_28】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.593976200</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_29】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.621164700</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_30】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.633468300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_31】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.647640900</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_32】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.674414200</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_33】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.685406700</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_34】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.701433300</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_35】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.727603300</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_36】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.737242800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_37】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.755201800</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_38】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.781181</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_39】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.789295400</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_40】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.807738</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_41】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.834852600</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_42】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.840952600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_43】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.860792100</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_44】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.887461500</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_45】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.892848500</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_46】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.913989</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_47】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.940846300</span></span><br><span class="line">消费者<span class="number">2</span>接收到消息：【hello rabbitmq_48】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.944382600</span></span><br><span class="line">消费者<span class="number">1</span>接收到消息：【hello rabbitmq_49】<span class="number">17</span>:<span class="number">27</span>:<span class="number">02.967891</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="发布订阅-Publish、Subscribe"><a href="#发布订阅-Publish、Subscribe" class="headerlink" title="发布订阅(Publish、Subscribe)"></a>发布订阅(Publish、Subscribe)</h2><p>发布和订阅模式与前面的区别是允许将同一消息发送给多个消费者，实现方式是加了exchange(交换机)<br>交换机能<strong>接收</strong>发送者发送的消息，将消息<strong>按规则路由</strong>到与之绑定的队列。<br>根据交换机的类型可以分为三种:</p><ul><li>Fanout Exchange: 广播</li><li>Direct Exchange: 定向</li><li>Topic Exchange: 话题</li></ul><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    publisher --&gt; exchange --&gt; queue1    exchange --&gt; queue2 --&gt; consumer3    queue1 --&gt; consumer1    queue1 --&gt; consumer2  </pre></div><h3 id="Fanout-Exchange-广播模式"><a href="#Fanout-Exchange-广播模式" class="headerlink" title="Fanout Exchange(广播模式)"></a>Fanout Exchange(广播模式)</h3><p>Fanout Exchange会将接收到的消息路由到每一个跟其绑定的queue,所以也叫广播模式</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    publisher --&gt; Fanout-exchange --&gt; queue1 --&gt; consumer1    Fanout-exchange --&gt; queue2 --&gt; consumer2  </pre></div><ol><li><p>创建演示环境<br>在控制台创建队列<code>fanout.queue1</code>和<code>fanout.queue2</code><br>创建一个交换机<code>hmall.fanout</code>,类型为<code>fanout</code>，并绑定上面2个队列</p></li><li><p>创建演示环境<br>在publisher的测试类中发送消息，指定交换机的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherApplicationTest</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutQueue</span><span class="params">()</span>  &#123;</span><br><span class="line">       <span class="comment">// 交换机名称</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.fanout&quot;</span>;</span><br><span class="line">       <span class="comment">//消息</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everybody!&quot;</span>;</span><br><span class="line">       <span class="comment">//发送消息,第一个参数是交换机名称，第二个参数是路由键，第三个参数是消息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;&quot;</span>, message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在consumer服务的监听类中添加两个消费者分别监听2个队列，fanout.queue1和fanout.queue2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="comment">// 监听队列1</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnFanoutQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者1接收到广播消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听队列2</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnFanoutQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者2接收到广播消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果<br>启动consumer服务，运行publisher的测试方法，能看到一次发送，所有消费者都能接收到</p></li></ol><h3 id="Direct-Exchange-定向模式"><a href="#Direct-Exchange-定向模式" class="headerlink" title="Direct Exchange(定向模式)"></a>Direct Exchange(定向模式)</h3><p>Direct Exchange会将消息根据规则路由到指定的Queue，因此称为<strong>定向路由</strong></p><ul><li>每一个Queue都与Exchange设置一个<code>BindingKey</code></li><li>发布者发送消息时，指定消息的<code>RoutingKey</code></li><li><code>Exchange</code>将消息路由到BindingKey与消息RoutingKey一致的队列</li></ul><p>如下图：当<em>routingKey=blue</em>时，消息被路由到<em>queue1</em>，当<em>routingKey=yellow</em>时，消息被路由到<em>queue2</em><br><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR      Publisher:routingKey --&gt; DirectExchange --&gt; Queue1:bindingKey:blue --&gt; Consumer1    DirectExchange --&gt; Queue2:bindingKey:yellow --&gt; Consumer2  </pre></div></p><ol><li><p>创建演示环境</p><ul><li>在控制台创建队列<code>direct.queue1</code>和<code>direct.queue2</code></li><li>创建一个交换机<code>hmall.direct</code>,类型为<code>direct</code>，并绑定上面2个队列</li><li>绑定队列时，指定<code>Routingkey</code>,每次绑定一个Routingkey，可以绑定多次设置多个Routingkey<ul><li>direct.queue1:Routingkey: red ,blue</li><li>direct.queue2:Routingkey: red ,yellow </li></ul></li></ul></li><li><p>在consummer服务的监听类中添加两个消费者分别监听2个队列，direct.queue1和direct.queue2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者1接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者2接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在publisher服务的测试类中发送消息并指定发送的routerKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.交换机名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.direct&quot;</span>;</span><br><span class="line">        <span class="comment">//2.消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,everyone&quot;</span>;</span><br><span class="line">        <span class="comment">//3.路由键routingkey</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey1</span> <span class="operator">=</span> <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey2</span> <span class="operator">=</span> <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey3</span> <span class="operator">=</span> <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">        <span class="comment">//3.发送消息,指定中间的参数routingKey，</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey1,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当指定routingKey为red时，启动测试，发现两个队列都接收到了消息</li><li>当指定routingKey为blue时，启动测试，只有direct.queue1接收到了消息</li><li>当指定routingKey为yellow时，启动测试，只有direct.queue2接收到了消息</li></ul></li></ol><p>consumer控制台输出  <strong>消费者接收到direct.queue1的消息：【hello, blue!】</strong><br>将路由键改为yellow  <strong>消费者接收到direct.queue2的消息：【hello, yellow!】</strong><br>将路由键改为red :<br><strong>消费者接收到direct.queue2的消息：【hello, red!】</strong><br><strong>消费者接收到direct.queue1的消息：【hello, red!】</strong></p><h3 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h3><p>TopicExchange也是基于RoutingKey做消息路由,和DirectExchange类似，区别在于<strong>routingKey必须是多个单词列表，并且以<code>.</code>分隔</strong><br>如：china.news 代表中国的新闻消息、china.weather 代表中国天气消息、japan.news日本新闻、japan.weather日本天气<br><code>Queue</code>与<code>Exchange</code>指定<code>BindingKey</code>时可以使用通配符：</p><ul><li><code>#</code>:代指0个或多个单词，如：<code>china.#</code>,<code>#.news</code></li><li><code>*</code>:代指一个单词,如：<code>china.*</code>,<code>*.news</code></li></ul><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR      Publisher:routingKey --&gt; TopicExchange --&gt; Queue1:bindingKey:china.# --&gt; Consumer1    TopicExchange --&gt; Queue2:bindingKey:jpan.# --&gt; Consumer2    TopicExchange --&gt; Queue3:bindingKey:#.weather --&gt; Consumer3    TopicExchange --&gt; Queue4:bindingKey:#.news --&gt; Consumer4  </pre></div><ol><li><p>创建演示环境</p><ul><li>在控制台创建队列<code>topic.queue1</code>和<code>topic.queue2</code></li><li>在控制台中，声明交换机<code>hmall.topic</code>，将两个队列与其绑定<ul><li>topic.queue1的bindingKey为<code>china.#</code></li><li>topic.queue2的bindingKey为<code>#.news</code></li></ul></li></ul></li><li><p>在consummer服务的监听类中添加两个消费者分别监听这两个个队列，topic.queue1,topic.queue2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者1接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者2接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在publisher服务的测试类中发送消息并指定发送的routerKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PublisherApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.交换机名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.topic&quot;</span>;</span><br><span class="line">        <span class="comment">//2.消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;今天，中国的农产值又创新高。。&quot;</span>;</span><br><span class="line">        <span class="comment">//3.路由键routingkey</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey1</span> <span class="operator">=</span> <span class="string">&quot;china.news&quot;</span>;</span><br><span class="line">        <span class="comment">//3.发送消息,指定中间的参数routingKey</span></span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName,routingKey1,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当指定routingKey为china.news时，启动测试，发现两个队列都接收到了消息</li><li>当指定routingKey为china.weather时，启动测试，只有topic.queue1接收到了消息</li></ul></li></ol><h2 id="声明队列交换机"><a href="#声明队列交换机" class="headerlink" title="声明队列交换机"></a>声明队列交换机</h2><ol><li><p>说明<br>在上面，我们创建交换机和队列，以及绑定交换机，设置bindingKey都是在控制台，下面介绍使用代码的方式</p><ul><li><strong>队列</strong>：SpringAMQP提供了一个<code>Queue类</code>，用来创建队列<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明队列1</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>交换机</strong>：SpringAMQP还提供了一个<code>Exchange接口</code>，来表示所有不同类型的交换机<div class="mermaid-wrap"><pre class="mermaid-src" hidden>   classDiagramclass &#96;TopicExchange&#96;class &#96;CustomExchange&#96;class &#96;FanoutExchange&#96;class &#96;DirectExchange&#96;class &#96;HeaderExchange&#96;class &#96;AbstractExchange&#96;class &#96;Exchange&#96;&#96;TopicExchange&#96; --&gt; &#96;AbstractExchange&#96;&#96;CustomExchange&#96; --&gt; &#96;AbstractExchange&#96;&#96;FanoutExchange&#96; --&gt; &#96;AbstractExchange&#96;&#96;DirectExchange&#96; --&gt; &#96;AbstractExchange&#96;&#96;HeaderExchange&#96; --&gt; &#96;AbstractExchange&#96;&#96;AbstractExchange&#96; .. &#96;Exchange&#96;  </pre></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明广播交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;hmall.fanout&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>绑定</strong>：使用工厂类<code>BindingBuilder</code>来创建Binding对象：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定广播交换机和声明队列</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>可以自己创建队列和交换机，不过SpringAMQP还提供了<strong>ExchangeBuilder</strong>来简化这个过程<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明FanoutExchange交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder</span><br><span class="line">                .fanoutExchange(<span class="string">&quot;fanout_exchange&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(<span class="string">&quot;fanout.queue1&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绑定队列和交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>演示<br>在consumer服务中的config包中添加一个配置类，用来声明交换机，队列，绑定队列和交换机<br>注意：如果是有进行前面的演示操作，记得先在控制台把hmall.fanout,fanout.queue1和fanout.queue2删除，否则会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明广播交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;hmall.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明队列1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定广播交换机和声明队列1</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutQueue1Binding</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明队列2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定广播交换机和声明队列2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutQueue2Binding</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">        <span class="comment">//如果是其他类型交换机，后面还可以跟参数.with(&quot;routingKey&quot;),来声明绑定的routingKey</span></span><br><span class="line">        <span class="comment">//但这种一个方法只能声明一个routingKey,声明多个routingKey就得定义多个方法，会变得很麻烦</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听器类如下，用于监听两个队列，fanout.queue1,fanout.queue2,用于测试时接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="comment">// 广播模式</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnFanoutExchange1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者1接收到广播消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnFanoutExchange2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者2接收到广播消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试<br>重启consumer服务，在publisher服务中运行测试方法向<code>hmall.fanout</code>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutQueue</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//1.交换机名</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;hmall.fanout&quot;</span>;</span><br><span class="line">     <span class="comment">//2.消息</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,mq&quot;</span>;</span><br><span class="line">     <span class="comment">//3.发送消息,中间的参数是路由键，fanout类型交换机不需要设置路由键</span></span><br><span class="line">     rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>观察consumer服务控制台输出的日志，发现两个队列都接收到了消息<br>前往mq控制台，发现创建了hmall.fanout交换机，并且创建了fanout.queue1和fanout.queue2两个队列，并且绑定了交换机</p></li></ol><h2 id="基于注解的声明队列交换机的方式"><a href="#基于注解的声明队列交换机的方式" class="headerlink" title="基于注解的声明队列交换机的方式"></a>基于注解的声明队列交换机的方式</h2><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><ol><li><p>声明Direct模式的交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路由模式</span></span><br><span class="line">    <span class="comment">//声明direct队列监听,并绑定交换机和指定路由键</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(&quot;direct.queue1&quot;,durable = &quot;true&quot;),//声明队列,第二个参数是持久化参数</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;hmall.direct&quot;, type = &quot;direct&quot;),//声明交换机,类型参数默认是direct，可省略</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;red&quot;,&quot;blue&quot;&#125; //路由键</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者1接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(&quot;direct.queue2&quot;),//声明队列,第二个参数是持久化参数</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;hmall.direct&quot;, type = &quot;direct&quot;),//声明交换机,type类型</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;red&quot;,&quot;yellow&quot;&#125; //路由键</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者2接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明Topic模式的交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">     <span class="comment">// 利用RabbitListener来声明要监听的队列信息</span></span><br><span class="line">     <span class="comment">// 通配符模式</span></span><br><span class="line">     <span class="comment">// 主题模式</span></span><br><span class="line">     <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">             value = @Queue(&quot;topic.queue1&quot;), //声明队列</span></span><br><span class="line"><span class="meta">             exchange = @Exchange(value = &quot;hmall.topic&quot;, type = &quot;topic&quot;),//声明交换机,type类型</span></span><br><span class="line"><span class="meta">             key = &quot;china.#&quot; //路由键</span></span><br><span class="line"><span class="meta">     ))</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">         log.info(<span class="string">&quot;消费者1接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">             value = @Queue(&quot;topic.queue2&quot;), //声明队列</span></span><br><span class="line"><span class="meta">             exchange = @Exchange(value = &quot;hmall.topic&quot;, type = &quot;topic&quot;),//声明交换机,type类型</span></span><br><span class="line"><span class="meta">             key = &quot;#.news&quot; //路由键</span></span><br><span class="line"><span class="meta">     ))</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listnTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">         log.info(<span class="string">&quot;消费者2接收到消息：【&#123;&#125;】&quot;</span>, msg);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringAMQP—消息转换器"><a href="#SpringAMQP—消息转换器" class="headerlink" title="SpringAMQP—消息转换器"></a>SpringAMQP—消息转换器</h2><p>前面我们发送的方法中，消息的类型是Object，也就是说我们可以发送任意对象类型的消息，SpringAMQP会帮我们序列化为字节后发送。</p><ol><li><p>测试默认消息转换器<br>在控制台创建一个队列<code>object.queue</code><br>在publisher中发送消息以测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSerialQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1.队列名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;object.queue&quot;</span>;</span><br><span class="line">    <span class="comment">//2.消息</span></span><br><span class="line">    <span class="comment">//准备消息</span></span><br><span class="line">    Map&lt;String, Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">//3.发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(queueName,msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mq控制台可以看到消息是乱码的，这是因为我们没有定义消息转换器，默认使用的是SimpleMessageConverter，基于IDK的ObjectOutputStream完成序列化。<br>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p></li><li><p>引入json依赖<br>在publisher和consumer两个服务中都引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于将Java对象与JSON数据进行相互转换--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--提供了ObjectMapper类，用于序列化和反序列化JSON数据。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置消息转换器<br>在publisher和consumer两个服务创建配置类并添加如下的bean<br>或者直接中启动类中添加Bean即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">messageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><strong>注意：publisher是用Map发送，那么消费者也一定要用Map接收</strong><br>启动consumer服务并在publisher中发送消息以测试<br>consumer控制台输出：<code>消费者接收到object.queue的消息：【&#123;name=张三, age=20&#125;】</code></p></li></ol>]]></content>
    
    
    <summary type="html">微服务相关技术栈学习记录</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="springCloud" scheme="https://xusir.fun/tags/springCloud/"/>
    
  </entry>
  
  <entry>
    <title>Knife4j</title>
    <link href="https://xusir.fun/posts/2409071039.html"/>
    <id>https://xusir.fun/posts/2409071039.html</id>
    <published>2024-09-07T10:39:29.000Z</published>
    <updated>2025-03-18T08:04:27.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p>详细学习可见官网<br><a href="https://doc.xiaominfo.com/docs">https://doc.xiaominfo.com/docs</a><br><a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a><br>使用<code>Knife4j</code>只需按照它的规范去定义接口以及接口相关信息，就可以做到生成接口文档，以及在线接口调试页面</p></blockquote><details class="folding-tag" red><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://picbed.xusir.fun/post_img/java/swagger01.png" alt="img1"><br><img src="https://picbed.xusir.fun/post_img/java/swagger02.png" alt="img2"></p>              </div>            </details><p>knife4j需要注意版本</p><ol><li>对于SpringBoot2<ul><li>需要引入maven依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     ```  </span><br><span class="line">   - jdk版本：8,11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 对于SpringBoot3版本</span><br><span class="line">   - 需要引入maven依赖</span><br><span class="line">     ```xml</span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>jdk版本：17+</li></ul></li></ol><h1 id="SpringBoot2使用Knife4j"><a href="#SpringBoot2使用Knife4j" class="headerlink" title="SpringBoot2使用Knife4j"></a>SpringBoot2使用Knife4j</h1><ol><li><p><strong>导入maven坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入Knife4j的官方start包,该指南选择Spring Boot版本&lt;3.0,开发者需要注意--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写配置类</strong></p><ul><li><code>apiInfo</code>：配置主页的一些信息<ul><li><code>title</code>：标题</li><li><code>description</code>：简介</li><li><code>termsOfServiceUrl</code>：服务条款网址</li><li><code>contact</code>：作者,服务器url，邮箱</li><li><code>version</code>：version</li></ul></li><li><code>groupName</code>：组名</li><li><code>apis</code>：这里指定Controller扫描包路径</li><li><code>paths</code>：扫描路径<ul><li><code>PathSelectors.any()</code>：所有路径都要被扫描</li><li><code>PathSelectors.regex(&quot;/use.*&quot;)</code>：正则表达式匹配，(以use开头的都匹配)</li><li><code>PathSelectors.ant(&quot;/user/*&quot;)</code>：模式匹配，（user/下的都匹配）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定使用Swagger2规范</span></span><br><span class="line">        Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//描述字段支持Markdown语法</span></span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        <span class="comment">//标题</span></span><br><span class="line">                        .title(<span class="string">&quot;Knife4j接口文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//简介</span></span><br><span class="line">                        .description(<span class="string">&quot;Knife4j测试项目api&quot;</span>)</span><br><span class="line">                        <span class="comment">//服务条款网址</span></span><br><span class="line">                        .termsOfServiceUrl(<span class="string">&quot;https://doc.xiaominfo.com/&quot;</span>)</span><br><span class="line">                        <span class="comment">//作者,服务器url，邮箱</span></span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;xnj&quot;</span>,<span class="string">&quot;http://localhost:8080&quot;</span>,<span class="string">&quot;xnj@gmail.com&quot;</span>))</span><br><span class="line">                        <span class="comment">//版本</span></span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .build())</span><br><span class="line">                <span class="comment">//组名</span></span><br><span class="line">                .groupName(<span class="string">&quot;用户服务&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.xnj.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())<span class="comment">//所有路径都要被扫描</span></span><br><span class="line">                <span class="comment">/*.paths(PathSelectors.regex(&quot;/use.*&quot;))*/</span><span class="comment">//正则表达式匹配</span></span><br><span class="line">                <span class="comment">/*.paths(PathSelectors.ant(&quot;/system/*&quot;))*/</span><span class="comment">//模式匹配</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong><mark>也可以选择不写配置类，直接在yml配置文件中配置</mark></strong><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Xxx管理接口文档</span>  <span class="comment"># 标题</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;接口管理文档&quot;</span> <span class="comment">#描述</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">xiaoymin@foxmail.com</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">xnj</span>  <span class="comment"># 作者</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://xxx.xusir.fun</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span> <span class="comment">#分组名称</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><ol><li><p><strong>应用以及常用的相关注解</strong></p><ul><li><p>实体类中</p><ul><li><code>@ApiModel(value = &quot;xxx&quot;)</code>：用在实体类上</li><li><code>@ApiModelProperty(value = &quot;xxx&quot;)</code>：用在实体类属性上，描述属性信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value = &quot;用户实体&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于controller</p><ul><li><code>@Api(tags=&quot;xx&quot;)</code>：用于controller类上对类的说明<br>在接口管理的界面中，左边菜单栏就会显示我们的注解内容，而不是该controller的类名 </li><li><code>@ApiOperation(&quot;xxx&quot;)</code>：用在controller下的方法上<br>在接口文档中左边点开该controller目录，下边显示的会是我们在注解中的内容，而不是方法名 </li><li><code>@ApiImplicitParam(name = &quot;xx&quot;,value = &quot;xx&quot;,required = true)</code>：描述参数<br>在接口管理界面中，文档中对该接口的请求参数说明就会显示我们的注解内容 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;用户相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过id获取用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;系统接口&quot;)</span><span class="comment">// 描述类</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/system&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemController</span> &#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;sayHello接口&quot;)</span><span class="comment">// 描述接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;,value = &quot;用户名&quot;,required = true)</span><span class="comment">// 描述参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好,&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问<br>启动项目，访问<code>localhost:8080/doc.html</code>即可看到</p></li></ol><h1 id="SpringBoot3使用Knife4j"><a href="#SpringBoot3使用Knife4j" class="headerlink" title="SpringBoot3使用Knife4j"></a>SpringBoot3使用Knife4j</h1><blockquote><p>Spring Boot 3 只支持OpenAPI3规范<br>Knife4j提供的starter已经引用springdoc-openapi的jar，开发者需注意避免jar包冲突<br>JDK版本必须 &gt;= 17</p></blockquote><ol><li><p><strong>说明</strong></p><ul><li>knife4j有多个版本，最新版的Knife4j基于开源项目<code>springdoc-openapi</code>，这个开源项目的核心功能就是根据SpringBoot项目中的代码自动生成符合OpenAPI规范的接口信息。</li><li>OpenAPI规范定义接口文档的内容和格式，其前身是<code>Swagger</code>规范。</li></ul></li><li><p><strong>引入maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写配置类</strong></p><ul><li>对于<code>OpenAPI</code>方法中的内容就是接口文档的主页中的内容<ul><li><code>title</code>：标题</li><li><code>description</code>：简介</li><li><code>version</code>：版本号</li></ul></li><li>对于<code>GroupedOpenApi</code>方法就是分组，点击接口文档左上角来切换分组<ul><li><code>group</code>：组名，见左上角</li><li><code>pathsToMatch</code>：路径管理，及该分组下包含的路径<br>其形参是字符串数组，可以写多个参数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.pathsToMatch(</span><br><span class="line">                <span class="string">&quot;/user/login/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/user/info&quot;</span>,</span><br><span class="line">                <span class="string">&quot;user/shop/**&quot;</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">openAPI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;knife4jTest项目API&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;knife4jTest项目的接口文档&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">systemApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;系统信息管理&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/system/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">userApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;用户信息管理&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>注意：该配置类并不是必须的，这个库会自动配置 Knife4j，并生成接口文档，写配置类只是为了增强可观性和分组管理</mark></p></li><li><p><strong>应用以及常用的相关注解</strong></p><ul><li>实体类中<ul><li><code>@Schema(description = &quot;xxx&quot;)</code>：可以用于描述类和属性<br>如下的类作为响应参数时，在接口文档中就会在参数说明中显示我们的各描述信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;密码&quot; ,defaultValue = &quot;123456&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Tag(name=&quot;用户管理&quot;)</span><span class="comment">//菜单目录名</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;根据ID获取用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">get</span><span class="params">(<span class="meta">@Parameter(description = &quot;用户id&quot;)</span> <span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>对于controler<ul><li><code>@Tag(name=&quot;xx管理&quot;)</code>：用在controller类上<br>在接口管理的界面中，左边菜单栏就会显示我们的注解内容，而不是该controller的类名</li><li><code>@Operation(summary = &quot;xxx接口&quot;)</code>：用在controller下的方法上<br>在接口文档中左边点开该controller目录，下边显示的会是我们在注解中的内容，而不是方法名</li><li><code>@Parameter(description = &quot;xxx&quot;)</code>：用在形参中描述形参<br>在接口管理界面中，文档中对该接口的请求参数说明就会显示我们的注解内容 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单目录名</span></span><br><span class="line"><span class="meta">@Tag(name=&quot;用户管理&quot;)</span><span class="comment">//注意导包 import io.swagger.v3.oas.annotations.tags.Tag;</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;根据ID获取用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getById&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">get</span><span class="params">(<span class="meta">@Parameter(description = &quot;用户id&quot;)</span> <span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>访问<br>默认路径为：<code>http://localhost:8080/doc.html</code></p></li></ol>]]></content>
    
    
    <summary type="html">方便的后端接口调试工具</summary>
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="springboot" scheme="https://xusir.fun/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCache</title>
    <link href="https://xusir.fun/posts/2409071035.html"/>
    <id>https://xusir.fun/posts/2409071035.html</id>
    <published>2024-09-07T10:35:29.000Z</published>
    <updated>2025-03-18T08:04:27.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><p>Spring Cache是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。<br>Spring Cache提供了一层抽象，底层可以切换不同的缓存实现，例如：</p><ul><li>EHCache</li><li>Caffeine</li><li>Redis</li></ul><p>导入springcache的坐标<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>而需要实现哪种缓存，只需要导入相应的坐标就行了<br>如使用Redis来作为缓存实现，即将数据存到Redis中，下面的讲解也用<code>Redis</code>来讲解<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="SpringCache常用注解："><a href="#SpringCache常用注解：" class="headerlink" title="SpringCache常用注解："></a>SpringCache常用注解：</h1><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table></div><h1 id="通过案例来了解SpringCache"><a href="#通过案例来了解SpringCache" class="headerlink" title="通过案例来了解SpringCache"></a>通过案例来了解SpringCache</h1><details class="folding-tag" green><summary> 查看案例环境 </summary>              <div class='content'>              <p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><br>sql脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(45) DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>配置文件application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcachedemo?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#    password: 123456</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">itheima:</span></span><br><span class="line">        <span class="attr">mapper:</span> <span class="string">debug</span></span><br><span class="line">        <span class="attr">service:</span> <span class="string">info</span></span><br><span class="line">        <span class="attr">controller:</span> <span class="string">info</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>实体类User<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>UserMapper<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMapper&#123;</span><br><span class="line"></span><br><span class="line">    @Insert(&quot;insert into user(name,age) values (#&#123;name&#125;,#&#123;age&#125;)&quot;)</span><br><span class="line">    @Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span><br><span class="line">    void insert(User user);</span><br><span class="line"></span><br><span class="line">    @Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br><span class="line">    void deleteById(Long id);</span><br><span class="line"></span><br><span class="line">    @Delete(&quot;delete from user&quot;)</span><br><span class="line">    void deleteAll();</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br><span class="line">    User getById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>控制层controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/delAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>&#123;</span><br><span class="line">        userMapper.deleteAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>使用Swagger来调试接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成接口文档配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.itheima.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始设置静态资源映射...&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><p>先在启动类上加上<strong><code>@EnableCaching</code></strong>来开启缓存注解</p><h2 id="插入数据时并存入缓存"><a href="#插入数据时并存入缓存" class="headerlink" title="插入数据时并存入缓存"></a><strong>插入数据时并存入缓存</strong></h2><p>比如现在需要执行插入操作，希望在插入同时存入redis中<br><code>@CachePut(cacheNames = &quot;&quot;,key = &quot;&quot;)</code>,其中key有多种格式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CachePut(cacheNames = &quot;userCache&quot;,key = &quot;#user.id&quot;)</span><span class="comment">//key生成为userCache::2,即key为cacheNames::2</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames = &quot;userCache&quot;,key = &quot;#result.id&quot;)//result即对应为方法返回值</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames = &quot;userCache&quot;,key = &quot;#p0.id&quot;)//`#p0`即为方法第一个参数，或写为`#a0`也一样，还有`#root.args[0]`</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行,插入<code>&#123;&quot;age&quot;: 2,&quot;name&quot;: &quot;zhangshan&quot;&#125;</code>数据，save方法执行完成后，就会将返回结果的user保存到redis中，如果用户id为2，key为<code>userCache::2</code><br>redis中保存为树形结构：userCache目录下的，[Empty]目录下，的key为：userCache::2，值为存入的user对象数据<br><img src="https://picbed.xusir.fun/post_img/java/cache.png" alt="数据"></p><h2 id="查询时先查询缓存"><a href="#查询时先查询缓存" class="headerlink" title="查询时先查询缓存"></a><strong>查询时先查询缓存</strong></h2><p><code>@Cacheable(cacheNames = &quot;&quot;,key = &quot;&quot;)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;userCache&quot;,key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;查询用户信息&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行如上接口时，会先去Redis中查询有无数据，当缓存中有目标数据时，便直接返回数据，不再走方法内的逻辑，如果缓存中没有，则会执行方法内逻辑查询数据库，<br>如果数据库中查询到了数据并返回，cache便会把它存入Redis中，下次查询就会直接走缓存</p><h2 id="删除数据时并清理缓存"><a href="#删除数据时并清理缓存" class="headerlink" title="删除数据时并清理缓存"></a><strong>删除数据时并清理缓存</strong></h2><p>1.清理一条数据<br><code>@CacheEvict(cacheNames = &quot;&quot;,key = &quot;&quot;)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;,key = &quot;#id&quot;)</span><span class="comment">//key为cacheNames::2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    userMapper.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在执行完上述接口时，cache会把Redis中的的数据也删除</p><p>2.清理所有数据<br><code>@CacheEvict(cacheNames = &quot;&quot;,allEntries = true)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/delAll&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;,allEntries = true)</span><span class="comment">//删除userCache中的所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>前面说过，存入Redis中的数据是树形结构的，最外面的目录就是<code>cacheNames</code>的值<br>在参数上添加<code>allEntries = true</code>，便会把该目录下所有数据连同目录都一并删除</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cache&quot;&gt;&lt;a href=&quot;#Spring-Cache&quot; class=&quot;headerlink&quot; title=&quot;Spring Cache&quot;&gt;&lt;/a&gt;Spring Cache&lt;/h1&gt;&lt;p&gt;Spring Cache是一个框架，实现了基于注解的缓存功能</summary>
      
    
    
    
    <category term="Java" scheme="https://xusir.fun/categories/Java/"/>
    
    
    <category term="spring" scheme="https://xusir.fun/tags/spring/"/>
    
  </entry>
  
</feed>
